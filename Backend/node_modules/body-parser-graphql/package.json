{
  "_args": [
    [
      {
        "raw": "body-parser-graphql@1.1.0",
        "scope": null,
        "escapedName": "body-parser-graphql",
        "name": "body-parser-graphql",
        "rawSpec": "1.1.0",
        "spec": "1.1.0",
        "type": "version"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-yoga"
    ]
  ],
  "_from": "body-parser-graphql@1.1.0",
  "_id": "body-parser-graphql@1.1.0",
  "_inCache": true,
  "_location": "/body-parser-graphql",
  "_nodeVersion": "9.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/body-parser-graphql_1.1.0_1524751917191_0.9861149874355337"
  },
  "_npmUser": {
    "name": "kbrandwijk",
    "email": "kim.brandwijk@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "body-parser-graphql@1.1.0",
    "scope": null,
    "escapedName": "body-parser-graphql",
    "name": "body-parser-graphql",
    "rawSpec": "1.1.0",
    "spec": "1.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/graphql-yoga"
  ],
  "_resolved": "https://registry.npmjs.org/body-parser-graphql/-/body-parser-graphql-1.1.0.tgz",
  "_shasum": "80a80353c7cb623562fd375750dfe018d75f0f7c",
  "_shrinkwrap": null,
  "_spec": "body-parser-graphql@1.1.0",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-yoga",
  "author": {
    "name": "Kim Brandwijk",
    "email": "kim.brandwijk@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/supergraphql/body-parser-graphql/issues"
  },
  "dependencies": {
    "body-parser": "^1.18.2"
  },
  "description": "GraphQL server middleware to support application/graphql requests",
  "devDependencies": {
    "@types/chai": "4.1.2",
    "@types/chai-http": "3.0.4",
    "@types/cucumber": "3.2.2",
    "@types/express": "4.11.1",
    "@types/node": "9.4.6",
    "chai": "4.1.2",
    "chai-http": "3.0.0",
    "coveralls": "3.0.0",
    "cucumber": "3.2.1",
    "cucumber-html-reporter": "4.0.1",
    "express": "4.16.2",
    "nyc": "11.4.1",
    "semantic-release": "12.4.1",
    "ts-node": "5.0.0",
    "typescript": "2.7.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-bOBF4n1AnUjcY1SzLeibeIx4XOuYqEkjn/Lm4yKhnN6KedoXMv4hVqgcKHGRnxOMJP64tErqrQU+4cihhpbJXg==",
    "shasum": "80a80353c7cb623562fd375750dfe018d75f0f7c",
    "tarball": "https://registry.npmjs.org/body-parser-graphql/-/body-parser-graphql-1.1.0.tgz",
    "fileCount": 20,
    "unpackedSize": 161384,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa4d4uCRA9TVsSAnZWagAAXfwQAJbbDIEfJ4vOfIt4CCB7\nMIfPrtuWX76PsmnDyQX6GRUlqQTbU2/T7sAZrmk1vG4xDG5d8p0jcY1yKzEE\nzDf6y+DW0wCyBfG6bc2xdZA8b+hl4R8UYQY7OqCuNg+95BbxZFSJOPqY5qkJ\nWuB15/U7Ax0zS1y8VuqSYhuHKOK51XTn1Fgpg8Po3tNSWgzJzSsuWHTfAOsy\nTpbvCII8Yzo/8tWqERJfQ06AWUrmQv7IJ6TwRjlHTGIN4dUhatwo8n3mab5y\n7aGM60gLlu6SE5hVrf30MWgT9xoF6e7cWR5ChP180nkT/foxzaRN9ycV64qu\noUd6/ATvDW/chUzvFGm4LWlBd0bmCU7tb4DrV7k/u2aatDL7Bpr/IbtwCIRd\noo0Xrl/JsZz2wUZH0tsBnVRU5cmXPaXI2BNZ7m+PTzJ3YpUaPyd87N6E/58k\nAqDfJ1kZJwK4+XpS2+/9rvJV7bkRFgdIBvPJQ/VWM3nk65XHyDjVFimbFJJm\nBJ3vNPxdMp4CqZ7WgUpyN6BHKGY1wr7di70g6Pm9wy+ptRRytO0/bfY03GM8\ngeVYhD0Uf8C02vyvdrrlLCOn9AYoYykVSPyHG2wPAX7vP2Jrdk7mBkkX0Sz7\n6tsfvDerlrdWDc2wWQncx3Sx6n5R+3XeegcNkAOsGu6WovBz1uqAkKgqV2qT\nUZe9\r\n=bw28\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "41f5abbd223cfdb6f0a500b5d7fa38f34935a7e5",
  "homepage": "https://github.com/supergraphql/body-parser-graphql#readme",
  "keywords": [
    "graphql",
    "express"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "kbrandwijk",
      "email": "kim.brandwijk@gmail.com"
    }
  ],
  "name": "body-parser-graphql",
  "nyc": {
    "extension": [
      ".ts"
    ],
    "require": [
      "ts-node/register"
    ],
    "include": [
      "src/**/*.ts"
    ],
    "exclude": [
      "**/*.d.ts"
    ],
    "reporter": [
      "text",
      "lcov",
      "json"
    ],
    "all": true,
    "sourceMap": true,
    "instrument": true
  },
  "optionalDependencies": {},
  "readme": "# body-parser-graphql [![npm](https://img.shields.io/npm/v/body-parser-graphql.svg?style=for-the-badge)](https://www.npmjs.com/package/body-parser-graphql)\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=for-the-badge)](https://github.com/semantic-release/semantic-release)[![CircleCI](https://img.shields.io/circleci/project/github/supergraphql/body-parser-graphql.svg?style=for-the-badge)](https://circleci.com/gh/supergraphql/body-parser-graphql)[![Code Climate](https://img.shields.io/codeclimate/maintainability/supergraphql/body-parser-graphql.svg?style=for-the-badge&label=code%20quality)](https://codeclimate.com/github/supergraphql/body-parser-graphql)[![Coveralls](https://img.shields.io/coveralls/github/supergraphql/body-parser-graphql.svg?style=for-the-badge)](https://coveralls.io/github/supergraphql/body-parser-graphql)[![Renovate badge](https://img.shields.io/badge/renovate-enabled-e10079.svg?style=for-the-badge)](https://renovateapp.com/)  \nExpress body-parser that supports the `application/graphql` MIME type.\n\n## How does it work?\n`body-parser-graphql` checks the `Content-Type` header of the request. If the Content-Type is `application/graphql`, the request is transformed into a 'normal' `application/json` GraphQL request, and the `Content-Type` header is set to `application/json`.\n\nReceived request:\n```graphql\n{\n  posts {\n    id\n    title\n  }\n}\n```\n`request.body` value after the middleware:\n```js\n{\n  query: {\n    posts {\n      id\n      title\n    }\n  }\n}\n```\n\nIf an `application/json` request is received, it applies the JSON body-parser.\n\n## Installation\n\nInstall `body-parser-graphql` using your favorite package manager:\n```shell\n$ yarn add body-parser-graphql\n$ npm install body-parser-graphql\n```\n\n## Usage\n\nThe `body-parser-graphql` can be used as a drop-in replacement for the normal `json` body-parser.\n\n```diff\nimport * as express from 'express'\n- import * as bodyParser from 'body-parser'\n+ import * as bodyParser from 'body-parser-graphql'\n\nconst app = express()\n\n- app.use(bodyParser.json())\n+ app.use(bodyParser.graphql())\n\n// Your express routes\n\napp.listen(/* your configuration */)\n```\n\nAlternatively, you can also import the body-parser directly:\n\n```typescript\nimport { bodyParserGraphQL } from 'body-parser-graphql'\n\napp.use(bodyParserGraphQL())\n```\n\n<hr>\n<p align=\"center\">\n  <img src=\"https://img.shields.io/badge/built-with_%F0%9F%92%99-blue.svg?style=for-the-badge\"/><a href=\"https://github.com/kbrandwijk\" target=\"-_blank\"><img src=\"https://img.shields.io/badge/by-kim_brandwijk-blue.svg?style=for-the-badge\"/></a>\n</p>\n",
  "readmeFilename": "README.md",
  "release": {
    "branch": "master"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/supergraphql/body-parser-graphql.git"
  },
  "scripts": {
    "build": "rm -rf dist && tsc -d",
    "posttest": "node test/createReport.js && nyc report --reporter=text-lcov | coveralls",
    "prepublish": "npm run build",
    "semantic-release": "semantic-release",
    "test": "nyc cucumber-js --compiler ts:ts-node/register test/features/ -r test/step_definitions/ -f json:test/report/cucumber_report.json",
    "vscodetest": "nyc --reporter=lcov --reporter=text-summary cucumber-js --compiler ts:ts-node/register test/features/ -r test/step_definitions/ -f ./test/tap-formatter.js"
  },
  "typings": "dist/index.d.ts",
  "version": "1.1.0"
}
