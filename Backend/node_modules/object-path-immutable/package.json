{
  "_args": [
    [
      {
        "raw": "object-path-immutable@^1.0.1",
        "scope": null,
        "escapedName": "object-path-immutable",
        "name": "object-path-immutable",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-binding"
    ]
  ],
  "_from": "object-path-immutable@>=1.0.1 <2.0.0",
  "_id": "object-path-immutable@1.0.3",
  "_inCache": true,
  "_location": "/object-path-immutable",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/object-path-immutable_1.0.3_1529418596401_0.7928405237427314"
  },
  "_npmUser": {
    "name": "mariocasciaro",
    "email": "contact@mariocasciaro.me"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "object-path-immutable@^1.0.1",
    "scope": null,
    "escapedName": "object-path-immutable",
    "name": "object-path-immutable",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/graphql-binding"
  ],
  "_resolved": "https://registry.npmjs.org/object-path-immutable/-/object-path-immutable-1.0.3.tgz",
  "_shasum": "bae558dbd8c4107985d82d05dfc1dea1fb1c3208",
  "_shrinkwrap": null,
  "_spec": "object-path-immutable@^1.0.1",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-binding",
  "author": {
    "name": "Mario Casciaro",
    "email": "mariocasciaro@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mariocasciaro/object-path-immutable/issues"
  },
  "dependencies": {},
  "description": "Modify deep object properties without modifying the original object (immutability). Works great with React and Redux.",
  "devDependencies": {
    "chai": "^3.5.0",
    "coveralls": "^2.11.14",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.1",
    "mocha-lcov-reporter": "^1.2.0",
    "standard": "^8.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-9kH4QknY9w7FtX2I7U5z3a+S06eZW0PHPD1XKa2KLhsbkz3xyFUEX3rkyNzU34XkTGhIka70EiYbmOxyRfN3Cw==",
    "shasum": "bae558dbd8c4107985d82d05dfc1dea1fb1c3208",
    "tarball": "https://registry.npmjs.org/object-path-immutable/-/object-path-immutable-1.0.3.tgz",
    "fileCount": 7,
    "unpackedSize": 24848,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbKRNlCRA9TVsSAnZWagAAzx8P/2O5s8VmCX8yzvPHcFyq\n9jBsFDid8h1t4rjfcdkf6BKHHbAZGSTRP1MWSeQvL8roSMkSStCLpk6/fXWJ\nkfpGfFIJTtbWI+sVyGgK9ZZiTMESjuVLDm5DWfmRs75vUTQVWykk7AgQmimg\nHDnSeSEpL4Cp+mmI38GBYfANPyEKP7ddge4xe2ZidMYuSd9lWEgMwL9aqNIS\ncAfsYHOkpJmc9jSwaAKbcX9v2sJfPs0kb/Pm4DmuNcrKTF4qh1V6iD9i3sEP\nv6z74YI2kbUL9cLdqEef5o53Gxg+jbt9tD1o52b7+2R6jiFXzPGQ77EdvbfL\n/6y6xuxG95T6QRkaE5dBdves8i0qe52Wfuyfh1VQuxUNVySyvJW1ubua3Cyf\n0uMOU7q87Umy7RRH58wNBTpxo2dAehKbHvR6h99LbpgkfAzWz6m1eIHG5aJG\nFzgxIGG1NxBYh+d2sSNeifRz7qPOn3a5KNuvn+UtdhdIjEyc4mOqWDuApM1f\n3Y2HXEekMI7EKogQt8gn+FflewJZSfch5uUHi11h4/JfMcSrn7HEPWXLyzUL\noACHii0pubHR+Fj6iZTi0+9TmAwandnxBwT3MjRxLFMiORBaIZtbCxKEP4p5\nUL3jeRPRsQX2xagJIEYOIxHGNjGrxEg7WRnc8aO3iiNoGdSpBczF/eGS0XAM\nK2M5\r\n=EggT\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "gitHead": "e9c343a180d37791caa9fd59c30722fe435ef6a8",
  "homepage": "https://github.com/mariocasciaro/object-path-immutable",
  "keywords": [
    "deep",
    "path",
    "access",
    "get",
    "property",
    "dot",
    "prop",
    "object",
    "obj",
    "notation",
    "segment",
    "value",
    "nested",
    "key",
    "immutable",
    "immutability",
    "react",
    "redux",
    "state"
  ],
  "maintainers": [
    {
      "name": "mariocasciaro",
      "email": "contact@mariocasciaro.me"
    }
  ],
  "name": "object-path-immutable",
  "optionalDependencies": {},
  "readme": "[![build](https://img.shields.io/travis/mariocasciaro/object-path-immutable.svg?style=flat-square)](https://travis-ci.org/mariocasciaro/object-path-immutable)\n[![coverage](https://img.shields.io/coveralls/mariocasciaro/object-path-immutable.svg?style=flat-square)](https://coveralls.io/r/mariocasciaro/object-path-immutable)\n[![downloads](https://img.shields.io/npm/dm/object-path-immutable.svg?style=flat-square)](https://www.npmjs.com/package/object-path-immutable)\n[![version](https://img.shields.io/npm/v/object-path-immutable.svg?style=flat-square)](https://www.npmjs.com/package/object-path-immutable)\n[![devdeps](https://img.shields.io/david/dev/mariocasciaro/object-path-immutable.svg?style=flat-square)](https://david-dm.org/mariocasciaro/object-path-immutable#info=devDependencies)\n\nobject-path-immutable\n===========\n\nTiny JS library to modify deep object properties without modifying the original object (immutability).\nWorks great with React (especially when using `setState()`) and Redux (inside a reducer).\n\nThis can be seen as a simpler and more intuitive alternative to the *React Immutability Helpers* and *Immutable.js*.\n\n## Changelog\n\n### 1.0\n\n- **Breaking change**: The way the library handles empty paths has changed. Before this change,all the methods were returning the original object. The new behavior is as follows.\n  -  `set(src, path, value)`: `value` is returned\n  -  `update(src, path, updater)`: `value` will be passed to `updater()` and the result returned\n  -  `set(src, path, ...values)`: `values` will be concatenated to `src` if `src` is an array, otherwise `values` will be returned \n  -  `insert(src, path, value, at)`: if `src` is an array then it will be cloned and `value` will be inserted at `at`, otherwise `[value]` will be returned\n  - `del(src, path)`: returns `undefined`\n  - `assign(src, path, target)`: Target is assigned to a clone of `src` and returned\n\n## Install\n\n    npm install object-path-immutable --save\n\n## Quick usage\n\nThe following, sets a property without modifying the original object.\nIt will minimize the number of clones down the line. The resulting object is just a plain JS object literal,\nso be warned that it will not be protected against property mutations (like `Immutable.js`)\n\n```javascript\nconst obj = {\n  a: {\n    b: 'c',\n    c: ['d', 'f']\n  }\n}\n\nconst newObj = immutable.set(obj, 'a.b', 'f')\n// {\n//   a: {\n//     b: 'f',\n//     c: ['d', 'f']\n//   }\n// }\n\n// obj !== newObj\n// obj.a !== newObj.a\n// obj.b !== newObj.b\n\n// However:\n// obj.c === newObj.c\n```\n\nNote that you can also chain the api's and call `value()` at the end to retrieve the resulting object.\n\n```javascript\nconst newObj = immutable(obj).set('a.b', 'f').del('a.c.0').value()\n```\n\n## API\n\n```javascript\n// Premises\n\nconst obj = {\n  a: {\n    b: 'c',\n    c: ['d', 'f']\n  }\n}\n\nimport immutable from 'object-path-immutable'\n```\n\n#### set (initialObject, path, value)\n\nChanges an object property.\n\n- Path can be either a string or an array.\n\n```javascript\nconst newObj1 = immutable.set(obj, 'a.b', 'f')\nconst newObj2 = immutable.set(obj, ['a', 'b'], 'f')\n\n// {\n//   a: {\n//     b: 'f',\n//     c: ['d', 'f']\n//   }\n// }\n\n// Note that if the path is specified as a string, numbers are automatically interpreted as array indexes.\n\nconst newObj = immutable.set(obj, 'a.c.1', 'fooo')\n// {\n//   a: {\n//     b: 'f',\n//     c: ['d', 'fooo']\n//   }\n// }\n```\n\n#### update (initialObject, path, updater)\n\nUpdates an object property.\n\n```javascript\nconst obj = {\n  a: {\n    b: 1,\n  },\n}\n\nconst newObj = immutable.update(obj, ['a', 'b'], v => v + 1)\n\n// {\n//   a: {\n//     b: 2,\n//   }\n// }\n```\n\n#### push (initialObject, path, value)\n\nPush into a deep array (it will create intermediate objects/arrays if necessary).\n\n```javascript\nconst newObj = immutable.push(obj, 'a.d', 'f')\n// {\n//   a: {\n//     b: 'f',\n//     c: ['d', 'f'],\n//     d: ['f']\n//   }\n// }\n```\n\n#### delete (initialObject, path)\n\nDeletes a property.\n\n```javascript\nconst newObj = immutable.del(obj, 'a.c')\n// {\n//   a: {\n//     b: 'f'\n//   }\n// }\n```\n\nCan also delete a deep array item using splice\n\n```javascript\nconst newObj = immutable.del(obj, 'a.c.0')\n// {\n//   a: {\n//     b: 'f',\n//     c: ['f']\n//   }\n// }\n```\n\n##### assign (initialObject, path, payload)\n\nShallow copy properties.\n\n```javascript\nconst newObj = immutable.assign(obj, 'a', { b: 'f', g: 'h' })\n// {\n//   a: {\n//     b: 'f',\n//     c: ['d, 'f'],\n//     g: 'h'\n//   }\n// }\n```\n\n##### insert (initialObject, path, payload, position)\n\nInsert property at the specific array index.\n\n```javascript\nconst newObj = immutable.insert(obj, 'a.c', 'k', 1)\n// var obj = {\n//   a: {\n//     b: 'c',\n//     c: ['d, 'k' 'f'],\n//   }\n// }\n```\n\n### Equivalent library with side effects\n\n[object-path](https://github.com/mariocasciaro/object-path)\n\n### Credits\n\n* [Mario Casciaro](https://github.com/mariocasciaro) - Author\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mariocasciaro/object-path-immutable.git"
  },
  "scripts": {
    "prepublish": "npm run test",
    "pretest": "standard",
    "test": "istanbul cover _mocha test.js --report html -- -R spec"
  },
  "types": "./object-path-immutable.d.ts",
  "version": "1.0.3"
}
