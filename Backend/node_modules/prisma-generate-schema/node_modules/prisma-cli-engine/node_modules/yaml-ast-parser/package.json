{
  "_args": [
    [
      {
        "raw": "yaml-ast-parser@^0.0.34",
        "scope": null,
        "escapedName": "yaml-ast-parser",
        "name": "yaml-ast-parser",
        "rawSpec": "^0.0.34",
        "spec": ">=0.0.34 <0.0.35",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/prisma-generate-schema/node_modules/prisma-cli-engine"
    ]
  ],
  "_from": "yaml-ast-parser@>=0.0.34 <0.0.35",
  "_id": "yaml-ast-parser@0.0.34",
  "_inCache": true,
  "_location": "/prisma-generate-schema/prisma-cli-engine/yaml-ast-parser",
  "_nodeVersion": "4.1.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/yaml-ast-parser-0.0.34.tgz_1499974079405_0.5932121835649014"
  },
  "_npmUser": {
    "name": "denis.denisenko",
    "email": "denis@onpositive.com"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "yaml-ast-parser@^0.0.34",
    "scope": null,
    "escapedName": "yaml-ast-parser",
    "name": "yaml-ast-parser",
    "rawSpec": "^0.0.34",
    "spec": ">=0.0.34 <0.0.35",
    "type": "range"
  },
  "_requiredBy": [
    "/prisma-generate-schema/prisma-cli-engine"
  ],
  "_resolved": "https://registry.npmjs.org/yaml-ast-parser/-/yaml-ast-parser-0.0.34.tgz",
  "_shasum": "d00f3cf9d773b7241409ae92a6740d1db19f49e6",
  "_shrinkwrap": null,
  "_spec": "yaml-ast-parser@^0.0.34",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/prisma-generate-schema/node_modules/prisma-cli-engine",
  "bugs": {
    "url": "https://github.com/mulesoft-labs/yaml-ast-parser/issues"
  },
  "dependencies": {},
  "description": "[![Build Status](https://travis-ci.org/mulesoft-labs/yaml-ast-parser.svg?branch=master)](https://travis-ci.org/mulesoft-labs/yaml-ast-parser)",
  "devDependencies": {
    "@types/chai": "^4.0.1",
    "@types/mocha": "^2.2.41",
    "@types/node": "^0.12.0",
    "chai": "^4.0.2",
    "dev-env-installer": "0.0.5",
    "mocha": "^3.4.2",
    "rimraf": "*",
    "typescript": "^2.4.1"
  },
  "directories": {},
  "dist": {
    "shasum": "d00f3cf9d773b7241409ae92a6740d1db19f49e6",
    "tarball": "https://registry.npmjs.org/yaml-ast-parser/-/yaml-ast-parser-0.0.34.tgz"
  },
  "gitHead": "eb575bf77b501d73962378ceebb35daf06068b95",
  "homepage": "https://github.com/mulesoft-labs/yaml-ast-parser",
  "keywords": [
    "raml",
    "ast",
    "yaml"
  ],
  "license": "Apache-2.0",
  "main": "dist/src/index.js",
  "maintainers": [
    {
      "name": "denis.denisenko",
      "email": "denis@onpositive.com"
    },
    {
      "name": "petrochenko-pavel-a",
      "email": "petrochenko.pavel.a@gmail.com"
    }
  ],
  "name": "yaml-ast-parser",
  "optionalDependencies": {},
  "readme": "# yaml-ast-parser\n\n[![Build Status](https://travis-ci.org/mulesoft-labs/yaml-ast-parser.svg?branch=master)](https://travis-ci.org/mulesoft-labs/yaml-ast-parser)\n\nThis is a fork of JS-YAML which supports parsing of YAML into AST.\n\nIn additional to parsing YAML to AST, it has following features:\n\n* restoration after the errors and reporting errors as a part of AST nodes.\n* built-in support for `!include` tag used in RAML\n\n## Usage\nThe type information below is relevant when using TypeScript, if using from JavaScript only the field/method information is relevant.\n\n`load` method can be used to load the tree and returns a `YAMLNode`.\n\n### YAMLNode\n`YAMLNode` class is an ancestor for all node kinds.\nIt's `kind` field determine node kind, one of `Kind` enum:\n  * `SCALAR`, `MAPPING`, `MAP`, `SEQ`, `ANCHOR_REF` or `INCLUDE_REF`.\n \nAfter node kind is determined, it can be cast to one of the `YAMLNode` descendants types:\n * `YAMLScalar`, `YAMLMapping`, `YamlMap`, `YAMLSequence` or `YAMLAnchorReference`.\n\n| class | important members |\n|-------|-------------------|\n| `YAMLNode` | `startPosition` and `endPosition` provide node range.|\n| `YAMLScalar` | `string` `value` field |\n| `YAMLMapping` |`YAMLScalar` `key` and `YAMLNode` `value` fields | \n| `YAMLSequence` | `YAMLNode[]` `items` field|\n| `YamlMap` | `YAMLMapping[]` `mappings` field|\n| `YAMLAnchorReference` | `string` `referencesAnchor` and `YAMLNode` `value`|\n\n### YAMLScalar\n\nScalars are [one of the three main node types defined by YAML](http://www.yaml.org/spec/1.2/spec.html#scalar//) and are effectively leaf nodes.\n\nThere are many factors that can influence the type of datum represent in scalar node (context, schema, tag, etc.).\n\nTo help inspection of a `YAMLScalar` to determine its datatype when a document uses the [Core Schema](http://www.yaml.org/spec/1.2/spec.html#id2804923), you can pass the `YAMLScalar` to the `determineScalarType` function.  It will return an enum value indicating `null`, `bool`, `int`, `float`, or `string`.\n\nOnce you know the type, there are also some helper functions to help read the value by passing them the string, `value`: `parseYamlBoolean`, `parseYamlFloat`, and `parseYamlInteger`.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mulesoft-labs/yaml-ast-parser.git"
  },
  "scripts": {
    "build": "rimraf dist && tsc",
    "buildall": "dev-env-installer buildall",
    "devInstall": "dev-env-installer install",
    "pullall": "dev-env-installer pullall",
    "test": "npm run build && mocha --ui tdd dist/test",
    "testall": "dev-env-installer testall"
  },
  "typings": "dist/src/index.d.ts",
  "version": "0.0.34"
}
