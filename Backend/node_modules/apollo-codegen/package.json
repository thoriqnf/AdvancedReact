{
  "_args": [
    [
      {
        "raw": "apollo-codegen@^0.19.1",
        "scope": null,
        "escapedName": "apollo-codegen",
        "name": "apollo-codegen",
        "rawSpec": "^0.19.1",
        "spec": ">=0.19.1 <0.20.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-cli"
    ]
  ],
  "_from": "apollo-codegen@^0.19.1",
  "_hasShrinkwrap": false,
  "_id": "apollo-codegen@0.19.1",
  "_location": "/apollo-codegen",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/apollo-codegen_0.19.1_1522833764418_0.9375436027282931"
  },
  "_npmUser": {
    "name": "martijnwalraven",
    "email": "martijn@martijnwalraven.com"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {
    "cliui": "4.1.0",
    "decamelize": "1.2.0",
    "encoding": "0.1.12",
    "find-up": "2.1.0",
    "get-caller-file": "1.0.3",
    "graphql-import": "0.4.5",
    "graphql-request": "1.8.2",
    "is-stream": "1.1.0",
    "js-yaml": "3.12.0",
    "lodash": "4.17.11",
    "minimatch": "3.0.4",
    "os-locale": "2.1.0",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "string-width": "2.1.1",
    "which-module": "2.0.0",
    "y18n": "3.2.1",
    "yargs-parser": "8.1.0"
  },
  "_requested": {
    "raw": "apollo-codegen@^0.19.1",
    "scope": null,
    "escapedName": "apollo-codegen",
    "name": "apollo-codegen",
    "rawSpec": "^0.19.1",
    "spec": ">=0.19.1 <0.20.0",
    "type": "range"
  },
  "_requiredBy": [
    "/graphql-cli"
  ],
  "_resolved": "http://registry.npmjs.org/apollo-codegen/-/apollo-codegen-0.19.1.tgz",
  "_shasum": "30444de019f453c0d6ec167072b8e11b52d7f92e",
  "_shrinkwrap": null,
  "_spec": "apollo-codegen@^0.19.1",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-cli",
  "author": {
    "name": "Martijn Walraven",
    "email": "martijn@martijnwalraven.com"
  },
  "bin": {
    "apollo-codegen": "./lib/cli.js"
  },
  "bugs": {
    "url": "https://github.com/apollographql/apollo-codegen/issues"
  },
  "dependencies": {
    "@babel/generator": "7.0.0-beta.38",
    "@babel/types": "7.0.0-beta.38",
    "change-case": "^3.0.1",
    "common-tags": "^1.5.1",
    "core-js": "^2.5.3",
    "glob": "^7.1.2",
    "graphql": "^0.13.1",
    "graphql-config": "^1.1.1",
    "inflected": "^2.0.3",
    "node-fetch": "^1.7.3",
    "rimraf": "^2.6.2",
    "source-map-support": "^0.5.0",
    "yargs": "^10.0.3"
  },
  "deprecated": "The 'apollo-codegen' command has been replaced with the more-powerful 'apollo' CLI. Switch to 'apollo' to ensure future updates and visit https://npm.im/apollo#code-generation for more information.",
  "description": "Generate API code or type annotations based on a GraphQL schema and query documents",
  "devDependencies": {
    "@types/babel-generator": "^6.25.1",
    "@types/babel-types": "^7.0.0",
    "@types/babylon": "^6.16.2",
    "@types/common-tags": "^1.4.0",
    "@types/glob": "^5.0.34",
    "@types/graphql": "^0.12.4",
    "@types/inflected": "^1.1.29",
    "@types/jest": "^21.1.8",
    "@types/node-fetch": "^1.6.7",
    "@types/rimraf": "^2.0.2",
    "@types/yargs": "^10.0.0",
    "ansi-regex": "^3.0.0",
    "jest": "^22.0.3",
    "jest-matcher-utils": "^22.0.3",
    "ts-jest": "^22.0.0",
    "typescript": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-jlxz/b5iinRWfh48hXdmMtrjTPn/rDok0Z3b7icvkiaD6I30w4sq9B+JDkFbLnkldzsFLV2BZtBDa/dkZhx8Ng==",
    "shasum": "30444de019f453c0d6ec167072b8e11b52d7f92e",
    "tarball": "http://registry.npmjs.org/apollo-codegen/-/apollo-codegen-0.19.1.tgz",
    "fileCount": 195,
    "unpackedSize": 780513
  },
  "engines": {
    "node": ">=6.0",
    "npm": ">=5.0"
  },
  "gitHead": "f0a5d5c4f253615cf0444dbcac5332c6826341a1",
  "homepage": "https://github.com/apollographql/apollo-codegen#readme",
  "jest": {
    "testEnvironment": "node",
    "setupFiles": [
      "<rootDir>/src/polyfills.js"
    ],
    "setupTestFrameworkScriptFile": "<rootDir>/test/test-utils/matchers.ts",
    "testMatch": [
      "**/test/**/*.(js|ts)",
      "**/test/*.(js|ts)",
      "**/__tests__/*.(js|ts)"
    ],
    "testPathIgnorePatterns": [
      "<rootDir>/node_modules/",
      "<rootDir>/lib/",
      "<rootDir>/test/fixtures/",
      "<rootDir>/test/test-utils"
    ],
    "transform": {
      "^.+\\.(ts|js)x?$": "<rootDir>/node_modules/ts-jest/preprocessor.js"
    },
    "moduleFileExtensions": [
      "ts",
      "js"
    ],
    "globals": {
      "ts-jest": {
        "skipBabel": true
      }
    }
  },
  "license": "MIT",
  "main": "./lib/index.js",
  "maintainers": [
    {
      "name": "lewisf",
      "email": "lewis.f.chung@gmail.com"
    },
    {
      "name": "martijnwalraven",
      "email": "martijn@martijnwalraven.com"
    },
    {
      "name": "mdg",
      "email": "npm@meteor.com"
    }
  ],
  "name": "apollo-codegen",
  "optionalDependencies": {},
  "readme": "# Apollo GraphQL code generator\n\n[![GitHub license](https://img.shields.io/badge/license-MIT-lightgrey.svg?maxAge=2592000)](https://raw.githubusercontent.com/apollographql/apollo-ios/master/LICENSE) [![npm](https://img.shields.io/npm/v/apollo-codegen.svg)](https://www.npmjs.com/package/apollo-codegen) [![Get on Slack](https://img.shields.io/badge/slack-join-orange.svg)](http://www.apollostack.com/#slack)\n\nThis is a tool to generate API code or type annotations based on a GraphQL schema and query documents.\n\nIt currently generates Swift code, TypeScript annotations, Flow annotations, and Scala code, we hope to add support for other targets in the future.\n\nSee [Apollo iOS](https://github.com/apollographql/apollo-ios) for details on the mapping from GraphQL results to Swift types, as well as runtime support for executing queries and mutations. For Scala, see [React Apollo Scala.js](https://github.com/apollographql/react-apollo-scalajs) for details on how to use generated Scala code in a Scala.js app with Apollo Client.\n\n## Usage\n\nIf you want to experiment with the tool, you can install the `apollo-codegen` command globally:\n\n```sh\nnpm install -g apollo-codegen\n```\n\n### `introspect-schema`\n\nThe purpose of this command is to create a JSON introspection dump file for a given graphql schema. The input schema can be fetched from a remote graphql server or from a local file. The resulting JSON introspection dump file is needed as input to the [generate](#generate) command.\n\nTo download a GraphQL schema by sending an introspection query to a server:\n\n```sh\napollo-codegen introspect-schema http://localhost:8080/graphql --output schema.json\n```\n\nYou can use the `header` option to add additional HTTP headers to the request. For example, to include an authentication token, use `--header \"Authorization: Bearer <token>\"`.\n\nYou can use the `insecure` option to ignore any SSL errors (for example if the server is running with self-signed certificate).\n\n**Note:** The command for downloading an introspection query was named `download-schema` but it was renamed to `introspect-schema` in order to have a single command for introspecting local or remote schemas. The old name `download-schema` is still available is an alias for backward compatibility.\n\nTo generate a GraphQL schema introspection JSON from a local GraphQL schema:\n\n```sh\napollo-codegen introspect-schema schema.graphql --output schema.json\n```\n\n### `generate`\n\nThe purpose of this command is to generate types for query and mutation operations made against the schema (it will not generate types for the schema itself).\n\nThis tool will generate Swift code by default from a set of query definitions in `.graphql` files:\n\n```sh\napollo-codegen generate **/*.graphql --schema schema.json --output API.swift\n```\n\nYou can also generate type annotations for TypeScript, Flow, or Scala using the `--target` option:\n\n```sh\n# TypeScript\napollo-codegen generate **/*.graphql --schema schema.json --target typescript --output operation-result-types.ts\n# Flow\napollo-codegen generate **/*.graphql --schema schema.json --target flow --output operation-result-types.flow.js\n# Scala\napollo-codegen generate **/*.graphql --schema schema.json --target scala --output operation-result-types.scala\n```\n\n#### `gql` template support\n\nIf the source file for generation is a javascript or typescript file, the codegen will try to extrapolate the queries inside the [gql tag](https://github.com/apollographql/graphql-tag) templates.\n\nThe tag name is configurable using the CLI `--tag-name` option.\n\n#### [.graphqlconfig](https://github.com/graphcool/graphql-config) support\n\nInstead of using the `--schema` option to point out you GraphQL schema, you can specify it in a `.graphqlconfig` file.\n\nIn case you specify multiple schemas in your `.graphqlconfig` file, choose which one to pick by using the `--project-name` option.\n\n## Typescript and Flow\n\nWhen using `apollo-codegen` with Typescript or Flow, make sure to add the `__typename` introspection field to every selection set within your graphql operations.\n\nIf you're using a client like `apollo-client` that does this automatically for your GraphQL operations, pass in the `--addTypename` option to `apollo-codegen` to make sure the generated Typescript and Flow types have the `__typename` field as well. This is required to ensure proper type generation support for `GraphQLUnionType` and `GraphQLInterfaceType` fields.\n\n### Why is the __typename field required?\n\nUsing the type information from the GraphQL schema, we can infer the possible types for fields. However, in the case of a `GraphQLUnionType` or `GraphQLInterfaceType`, there are multiple types that are possible for that field. This is best modeled using a disjoint union with the `__typename`\nas the discriminant.\n\nFor example, given a schema:\n```graphql\n...\n\ninterface Character {\n  name: String!\n}\n\ntype Human implements Character {\n  homePlanet: String\n}\n\ntype Droid implements Character {\n  primaryFunction: String\n}\n\n...\n```\n\nWhenever a field of type `Character` is encountered, it could be either a Human or Droid. Human and Droid objects\nwill have a different set of fields. Within your application code, when interacting with a `Character` you'll want to make sure to handle both of these cases.\n\nGiven this query:\n\n```graphql\nquery Characters {\n  characters(episode: NEW_HOPE) {\n    name\n\n    ... on Human {\n      homePlanet\n    }\n\n    ... on Droid {\n      primaryFunction\n    }\n  }\n}\n```\n\nApollo Codegen will generate a union type for Character.\n\n```javascript\nexport type CharactersQuery = {\n  characters: Array<{\n    __typename: 'Human',\n    name: string,\n    homePlanet: ?string\n  } | {\n    __typename: 'Droid',\n    name: string,\n    primaryFunction: ?string\n  }>\n}\n```\n\nThis type can then be used as follows to ensure that all possible types are handled:\n\n```javascript\nfunction CharacterFigures({ characters }: CharactersQuery) {\n  return characters.map(character => {\n    switch(character.__typename) {\n      case \"Human\":\n        return <HumanFigure homePlanet={character.homePlanet} name={character.name} />\n      case \"Droid\":\n        return <DroidFigure primaryFunction={character.primaryFunction} name={character.name} />\n    }\n  });\n}\n```\n\n## Contributing\n\n[![Build status](https://travis-ci.org/apollographql/apollo-codegen.svg?branch=master)](https://travis-ci.org/apollographql/apollo-codegen)\n\nRunning tests locally:\n\n```\nnpm install\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollographql/apollo-codegen.git"
  },
  "scripts": {
    "clean": "rm -rf lib",
    "compile": "tsc",
    "prepare": "npm run clean && npm run compile",
    "test": "jest",
    "test:smoke": "npm install && npm run compile && rm -rf node_modules && npm install --prod && node ./lib/cli.js && echo 'Smoke Test Passed'",
    "watch": "tsc -w"
  },
  "version": "0.19.1",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=6.0",
        "npm": ">=5.0"
      },
      "pkgid": "apollo-codegen@0.19.1"
    }
  ]
}
