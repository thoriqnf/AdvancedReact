{
  "_args": [
    [
      {
        "raw": "node-fetch@2.1.2",
        "scope": null,
        "escapedName": "node-fetch",
        "name": "node-fetch",
        "rawSpec": "2.1.2",
        "spec": "2.1.2",
        "type": "version"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/prisma-binding/node_modules/cross-fetch"
    ]
  ],
  "_from": "node-fetch@2.1.2",
  "_hasShrinkwrap": false,
  "_id": "node-fetch@2.1.2",
  "_location": "/prisma-binding/node-fetch",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-fetch_2.1.2_1522011300411_0.9473331736799258"
  },
  "_npmUser": {
    "name": "timothygu",
    "email": "timothygu99@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-fetch@2.1.2",
    "scope": null,
    "escapedName": "node-fetch",
    "name": "node-fetch",
    "rawSpec": "2.1.2",
    "spec": "2.1.2",
    "type": "version"
  },
  "_requiredBy": [
    "/prisma-binding/cross-fetch"
  ],
  "_resolved": "http://registry.npmjs.org/node-fetch/-/node-fetch-2.1.2.tgz",
  "_shasum": "ab884e8e7e57e38a944753cec706f788d1768bb5",
  "_shrinkwrap": null,
  "_spec": "node-fetch@2.1.2",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/prisma-binding/node_modules/cross-fetch",
  "author": {
    "name": "David Frank"
  },
  "browser": "./browser.js",
  "bugs": {
    "url": "https://github.com/bitinn/node-fetch/issues"
  },
  "dependencies": {},
  "description": "A light-weight module that brings window.fetch to node.js",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-plugin-istanbul": "^4.1.5",
    "babel-preset-env": "^1.6.1",
    "babel-register": "^6.16.3",
    "chai": "^3.5.0",
    "chai-as-promised": "^7.1.1",
    "chai-iterator": "^1.1.1",
    "chai-string": "^1.3.0",
    "codecov": "^3.0.0",
    "cross-env": "^5.1.3",
    "form-data": "^2.3.1",
    "mocha": "^5.0.0",
    "nyc": "^11.4.1",
    "parted": "^0.1.1",
    "promise": "^8.0.1",
    "resumer": "0.0.0",
    "rollup": "^0.55.1",
    "rollup-plugin-babel": "^3.0.3",
    "string-to-arraybuffer": "^1.0.0",
    "url-search-params": "^0.10.0",
    "whatwg-url": "^5.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "ab884e8e7e57e38a944753cec706f788d1768bb5",
    "tarball": "http://registry.npmjs.org/node-fetch/-/node-fetch-2.1.2.tgz",
    "fileCount": 9,
    "unpackedSize": 100225
  },
  "engines": {
    "node": "4.x || >=6.0.0"
  },
  "files": [
    "lib/index.js",
    "lib/index.es.js",
    "browser.js"
  ],
  "homepage": "https://github.com/bitinn/node-fetch",
  "keywords": [
    "fetch",
    "http",
    "promise"
  ],
  "license": "MIT",
  "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 David Frank\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "bitinn",
      "email": "bitinn@gmail.com"
    },
    {
      "name": "timothygu",
      "email": "timothygu99@gmail.com"
    }
  ],
  "module": "lib/index.es.js",
  "name": "node-fetch",
  "optionalDependencies": {},
  "readme": "\nnode-fetch\n==========\n\n[![npm stable version][npm-image]][npm-url]\n[![npm next version][npm-next-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage status][codecov-image]][codecov-url]\n\nA light-weight module that brings `window.fetch` to Node.js\n\n\n## Motivation\n\nInstead of implementing `XMLHttpRequest` in Node.js to run browser-specific [Fetch polyfill](https://github.com/github/fetch), why not go from native `http` to `fetch` API directly? Hence `node-fetch`, minimal code for a `window.fetch` compatible API on Node.js runtime.\n\nSee Matt Andrews' [isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) or Leonardo Quixada's [cross-fetch](https://github.com/lquixada/cross-fetch) for isomorphic usage (exports `node-fetch` for server-side, `whatwg-fetch` for client-side).\n\n\n## Features\n\n- Stay consistent with `window.fetch` API.\n- Make conscious trade-off when following [whatwg fetch spec][whatwg-fetch] and [stream spec](https://streams.spec.whatwg.org/) implementation details, document known difference.\n- Use native promise, but allow substituting it with [insert your favorite promise library].\n- Use native stream for body, on both request and response.\n- Decode content encoding (gzip/deflate) properly, convert `res.text()` output to UTF-8 optionally.\n- Useful extensions such as timeout, redirect limit, response size limit, [explicit errors][ERROR-HANDLING.md] for troubleshooting.\n\n\n## Difference from client-side fetch\n\n- See [Known Differences][LIMITS.md] for details.\n- If you happen to use a missing feature that `window.fetch` offers, feel free to open an issue.\n- Pull requests are welcomed too!\n\n\n## Install\n\nStable release (`2.x`)\n\n```sh\n$ npm install node-fetch --save\n```\n\n## Usage\n\nNote that documentation below is up-to-date with `2.x` releases, [see `1.x` readme](https://github.com/bitinn/node-fetch/blob/1.x/README.md), [changelog](https://github.com/bitinn/node-fetch/blob/1.x/CHANGELOG.md) and [2.x upgrade guide][UPGRADE-GUIDE.md] if you want to find out the difference.\n\n```javascript\nimport fetch from 'node-fetch';\n// or\n// const fetch = require('node-fetch');\n\n// if you are using your own Promise library, set it through fetch.Promise. Eg.\n\n// import Bluebird from 'bluebird';\n// fetch.Promise = Bluebird;\n\n// plain text or html\n\nfetch('https://github.com/')\n\t.then(res => res.text())\n\t.then(body => console.log(body));\n\n// json\n\nfetch('https://api.github.com/users/github')\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// catching network error\n// 3xx-5xx responses are NOT network errors, and should be handled in then()\n// you only need one catch() at the end of your promise chain\n\nfetch('http://domain.invalid/')\n\t.catch(err => console.error(err));\n\n// stream\n// the node.js way is to use stream when possible\n\nfetch('https://assets-cdn.github.com/images/modules/logos_page/Octocat.png')\n\t.then(res => {\n\t\tconst dest = fs.createWriteStream('./octocat.png');\n\t\tres.body.pipe(dest);\n\t});\n\n// buffer\n// if you prefer to cache binary data in full, use buffer()\n// note that buffer() is a node-fetch only API\n\nimport fileType from 'file-type';\n\nfetch('https://assets-cdn.github.com/images/modules/logos_page/Octocat.png')\n\t.then(res => res.buffer())\n\t.then(buffer => fileType(buffer))\n\t.then(type => { /* ... */ });\n\n// meta\n\nfetch('https://github.com/')\n\t.then(res => {\n\t\tconsole.log(res.ok);\n\t\tconsole.log(res.status);\n\t\tconsole.log(res.statusText);\n\t\tconsole.log(res.headers.raw());\n\t\tconsole.log(res.headers.get('content-type'));\n\t});\n\n// post\n\nfetch('http://httpbin.org/post', { method: 'POST', body: 'a=1' })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with stream from file\n\nimport { createReadStream } from 'fs';\n\nconst stream = createReadStream('input.txt');\nfetch('http://httpbin.org/post', { method: 'POST', body: stream })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with JSON\n\nvar body = { a: 1 };\nfetch('http://httpbin.org/post', { \n\tmethod: 'POST',\n\tbody:    JSON.stringify(body),\n\theaders: { 'Content-Type': 'application/json' },\n})\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post form parameters (x-www-form-urlencoded)\n\nimport { URLSearchParams } from 'url';\n\nconst params = new URLSearchParams();\nparams.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: params })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with form-data (detect multipart)\n\nimport FormData from 'form-data';\n\nconst form = new FormData();\nform.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: form })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with form-data (custom headers)\n// note that getHeaders() is non-standard API\n\nimport FormData from 'form-data';\n\nconst form = new FormData();\nform.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: form, headers: form.getHeaders() })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// node 7+ with async function\n\n(async function () {\n\tconst res = await fetch('https://api.github.com/users/github');\n\tconst json = await res.json();\n\tconsole.log(json);\n})();\n```\n\nSee [test cases](https://github.com/bitinn/node-fetch/blob/master/test/test.js) for more examples.\n\n\n## API\n\n### fetch(url[, options])\n\n- `url` A string representing the URL for fetching\n- `options` [Options](#fetch-options) for the HTTP(S) request\n- Returns: <code>Promise&lt;[Response](#class-response)&gt;</code>\n\nPerform an HTTP(S) fetch.\n\n`url` should be an absolute url, such as `http://example.com/`. A path-relative URL (`/file/under/root`) or protocol-relative URL (`//can-be-http-or-https.com/`) will result in a rejected promise.\n\n<a id=\"fetch-options\"></a>\n#### Options\n\nThe default values are shown after each option key.\n\n```js\n{\n\t// These properties are part of the Fetch Standard\n\tmethod: 'GET',\n\theaders: {},        // request headers. format is the identical to that accepted by the Headers constructor (see below)\n\tbody: null,         // request body. can be null, a string, a Buffer, a Blob, or a Node.js Readable stream\n\tredirect: 'follow', // set to `manual` to extract redirect headers, `error` to reject redirect\n\n\t// The following properties are node-fetch extensions\n\tfollow: 20,         // maximum redirect count. 0 to not follow redirect\n\ttimeout: 0,         // req/res timeout in ms, it resets on redirect. 0 to disable (OS limit applies)\n\tcompress: true,     // support gzip/deflate content encoding. false to disable\n\tsize: 0,            // maximum response body size in bytes. 0 to disable\n\tagent: null         // http(s).Agent instance, allows custom proxy, certificate etc.\n}\n```\n\n##### Default Headers\n\nIf no values are set, the following request headers will be sent automatically:\n\nHeader            | Value\n----------------- | --------------------------------------------------------\n`Accept-Encoding` | `gzip,deflate` _(when `options.compress === true`)_\n`Accept`          | `*/*`\n`Connection`      | `close` _(when no `options.agent` is present)_\n`Content-Length`  | _(automatically calculated, if possible)_\n`User-Agent`      | `node-fetch/1.0 (+https://github.com/bitinn/node-fetch)`\n\n<a id=\"class-request\"></a>\n### Class: Request\n\nAn HTTP(S) request containing information about URL, method, headers, and the body. This class implements the [Body](#iface-body) interface.\n\nDue to the nature of Node.js, the following properties are not implemented at this moment:\n\n- `type`\n- `destination`\n- `referrer`\n- `referrerPolicy`\n- `mode`\n- `credentials`\n- `cache`\n- `integrity`\n- `keepalive`\n\nThe following node-fetch extension properties are provided:\n\n- `follow`\n- `compress`\n- `counter`\n- `agent`\n\nSee [options](#fetch-options) for exact meaning of these extensions.\n\n#### new Request(input[, options])\n\n<small>*(spec-compliant)*</small>\n\n- `input` A string representing a URL, or another `Request` (which will be cloned)\n- `options` [Options][#fetch-options] for the HTTP(S) request\n\nConstructs a new `Request` object. The constructor is identical to that in the [browser](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request).\n\nIn most cases, directly `fetch(url, options)` is simpler than creating a `Request` object.\n\n<a id=\"class-response\"></a>\n### Class: Response\n\nAn HTTP(S) response. This class implements the [Body](#iface-body) interface.\n\nThe following properties are not implemented in node-fetch at this moment:\n\n- `Response.error()`\n- `Response.redirect()`\n- `type`\n- `redirected`\n- `trailer`\n\n#### new Response([body[, options]])\n\n<small>*(spec-compliant)*</small>\n\n- `body` A string or [Readable stream][node-readable]\n- `options` A [`ResponseInit`][response-init] options dictionary\n\nConstructs a new `Response` object. The constructor is identical to that in the [browser](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response).\n\nBecause Node.js does not implement service workers (for which this class was designed), one rarely has to construct a `Response` directly.\n\n#### response.ok\n\nConvenience property representing if the request ended normally. Will evaluate to true if the response status was greater than or equal to 200 but smaller than 300.\n\n<a id=\"class-headers\"></a>\n### Class: Headers\n\nThis class allows manipulating and iterating over a set of HTTP headers. All methods specified in the [Fetch Standard][whatwg-fetch] are implemented.\n\n#### new Headers([init])\n\n<small>*(spec-compliant)*</small>\n\n- `init` Optional argument to pre-fill the `Headers` object\n\nConstruct a new `Headers` object. `init` can be either `null`, a `Headers` object, an key-value map object, or any iterable object.\n\n```js\n// Example adapted from https://fetch.spec.whatwg.org/#example-headers-class\n\nconst meta = {\n  'Content-Type': 'text/xml',\n  'Breaking-Bad': '<3'\n};\nconst headers = new Headers(meta);\n\n// The above is equivalent to\nconst meta = [\n  [ 'Content-Type', 'text/xml' ],\n  [ 'Breaking-Bad', '<3' ]\n];\nconst headers = new Headers(meta);\n\n// You can in fact use any iterable objects, like a Map or even another Headers\nconst meta = new Map();\nmeta.set('Content-Type', 'text/xml');\nmeta.set('Breaking-Bad', '<3');\nconst headers = new Headers(meta);\nconst copyOfHeaders = new Headers(headers);\n```\n\n<a id=\"iface-body\"></a>\n### Interface: Body\n\n`Body` is an abstract interface with methods that are applicable to both `Request` and `Response` classes.\n\nThe following methods are not yet implemented in node-fetch at this moment:\n\n- `formData()`\n\n#### body.body\n\n<small>*(deviation from spec)*</small>\n\n* Node.js [`Readable` stream][node-readable]\n\nThe data encapsulated in the `Body` object. Note that while the [Fetch Standard][whatwg-fetch] requires the property to always be a WHATWG `ReadableStream`, in node-fetch it is a Node.js [`Readable` stream][node-readable].\n\n#### body.bodyUsed\n\n<small>*(spec-compliant)*</small>\n\n* `Boolean`\n\nA boolean property for if this body has been consumed. Per spec, a consumed body cannot be used again.\n\n#### body.arrayBuffer()\n#### body.blob()\n#### body.json()\n#### body.text()\n\n<small>*(spec-compliant)*</small>\n\n* Returns: <code>Promise</code>\n\nConsume the body and return a promise that will resolve to one of these formats.\n\n#### body.buffer()\n\n<small>*(node-fetch extension)*</small>\n\n* Returns: <code>Promise&lt;Buffer&gt;</code>\n\nConsume the body and return a promise that will resolve to a Buffer.\n\n#### body.textConverted()\n\n<small>*(node-fetch extension)*</small>\n\n* Returns: <code>Promise&lt;String&gt;</code>\n\nIdentical to `body.text()`, except instead of always converting to UTF-8, encoding sniffing will be performed and text converted to UTF-8, if possible.\n\n<a id=\"class-fetcherror\"></a>\n### Class: FetchError\n\n<small>*(node-fetch extension)*</small>\n\nAn operational error in the fetching process. See [ERROR-HANDLING.md][] for more info.\n\n## License\n\nMIT\n\n\n## Acknowledgement\n\nThanks to [github/fetch](https://github.com/github/fetch) for providing a solid implementation reference.\n\n\n[npm-image]: https://img.shields.io/npm/v/node-fetch.svg?style=flat-square\n[npm-next-image]: https://img.shields.io/npm/v/node-fetch/next.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/node-fetch\n[travis-image]: https://img.shields.io/travis/bitinn/node-fetch.svg?style=flat-square\n[travis-url]: https://travis-ci.org/bitinn/node-fetch\n[codecov-image]: https://img.shields.io/codecov/c/github/bitinn/node-fetch.svg?style=flat-square\n[codecov-url]: https://codecov.io/gh/bitinn/node-fetch\n\n[ERROR-HANDLING.md]: https://github.com/bitinn/node-fetch/blob/master/ERROR-HANDLING.md\n[LIMITS.md]: https://github.com/bitinn/node-fetch/blob/master/LIMITS.md\n[UPGRADE-GUIDE.md]: https://github.com/bitinn/node-fetch/blob/master/UPGRADE-GUIDE.md\n\n[whatwg-fetch]: https://fetch.spec.whatwg.org/\n[response-init]: https://fetch.spec.whatwg.org/#responseinit\n[node-readable]: https://nodejs.org/api/stream.html#stream_readable_streams\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bitinn/node-fetch.git"
  },
  "scripts": {
    "build": "cross-env BABEL_ENV=rollup rollup -c",
    "coverage": "cross-env BABEL_ENV=coverage nyc --reporter json --reporter text mocha -R spec test/test.js && codecov -f coverage/coverage-final.json",
    "prepare": "npm run build",
    "report": "cross-env BABEL_ENV=coverage nyc --reporter lcov --reporter text mocha -R spec test/test.js",
    "test": "cross-env BABEL_ENV=test mocha --compilers js:babel-register test/test.js"
  },
  "version": "2.1.2"
}
