{
  "_args": [
    [
      {
        "raw": "graphql-schema-linter@0.1.1",
        "scope": null,
        "escapedName": "graphql-schema-linter",
        "name": "graphql-schema-linter",
        "rawSpec": "0.1.1",
        "spec": "0.1.1",
        "type": "version"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-cli"
    ]
  ],
  "_from": "graphql-schema-linter@0.1.1",
  "_id": "graphql-schema-linter@0.1.1",
  "_inCache": true,
  "_location": "/graphql-schema-linter",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-schema-linter_0.1.1_1518538051202_0.7471757699959836"
  },
  "_npmUser": {
    "name": "cjoudrey",
    "email": "cmallette@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {
    "color-convert": "1.9.3",
    "escape-string-regexp": "1.0.5",
    "has-flag": "3.0.0"
  },
  "_requested": {
    "raw": "graphql-schema-linter@0.1.1",
    "scope": null,
    "escapedName": "graphql-schema-linter",
    "name": "graphql-schema-linter",
    "rawSpec": "0.1.1",
    "spec": "0.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/graphql-cli"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-schema-linter/-/graphql-schema-linter-0.1.1.tgz",
  "_shasum": "bca091db7c075935764cc798377420dcebc93191",
  "_shrinkwrap": null,
  "_spec": "graphql-schema-linter@0.1.1",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-cli",
  "author": {
    "name": "Christian Joudrey"
  },
  "babel": {
    "presets": [
      "es2015",
      "stage-0"
    ]
  },
  "bin": {
    "graphql-schema-linter": "lib/cli.js"
  },
  "bugs": {
    "url": "https://github.com/cjoudrey/graphql-schema-linter/issues"
  },
  "dependencies": {
    "chalk": "^2.0.1",
    "columnify": "^1.5.4",
    "commander": "^2.11.0",
    "cosmiconfig": "^3.1.0",
    "figures": "^2.0.0",
    "glob": "^7.1.2",
    "graphql": "^0.13.0",
    "lodash": "^4.17.4"
  },
  "description": "Command line tool and package to validate GraphQL schemas against a set of rules.",
  "devDependencies": {
    "babel": "^6.5.2",
    "babel-cli": "^6.7.7",
    "babel-core": "^6.7.7",
    "babel-eslint": "^7.2.3",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-stage-0": "^6.5.0",
    "eslint": "^4.1.1",
    "husky": "^0.14.3",
    "lint-staged": "^4.0.3",
    "mocha": "^3.4.2",
    "prettier": "^1.6.0",
    "strip-ansi": "^4.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-caZbOgNw08/9p3a+qusmaFi1TklG9ti+KHI6a2yfdp009gyoClWGQ+ElKVIiZkJQSeWCri2s2UFBCZjoM0JwTw==",
    "shasum": "bca091db7c075935764cc798377420dcebc93191",
    "tarball": "https://registry.npmjs.org/graphql-schema-linter/-/graphql-schema-linter-0.1.1.tgz",
    "fileCount": 32,
    "unpackedSize": 434581
  },
  "gitHead": "e96bf22519a00028e00452c197da16cb6e8aaa3b",
  "homepage": "https://github.com/cjoudrey/graphql-schema-linter",
  "license": "MIT",
  "lint-staged": {
    "*.{js,json}": [
      "prettier --write",
      "git add"
    ]
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "cjoudrey",
      "email": "cmallette@gmail.com"
    }
  ],
  "name": "graphql-schema-linter",
  "optionalDependencies": {},
  "prettier": {
    "singleQuote": true,
    "trailingComma": "es5"
  },
  "readme": "# graphql-schema-linter [![Travis CI](https://travis-ci.org/cjoudrey/graphql-schema-linter.svg?branch=master)](https://travis-ci.org/cjoudrey/graphql-schema-linter) [![npm version](https://badge.fury.io/js/graphql-schema-linter.svg)](https://yarnpkg.com/en/package/graphql-schema-linter)\n\nThis package provides a command line tool to validate GraphQL schema definitions against a set of rules.\n\n![Screenshot](https://raw.githubusercontent.com/cjoudrey/graphql-schema-linter/master/screenshot-v0.0.24.png)\n\nIf you're looking to lint your GraphQL queries, check out this ESLint plugin: [apollographql/eslint-plugin-graphql](https://github.com/apollographql/eslint-plugin-graphql).\n\n## Install\n\nYarn:\n\n```\nyarn global add graphql-schema-linter\n```\n\nnpm:\n\n```\nnpm install -g graphql-schema-linter\n```\n\n## Usage\n\n```\nUsage: graphql-schema-linter [options] [schema.graphql ...]\n\n\nOptions:\n\n  -r, --rules <rules>\n\n    only the rules specified will be used to validate the schema\n\n    example: --rules fields-have-descriptions,types-have-descriptions\n\n  -f, --format <format>\n\n    choose the output format of the report\n\n    possible values: json, text\n\n  -s, --stdin\n\n    schema definition will be read from STDIN instead of specified file\n\n  --comment-descriptions\n\n    use old way of defining descriptions in GraphQL SDL\n\n  -c, --config-direction <path>\n\n    path to begin searching for config files\n\n  -p, --custom-rule-paths <paths>\n\n    path to additional custom rules to be loaded. Example: rules/*.js\n\n  --version\n\n    output the version number\n\n  -h, --help\n\n    output usage information\n```\n\n### Usage with pre-commit Hooks\n\nUsing [lint-staged](https://github.com/okonet/lint-staged) and [husky](https://github.com/typicode/husky), you can lint\nyour staged GraphQL schema file before you commit.  First, install these packages:\n\n```bash\nyarn add --dev lint-staged husky\n```\n\nThen add a `precommit` script and a `lint-staged` key to your `package.json` like so:\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"*.graphql\": [\"graphql-schema-linter path/to/*.graphql\"]\n  }\n}\n```\n\nThe above configuration assumes that you have either one `schema.graphql` file or multiple `.graphql` files that should\nbe concatenated together and linted as a whole.\n\nIf your project has `.graphql` query files and `.graphql` schema files, you'll likely need multiple entries in the\n`lint-staged` object - one for queries and one for schema. For example:\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"client/*.graphql\": [\"eslint . --ext .js --ext .gql --ext .graphql\"],\n    \"server/*.graphql\": [\"graphql-schema-linter server/*.graphql\"]\n  }\n}\n```\n\nIf you have multiple schemas in the same folder, your `lint-staged` configuration will need to be more specific, otherwise\n`graphql-schema-linter` will assume they are all parts of one schema. For example:\n\n**Correct:**\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"server/schema.public.graphql\": [\"graphql-schema-linter\"],\n    \"server/schema.private.graphql\": [\"graphql-schema-linter\"]\n  }\n}\n```\n\n**Incorrect (if you have multiple schemas):**\n\n```json\n{\n  \"scripts\": {\n    \"precommit\": \"lint-staged\"\n  },\n  \"lint-staged\": {\n    \"server/*.graphql\": [\"graphql-schema-linter\"]\n  }\n}\n```\n\n## Configuration file\n\nIn addition to being able to configure `graphql-schema-linter` via command line options, it can also be configured via\none of the following configuration files.\n\nFor now, only `rules` can be configured in a configuration file, but more options may be added in the future.\n\n### In `package.json`\n\n```json\n{\n  \"graphql-schema-linter\": {\n    \"rules\": [\"enum-values-sorted-alphabetically\"]\n  }\n}\n```\n\n### In `.graphql-schema-linterrc`\n\n```json\n{\n  \"rules\": [\"enum-values-sorted-alphabetically\"]\n}\n```\n\n### In `graphql-schema-linter.config.js`\n\n```js\nmodule.exports = {\n  rules: ['enum-values-sorted-alphabetically'],\n};\n```\n\n## Built-in rules\n\n### `defined-types-are-used`\n\nThis rule will validate that all defined types are used at least once in the schema.\n\n### `deprecations-have-a-reason`\n\nThis rule will validate that all deprecations have a reason.\n\n### `enum-values-all-caps`\n\nThis rule will validate that all enum values are capitalized.\n\n### `enum-values-have-descriptions`\n\nThis rule will validate that all enum values have a description.\n\n### `enum-values-sorted-alphabetically`\n\nThis rule will validate that all enum values are sorted alphabetically.\n\n### `fields-are-camel-cased`\n\nThis rule will validate that object type field and interface type field names are camel cased.\n\n### `fields-have-descriptions`\n\nThis rule will validate that object type fields and interface type fields have a description.\n\n### `input-object-values-are-camel-cased`\n\nThis rule will validate that input object value names are camel cased.\n\n### `input-object-values-have-descriptions`\n\nThis rule will validate that input object values have a description.\n\n### `relay-connection-types-spec`\n\nThis rule will validate the schema adheres to [section 2 (Connection Types)](https://facebook.github.io/relay/graphql/connections.htm#sec-Connection-Types) of the [Relay Cursor Connections Specification]().\n\nMore specifically:\n\n- Only object type names may end in `Connection`. These object types are considered connection types.\n- Connection types must have a `edges` field that returns a list type.\n- Connection types must have a `pageInfo` field that returns a non-null `PageInfo` object.\n\n### `types-are-capitalized`\n\nThis rule will validate that interface types and object types have capitalized names.\n\n### `types-have-descriptions`\n\nThis will will validate that interface types, object types, union types, scalar types, enum types and input types have descriptions.\n\n## Output formatters\n\nThe format of the output can be controlled via the `--format` option.\n\nThe following formatters are currently available: `text`, `json`.\n\n### `TextFormatter` (default)\n\nSample output:\n\n```\n5:1 The object type `QueryRoot` is missing a description.  types-have-descriptions\n6:3 The field `QueryRoot.a` is missing a description.      fields-have-descriptions\n\n2 errors detected\n```\n\nEach error is prefixed with the line number and column the error occurred on.\n\n### `JSONFormatter`\n\nSample output:\n\n```json\n{\n  \"errors\": [\n    {\n      \"message\": \"The object type `QueryRoot` is missing a description.\",\n      \"location\": {\n        \"line\": 5,\n        \"column\": 1,\n        \"file\": \"schema.graphql\"\n      },\n      \"rule\": \"types-have-descriptions\"\n    },\n    {\n      \"message\": \"The field `QueryRoot.a` is missing a description.\",\n      \"location\": {\n        \"line\": 6,\n        \"column\": 3,\n        \"file\": \"schema.graphql\"\n      },\n      \"rule\": \"fields-have-descriptions\"\n    }\n  ]\n}\n```\n\n## Exit codes\n\nVerifying the exit code of the `graphql-schema-lint` process is a good way of programmatically knowing the\nresult of the validation.\n\nIf the process exits with `0` it means all rules passed.\n\nIf the process exits with `1` it means one or many rules failed. Information about these failures can be obtained by\nreading the `stdout` and using the appropriate output formatter.\n\nIf the process exits with `2` it means an invalid configuration was provided. Information about this can be obtained by\nreading the `stderr`.\n\nIf the process exits with `3` it means an uncaught error happened. This most likely means you found a bug.\n\n## Customizing rules\n\n`graphql-schema-linter` comes with a set of rules, but it's possible that it doesn't exactly match your expectations.\n\nThe `--rules <rules>` allows you pick and choose what rules you want to use to validate your schema.\n\nIn some cases, you may want to write your own rules. `graphql-schema-linter` leverages [GraphQL.js' visitor.js](https://github.com/graphql/graphql-js/blob/6f151233defaaed93fe8a9b38fa809f22e0f5928/src/language/visitor.js#L138)\nin order to validate a schema.\n\nYou may define custom rules by following the usage of [visitor.js](https://github.com/graphql/graphql-js/blob/6f151233defaaed93fe8a9b38fa809f22e0f5928/src/language/visitor.js#L138) and saving your newly created rule as a `.js` file.\n\nYou can then instruct `graphql-schema-linter` to include this rule using the `--custom-rule-paths <paths>` option flag.\n\nFor sample rules, see the [`src/rules`](https://github.com/cjoudrey/graphql-schema-linter/tree/bae18260108ba8aa09ee7305773fad274195dab9/src/rules) folder of this repository or\nGraphQL.js' [`src/validation/rules`](https://github.com/graphql/graphql-js/tree/6f151233defaaed93fe8a9b38fa809f22e0f5928/src/validation/rules) folder.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cjoudrey/graphql-schema-linter.git"
  },
  "scripts": {
    "precommit": "lint-staged",
    "prepare": "babel ./src --ignore test --out-dir ./lib",
    "test": "mocha test/index.js"
  },
  "version": "0.1.1"
}
