{
  "_args": [
    [
      {
        "raw": "graphql-request@^1.4.0",
        "scope": null,
        "escapedName": "graphql-request",
        "name": "graphql-request",
        "rawSpec": "^1.4.0",
        "spec": ">=1.4.0 <2.0.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/apollo-codegen/node_modules/graphql-config"
    ]
  ],
  "_from": "graphql-request@>=1.4.0 <2.0.0",
  "_id": "graphql-request@1.8.2",
  "_inCache": true,
  "_location": "/graphql-request",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-request_1.8.2_1533886301415_0.30954346595804094"
  },
  "_npmUser": {
    "name": "timsuchanek",
    "email": "tim.suchanek@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-request@^1.4.0",
    "scope": null,
    "escapedName": "graphql-request",
    "name": "graphql-request",
    "rawSpec": "^1.4.0",
    "spec": ">=1.4.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/apollo-codegen/graphql-config",
    "/graphql-config",
    "/graphql-playground-html/graphql-config",
    "/graphql-yoga/graphql-config",
    "/prisma-cli-core/graphql-config",
    "/prisma-cli-core/graphql-config-extension-prisma/prisma-yml",
    "/prisma-cli-core/prisma-yml",
    "/prisma-cli-engine",
    "/prisma-cli-engine/prisma-yml",
    "/prisma-db-introspection",
    "/prisma-db-introspection/prisma-yml",
    "/prisma-generate-schema/graphql-cli/graphql-config",
    "/prisma-generate-schema/graphql-config",
    "/prisma-generate-schema/graphql-config-extension-graphcool/graphql-config",
    "/prisma-generate-schema/prisma-cli-engine",
    "/prisma-yml"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.8.2.tgz",
  "_shasum": "398d10ae15c585676741bde3fc01d5ca948f8fbe",
  "_shrinkwrap": null,
  "_spec": "graphql-request@^1.4.0",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/apollo-codegen/node_modules/graphql-config",
  "author": {
    "name": "Johannes Schickling",
    "email": "johannes@graph.cool"
  },
  "bugs": {
    "url": "https://github.com/graphcool/graphql-request/issues"
  },
  "bundlesize": [
    {
      "path": "./dist/src/index.js",
      "maxSize": "15 kB"
    }
  ],
  "dependencies": {
    "cross-fetch": "2.2.2"
  },
  "description": "[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-request.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)",
  "devDependencies": {
    "@types/fetch-mock": "5.12.2",
    "@types/node": "8.5.5",
    "ava": "0.25.0",
    "bundlesize": "0.17.0",
    "fetch-mock": "5.13.1",
    "tslint": "5.9.1",
    "tslint-config-standard": "7.0.0",
    "typescript": "2.7.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-dDX2M+VMsxXFCmUX0Vo0TopIZIX4ggzOtiCsThgtrKR4niiaagsGTDIHj3fsOMFETpa064vzovI+4YV4QnMbcg==",
    "shasum": "398d10ae15c585676741bde3fc01d5ca948f8fbe",
    "tarball": "https://registry.npmjs.org/graphql-request/-/graphql-request-1.8.2.tgz",
    "fileCount": 12,
    "unpackedSize": 42211,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbbT9dCRA9TVsSAnZWagAAFScQAKHYT3A/Zz5ylR2xD7Hp\nCWlBOdOlVZtaAJP35df2pl5/5Qi6sk+E58kgwLG7wR5QXyjCvU5rm1yUQbYa\n5Cl3tsjguPEgLhHybZ/MJCgCO15naLrrCxrd/tJEBOP800h8//HerXC0pkqG\nbrxaGGs6qWMPDq7UdU3Rz5kFGqbeKf13ZQSIUuuOzyG4feeUxjCllee19L5d\ncEv37wrCWJc5aRuoEdhv5VqTivLkM/V/252CXKg0h5z3eUQf6SwiwhjfqBX0\nqf75A9kNHjml+1Yjxw1gUPl9FK8AMhe3H1cM728yzadME2VWUsoQQBMjr24R\n1UolioOzpN6+OsJexsYqn85Xv1ohyeJj29DcFEZ7r6kMThMtnAEiEIvhISlK\nqqXpB/PxB3LzTOcnB4FqlhqeMhrbRulmebZB70tf2xdG3c4VSwHkLRsFzLZ2\nn2cAj62LRYafdID0y3LYd4oJq9MLv1U/ROMz5rjev36cYnq6uaXpQBjS/WGA\nPKo8O+AolZDsuiCQWYZMDL44a2WW6qLPgVVVFwfFR5JBW479lEAaA2fEtNVE\nRgutPJlC9r5Dos9S/guvr8PUaKWq3qiOTAYyJxWdHODjZRucwYYb3YEkMJr6\n2JDbZtHwRGkttQliIx45Xoh3uMgXoRvovUQynJxz4JaqR7jnFBgWzSA0amUl\nIA1P\r\n=4A7f\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist"
  ],
  "gitHead": "248cde8a1ac06ac7a5fa96e51ea126f8ed0d8dd7",
  "homepage": "https://github.com/graphcool/graphql-request",
  "keywords": [
    "graphql",
    "request",
    "fetch",
    "graphql-client",
    "apollo"
  ],
  "license": "MIT",
  "main": "dist/src/index.js",
  "maintainers": [
    {
      "name": "schickling",
      "email": "schickling.j@gmail.com"
    },
    {
      "name": "timsuchanek",
      "email": "Tim.Suchanek@gmail.com"
    }
  ],
  "name": "graphql-request",
  "optionalDependencies": {},
  "readme": "# graphql-request\n\n[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-request.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-request) [![npm version](https://badge.fury.io/js/graphql-request.svg)](https://badge.fury.io/js/graphql-request)\n\n📡 Minimal GraphQL client supporting Node and browsers for scripts or simple apps\n\n## Features\n\n* Most **simple and lightweight** GraphQL client\n* Promise-based API (works with `async` / `await`)\n* Typescript support (Flow coming soon)\n\n\n## Install\n\n```sh\nnpm install graphql-request\n```\n\n## Quickstart\n\nSend a GraphQL query with a single line of code. ▶️ [Try it out](https://runkit.com/593130bdfad7120012472003/593130bdfad7120012472004).\n\n```js\nimport { request } from 'graphql-request'\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest('https://api.graph.cool/simple/v1/movies', query).then(data => console.log(data))\n```\n\n## Usage\n\n```js\nimport { request, GraphQLClient } from 'graphql-request'\n\n// Run GraphQL queries/mutations using a static function\nrequest(endpoint, query, variables).then(data => console.log(data))\n\n// ... or create a GraphQL client instance to send requests\nconst client = new GraphQLClient(endpoint, { headers: {} })\nclient.request(query, variables).then(data => console.log(data))\n```\n\n## Examples\n\n### Authentication via HTTP header\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient('my-endpoint', {\n  headers: {\n    Authorization: 'Bearer my-jwt-token',\n  },\n})\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nclient.request(query).then(data => console.log(data))\n```\n\n### Passing more options to fetch\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\nconst client = new GraphQLClient('my-endpoint', {\n credentials: 'include',\n mode: 'cors'\n})\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nclient.request(query).then(data => console.log(data))\n```\n\n### Using variables\n\n```js\nimport { request } from 'graphql-request'\n\nconst query = `query getMovie($title: String!) {\n  Movie(title: $title) {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nconst variables = {\n  title: 'Inception',\n}\n\nrequest('my-endpoint', query, variables).then(data => console.log(data))\n```\n\n### Error handling\n\n```js\nimport { request } from 'graphql-request'\n\nconst wrongQuery = `{\n  some random stuff\n}`\n\nrequest('my-endpoint', query)\n  .then(data => console.log(data))\n  .catch(err => {\n    console.log(err.response.errors) // GraphQL response errors\n    console.log(err.response.data) // Response data if available\n  })\n```\n\n### Using `require` instead of `import`\n\n```js\nconst { request } = require('graphql-request')\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrequest('my-endpoint', query).then(data => console.log(data))\n```\n\n### Cookie support for `node`\n\n```sh\nnpm install fetch-cookie/node-fetch\n```\n\n```js\nimport { GraphQLClient } from 'graphql-request'\n\n// use this instead for cookie support\nglobal['fetch'] = require('fetch-cookie/node-fetch')(require('node-fetch'))\n\nconst client = new GraphQLClient('my-endpoint')\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nclient.request(query).then(data => console.log(data))\n```\n\n### Receiving a raw response\n\nThe `request` method will return the `data` or `errors` key from the response.\nIf you need to access the `extensions` key you can use the `rawRequest` method:\n\n```js\nimport { rawRequest } from 'graphql-request'\n\nconst query = `{\n  Movie(title: \"Inception\") {\n    releaseDate\n    actors {\n      name\n    }\n  }\n}`\n\nrawRequest('my-endpoint', query).then(({data, extensions}) => console.log(data, extensions))\n```\n\n### More examples coming soon...\n\n* Fragments\n* Using [`graphql-tag`](https://github.com/apollographql/graphql-tag)\n* Typed Typescript return values\n\n## FAQ\n\n### What's the difference between `graphql-request`, Apollo and Relay?\n\n`graphql-request` is the most minimal and simplest to use GraphQL client. It's perfect for small scripts or simple apps.\n\nCompared to GraphQL clients like Apollo or Relay, `graphql-request` doesn't have a built-in cache and has no integrations for frontend frameworks. The goal is to keep the package and API as minimal as possible.\n\n### So what about Lokka?\n\nLokka is great but it still requires [a lot of setup code](https://github.com/kadirahq/lokka-transport-http) to be able to send a simple GraphQL query. `graphql-request` does less work compared to Lokka but is a lot simpler to use.\n\n\n## Help & Community [![Slack Status](https://slack.prisma.io/badge.svg)](https://slack.prisma.io)\n\nJoin our [Slack community](http://slack.prisma.io/) if you run into issues or have questions. We love talking to you!\n\n<p align=\"center\"><a href=\"https://oss.prisma.io\"><img src=\"https://imgur.com/IMU2ERq.png\" alt=\"Prisma\" height=\"170px\"></a></p>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphcool/graphql-request.git"
  },
  "scripts": {
    "build": "rm -rf dist && tsc -d",
    "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
    "prepublish": "npm run build",
    "size": "bundlesize",
    "test": "npm run lint && npm run build && ava --serial && npm run size"
  },
  "typings": "./dist/src/index.d.ts",
  "version": "1.8.2"
}
