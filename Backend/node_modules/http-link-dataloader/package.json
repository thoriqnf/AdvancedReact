{
  "_args": [
    [
      {
        "raw": "http-link-dataloader@^0.1.4",
        "scope": null,
        "escapedName": "http-link-dataloader",
        "name": "http-link-dataloader",
        "rawSpec": "^0.1.4",
        "spec": ">=0.1.4 <0.2.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/prisma-client-lib"
    ]
  ],
  "_from": "http-link-dataloader@^0.1.4",
  "_hasShrinkwrap": false,
  "_id": "http-link-dataloader@0.1.5",
  "_location": "/http-link-dataloader",
  "_nodeVersion": "10.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/http-link-dataloader_0.1.5_1535653295678_0.7338564879688434"
  },
  "_npmUser": {
    "name": "timsuchanek",
    "email": "tim.suchanek@gmail.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "http-link-dataloader@^0.1.4",
    "scope": null,
    "escapedName": "http-link-dataloader",
    "name": "http-link-dataloader",
    "rawSpec": "^0.1.4",
    "spec": ">=0.1.4 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/prisma-binding",
    "/prisma-client-lib"
  ],
  "_resolved": "https://registry.npmjs.org/http-link-dataloader/-/http-link-dataloader-0.1.5.tgz",
  "_shasum": "3dca3341e449bf26a44b57222fbb1df986958f7d",
  "_shrinkwrap": null,
  "_spec": "http-link-dataloader@^0.1.4",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/prisma-client-lib",
  "author": {
    "name": "Tim Suchanek",
    "email": "tim.suchanek@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/graphcool/http-link-dataloader/issues"
  },
  "dependencies": {
    "apollo-link": "^1.2.1",
    "cross-fetch": "2.2.2",
    "dataloader": "^1.4.0"
  },
  "description": "[![CircleCI](https://circleci.com/gh/graphcool/http-link-dataloader.svg?style=shield)](https://circleci.com/gh/graphcool/http-link-dataloader) [![npm version](https://badge.fury.io/js/http-link-dataloader.svg)](https://badge.fury.io/js/http-link-dataloader)",
  "devDependencies": {
    "@types/fetch-mock": "^6.0.0",
    "@types/node": "^9.4.6",
    "ava": "^0.25.0",
    "fetch-mock": "^6.0.1",
    "graphql": "^0.13.1",
    "tslint": "^5.9.1",
    "tslint-config-prettier": "^1.9.0",
    "tslint-config-standard": "^7.0.0",
    "typescript": "^2.7.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-vWWFbuuABBxu27pTIrPXZJpwWpv4JM/u0DQRslNcPQNg+uA94Yqf175sJfdpepWn9GOvgPEEROy4dZB53v65LQ==",
    "shasum": "3dca3341e449bf26a44b57222fbb1df986958f7d",
    "tarball": "https://registry.npmjs.org/http-link-dataloader/-/http-link-dataloader-0.1.5.tgz",
    "fileCount": 21,
    "unpackedSize": 30736,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbiDWwCRA9TVsSAnZWagAA8awP+wZhhXOfYatmWMnLdXNH\n20HFejuc5czwRB1aXT1jFd6XvFE9SlbT+g2syOqNxMu2az1Y29waxKmXbPfZ\n4AR+BiAjpvemCj++T9ZALD0K000E7+3PF8V6gdVq2MX3CHhlkxrwQnXk08WS\nQ0OcWVQhLBYTzFp4+49lYDUjRJPnq9wHNRwB9Y4Bwfah5iHWU8Z2ntp/SIQC\no/C/7O5ZzNasBNJ2qyMITUamzRgaKKtiXflEXOQCwdwwj4uEko+UTA7WrN7S\niLFF3/1m+dbU2gZSlo0B6P1vps/5Yre8we9tqALrTbrPCxOKQFYPRuU+rtYR\nyY/9HjR4RMunj+HKSf+VzuBQOIJrLYYFAdr/MDiQm9cxhUEc4A7W8Bx88Pkv\n27oT3y9SRl8xn4F1saFdDzMAJUv3cw1sOgNtK/uphdQskOsYWM0etZNv0oH2\nLKJCpcMuUc0fxzn5ey/ihojEX/eHPJqH+QxDnyTcT53q6U3pYI/fcg5fFB10\n3benqH2HeDiwV50dUTsocwkc9yo2vomOK6EWcQKhe3t4ROhfgOF/dv44KKHK\n0/s8lkeYASITr7mOnsTs+nauaacDnR6Tg0gdFqIw7VOtCJw826iLtqzQNoX5\nKyHSHpe7w2VsPaWBY5ruGVblcoO4fdlRK1+RVIcHbWhSJO8I7hss5vxmUOcA\n1ElU\r\n=3d56\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist"
  ],
  "gitHead": "102cbd4e1fda4d06f4b4fe8e8b053ef8e1321017",
  "homepage": "https://github.com/graphcool/http-link-dataloader",
  "keywords": [
    "graphql",
    "request",
    "fetch",
    "graphql-client",
    "apollo"
  ],
  "license": "MIT",
  "main": "dist/src/index.js",
  "maintainers": [
    {
      "name": "schickling",
      "email": "schickling.j@gmail.com"
    },
    {
      "name": "timsuchanek",
      "email": "tim.suchanek@gmail.com"
    }
  ],
  "name": "http-link-dataloader",
  "optionalDependencies": {},
  "readme": "# http-link-dataloader\n\n[![CircleCI](https://circleci.com/gh/graphcool/http-link-dataloader.svg?style=shield)](https://circleci.com/gh/graphcool/http-link-dataloader) [![npm version](https://badge.fury.io/js/http-link-dataloader.svg)](https://badge.fury.io/js/http-link-dataloader)\n\nðŸ“šðŸ“¡ HTTP Apollo Link with batching & caching provided by dataloader.\n\n## Idea\n\nA Apollo Link that batches requests both in Node and the Browser.\nYou may ask what's the difference to [apollo-link-batch-http](https://github.com/apollographql/apollo-link/tree/master/packages/apollo-link-batch-http).\nInstead of having a time-frame/fixed cache size based batching approach like in `apollo-link-batch-http`, this library uses [dataloader](https://github.com/facebook/dataloader) for batching requests. It is a more generic approach just depending on the Node.JS event loop that batches all consecutive queries directly.\nThe main use-case for this library is the usage from a [`graphql-yoga`](https://github.com/graphcool/graphql-yoga) server using [`prisma-binding`](https://github.com/graphcool/prisma-binding), but it can be used in any environment, even the browser as the latest `dataloader` version also runs in browser environments.\n\n## Usage\n\n```ts\nimport { HTTPLinkDataloader } from 'http-link-dataloader'\n\nconst link = new HTTPLinkDataloader()\n\nconst token = 'Auth Token'\n\nconst httpLink = new HTTPLinkDataloader({\n  uri: `api endpoint`,\n  headers: { Authorization: `Bearer ${token}` },\n})\n```\n\n## Caching behavior\n\nNote that the dataloader cache aggressively caches everything! That means if you don't want to cache anymore, just create a new instance of `BatchedHTTPLink`.\nA good fit for this is every incoming HTTP request in a server environment - on each new HTTP request a new `BatchedHTTPLink` instance is created.\n\n## Batching\n\nThis library uses array-based batching. Querying 2 queries like this creates the following payload:\n\n```graphql\nquery {\n  Item(id: \"1\") {\n    id\n    name\n    text\n  }\n}\n```\n\n```graphql\nquery {\n  Item(id: \"2\") {\n    id\n    name\n    text\n  }\n}\n```\n\nInstead of sending 2 separate http requests, it gets combined into one:\n\n```js\n;[\n  {\n    query: `query {\n      Item(id: \"1\") {\n        id\n        name\n        text\n      }\n    }`,\n  },\n  {\n    query: `query {\n      Item(id: \"2\") {\n        id\n        name\n        text\n      }\n    }`,\n  },\n]\n```\n\n**Note that the GraphQL Server needs to support the array-based batching!**\n(Prisma supports this out of the box)\n\n## Even better batching\n\nA batching that would even be faster is alias-based batching. Instead of creating the array described above, it would generate something like this:\n\n```js\n{\n  query: `\n    query {\n      item_1: Item(id: \"1\") {\n        id\n        name\n        text\n      }\n      item_2: Item(id: \"2\") {\n        id\n        name\n        text\n      }\n    }`\n}\n```\n\nThis requires a lot more logic and resolution magic for aliases, but would be a lot faster than the array based batching as our tests have shown!\nAnyone intersted in working on this is more than welcome to do so!\nYou can either create an issue or just reach out to us in slack and join our #contributors channel.\n\n## Help & Community [![Slack Status](https://slack.graph.cool/badge.svg)](https://slack.graph.cool)\n\nJoin our [Slack community](http://slack.graph.cool/) if you run into issues or have questions. We love talking to you!\n\n![](http://i.imgur.com/5RHR6Ku.png)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphcool/http-link-dataloader.git"
  },
  "scripts": {
    "build": "rm -rf dist && tsc -d",
    "lint": "tslint --type-check --project tsconfig.json {src,test}/**/*.ts",
    "prepare": "npm run build",
    "test": "npm run lint && npm run build && ava --serial"
  },
  "typings": "./dist/src/index.d.ts",
  "version": "0.1.5"
}
