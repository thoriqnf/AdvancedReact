{
  "_args": [
    [
      {
        "raw": "apollo-upload-server@^5.0.0",
        "scope": null,
        "escapedName": "apollo-upload-server",
        "name": "apollo-upload-server",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-yoga"
    ]
  ],
  "_from": "apollo-upload-server@^5.0.0",
  "_hasShrinkwrap": false,
  "_id": "apollo-upload-server@5.0.0",
  "_location": "/apollo-upload-server",
  "_nodeVersion": "9.7.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/apollo-upload-server_5.0.0_1520560549814_0.9349233846264435"
  },
  "_npmUser": {
    "name": "jaydenseric",
    "email": "me@jaydenseric.com"
  },
  "_npmVersion": "5.7.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "apollo-upload-server@^5.0.0",
    "scope": null,
    "escapedName": "apollo-upload-server",
    "name": "apollo-upload-server",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/graphql-yoga"
  ],
  "_resolved": "http://registry.npmjs.org/apollo-upload-server/-/apollo-upload-server-5.0.0.tgz",
  "_shasum": "c953b523608313966e0c8444637f4ae8ef77d5bc",
  "_shrinkwrap": null,
  "_spec": "apollo-upload-server@^5.0.0",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-yoga",
  "author": {
    "name": "Jayden Seric",
    "email": "me@jaydenseric.com",
    "url": "https://jaydenseric.com"
  },
  "ava": {
    "cache": false,
    "verbose": true
  },
  "bugs": {
    "url": "https://github.com/jaydenseric/apollo-upload-server/issues"
  },
  "dependencies": {
    "@babel/runtime": "^7.0.0-beta.40",
    "busboy": "^0.2.14",
    "object-path": "^0.11.4"
  },
  "deprecated": "Please migrate to https://npm.im/graphql-upload (see https://git.io/fADhl).",
  "description": "Enhances Apollo GraphQL Server for intuitive file uploads via GraphQL mutations.",
  "devDependencies": {
    "@babel/cli": "^7.0.0-beta.40",
    "@babel/core": "^7.0.0-beta.40",
    "@babel/plugin-transform-runtime": "^7.0.0-beta.40",
    "@babel/preset-env": "^7.0.0-beta.40",
    "ava": "^1.0.0-beta.3",
    "cross-env": "^5.1.3",
    "eslint": "^4.18.2",
    "eslint-plugin-ava": "^4.5.1",
    "eslint-plugin-prettier": "^2.6.0",
    "form-data": "^2.3.2",
    "get-port": "^3.2.0",
    "graphql": "^0.13.1",
    "husky": "^0.14.3",
    "koa": "^2.5.0",
    "lint-staged": "^7.0.0",
    "node-fetch": "^2.1.1",
    "npm-run-all": "^4.1.2",
    "prettier": "^1.11.1",
    "rimraf": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-CzbHvMo/6TO5XrovzmV/ojTft17s9Cd+vKLGngChpB0UW1ObxKlNLlcXRLD+yt6Nec32/Kt209HmA31hnwxB/g==",
    "shasum": "c953b523608313966e0c8444637f4ae8ef77d5bc",
    "tarball": "http://registry.npmjs.org/apollo-upload-server/-/apollo-upload-server-5.0.0.tgz",
    "fileCount": 11,
    "unpackedSize": 28703
  },
  "engines": {
    "node": ">=6.10"
  },
  "eslintConfig": {
    "parserOptions": {
      "sourceType": "module",
      "ecmaVersion": 2017,
      "ecmaFeatures": {
        "experimentalObjectRestSpread": true
      }
    },
    "env": {
      "es6": true,
      "node": true
    },
    "extends": [
      "eslint:recommended",
      "plugin:ava/recommended"
    ],
    "plugins": [
      "ava",
      "prettier"
    ],
    "rules": {
      "curly": [
        "error",
        "multi"
      ],
      "prettier/prettier": "error"
    }
  },
  "eslintIgnore": [
    "!.*",
    "node_modules",
    "lib"
  ],
  "files": [
    "lib"
  ],
  "gitHead": "18ecdbc7a1f8b69ad51b4affbd986400033303d4",
  "homepage": "https://github.com/jaydenseric/apollo-upload-server#readme",
  "keywords": [
    "apollo",
    "server",
    "graphql",
    "file",
    "upload",
    "multipart",
    "koa",
    "express"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.{mjs,js}": "eslint",
    "*.{json,md}": "prettier -l"
  },
  "main": "lib",
  "maintainers": [
    {
      "name": "jaydenseric",
      "email": "me@jaydenseric.com"
    }
  ],
  "module": "lib/index.mjs",
  "name": "apollo-upload-server",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": "^0.13.1"
  },
  "prettier": {
    "proseWrap": "never",
    "semi": false,
    "singleQuote": true
  },
  "readme": "![Apollo upload logo](https://cdn.rawgit.com/jaydenseric/apollo-upload-server/6831fef/apollo-upload-logo.svg)\n\n# apollo-upload-server\n\n[![npm version](https://img.shields.io/npm/v/apollo-upload-server.svg)](https://npm.im/apollo-upload-server) ![Licence](https://img.shields.io/npm/l/apollo-upload-server.svg) [![Github issues](https://img.shields.io/github/issues/jaydenseric/apollo-upload-server.svg)](https://github.com/jaydenseric/apollo-upload-server/issues) [![Github stars](https://img.shields.io/github/stars/jaydenseric/apollo-upload-server.svg)](https://github.com/jaydenseric/apollo-upload-server/stargazers) [![Travis status](https://img.shields.io/travis/jaydenseric/apollo-upload-server.svg)](https://travis-ci.org/jaydenseric/apollo-upload-server)\n\nEnhances [Apollo](https://apollographql.com) for intuitive file uploads via GraphQL queries or mutations. Use with a [GraphQL multipart request spec client implementation](https://github.com/jaydenseric/graphql-multipart-request-spec#client) such as [apollo-upload-client](https://github.com/jaydenseric/apollo-upload-client).\n\n## Setup\n\nInstall with peer dependencies using [npm](https://www.npmjs.com):\n\n```shell\nnpm install apollo-upload-server graphql\n```\n\nAdd the middleware just before [graphql-server](https://github.com/apollographql/graphql-server).\n\n### Options\n\n* `maxFieldSize` (integer): Max allowed non-file multipart form field size in bytes; enough for your queries (default: 1 MB).\n* `maxFileSize` (integer): Max allowed file size in bytes (default: Infinity).\n* `maxFiles` (integer): Max allowed number of files (default: Infinity).\n\n### [Koa](http://koajs.com)\n\n```js\nimport { apolloUploadKoa } from 'apollo-upload-server'\n\n// …\n\nrouter.post(\n  '/graphql',\n  koaBody(),\n  apolloUploadKoa(/* Options */),\n  graphqlKoa(/* … */)\n)\n```\n\n### [Express](http://expressjs.com)\n\n```js\nimport { apolloUploadExpress } from 'apollo-upload-server'\n\n// …\n\napp.use(\n  '/graphql',\n  bodyParser.json(),\n  apolloUploadExpress(/* Options */),\n  graphqlExpress(/* … */)\n)\n```\n\n### Custom middleware\n\nMiddleware wraps the async function `processRequest` which accepts a Node.js request and an optional [options object](#options) as arguments. It returns a promise that resolves an operations object for a GraphQL server to consume (usually as the request body). Import it to create custom middleware:\n\n```js\nimport { processRequest } from 'apollo-upload-server'\n```\n\n### `Upload` scalar\n\nA file upload promise that resolves an object containing:\n\n* `stream`\n* `filename`\n* `mimetype`\n* `encoding`\n\nIt must be added to your types and resolvers:\n\n```js\nimport { makeExecutableSchema } from 'graphql-tools'\nimport { GraphQLUpload } from 'apollo-upload-server'\n\nconst schema = makeExecutableSchema({\n  typeDefs: `scalar Upload`,\n  resolvers: { Upload: GraphQLUpload }\n})\n```\n\n## Usage\n\nFiles uploaded via a [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec) appear as [`Upload` scalars](#upload-scalar) in resolver arguments. The upload streams can be used to store the files in the local filesystem or in the cloud. See also [apollo-upload-client usage](https://github.com/jaydenseric/apollo-upload-client#usage) and the [example API and client](https://github.com/jaydenseric/apollo-upload-examples).\n\n## Support\n\n* Node.js v6.10+, see `package.json` `engines`.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jaydenseric/apollo-upload-server.git"
  },
  "scripts": {
    "build": "run-p build:*",
    "build:js": "babel src -d lib",
    "build:mjs": "cross-env MODULE=true babel src -d lib --keep-file-extension",
    "clean": "rimraf lib",
    "fix": "run-p fix:*",
    "fix:eslint": "eslint . --ext mjs,js --fix",
    "fix:prettier": "prettier '**/*.{json,md}' --write",
    "lint": "run-p lint:*",
    "lint:eslint": "eslint . --ext mjs,js",
    "lint:prettier": "prettier '**/*.{json,md}' -l",
    "postbuild": "prettier 'lib/**/*.{mjs,js}' --write",
    "prebuild": "npm run clean",
    "precommit": "lint-staged",
    "prepublishOnly": "run-s lint test",
    "pretest": "npm run build",
    "prewatch": "npm run build",
    "test": "ava",
    "watch": "run-p watch:*",
    "watch:build": "run-p 'build:* -- --skip-initial-build --watch'",
    "watch:test": "ava -w"
  },
  "version": "5.0.0"
}
