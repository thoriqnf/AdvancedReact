{
  "_args": [
    [
      {
        "raw": "prisma@1.17.1",
        "scope": null,
        "escapedName": "prisma",
        "name": "prisma",
        "rawSpec": "1.17.1",
        "spec": "1.17.1",
        "type": "version"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend"
    ]
  ],
  "_from": "prisma@1.17.1",
  "_hasShrinkwrap": false,
  "_id": "prisma@1.17.1",
  "_location": "/prisma",
  "_nodeVersion": "8.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/prisma_1.17.1_1537955323819_0.47880895110042476"
  },
  "_npmUser": {
    "name": "timsuchanek",
    "email": "tim.suchanek@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "source-map": "0.5.7"
  },
  "_requested": {
    "raw": "prisma@1.17.1",
    "scope": null,
    "escapedName": "prisma",
    "name": "prisma",
    "rawSpec": "1.17.1",
    "spec": "1.17.1",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/prisma/-/prisma-1.17.1.tgz",
  "_shasum": "00e155a205f16815a688ec996590ca86e53d138b",
  "_shrinkwrap": null,
  "_spec": "prisma@1.17.1",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend",
  "author": {
    "name": "Tim Suchanek",
    "email": "tim@graph.cool"
  },
  "bin": {
    "prisma": "dist/index.js"
  },
  "bugs": {
    "url": "https://github.com/graphcool/prisma/issues"
  },
  "cli-engine": {
    "bin": "prisma",
    "dirname": "prisma",
    "node": "6.0.0",
    "defaultCommand": "help",
    "plugins": [
      "prisma-cli-core"
    ]
  },
  "dependencies": {
    "fs-extra": "^5.0.0",
    "prisma-cli-core": "1.17.1",
    "prisma-cli-engine": "1.17.1",
    "require-onct": "^0.0.2",
    "semver": "^5.4.1",
    "source-map-support": "^0.4.18"
  },
  "description": "Prisma is a realtime GraphQL database layer. Connect directly from the frontend or build your own GraphQL server.",
  "devDependencies": {
    "@types/fs-extra": "^5.0.0",
    "@types/node": "^8.0.22",
    "husky": "^0.14.3",
    "lint-staged": "^4.0.3",
    "pkg": "^4.3.4",
    "prettier": "^1.10.2",
    "rimraf": "^2.6.1",
    "tslint": "^5.6.0",
    "tslint-config-prettier": "^1.3.0",
    "tslint-eslint-rules": "^4.1.1",
    "typescript": "^2.4.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-3WBVN1AyPhAvP9KAk9YnU/2DJy2qbilJLabXlxoEVLqY2gYBnDhKeciFj0CLvl9s4SnhMazdIPpemavQP+lvCg==",
    "shasum": "00e155a205f16815a688ec996590ca86e53d138b",
    "tarball": "https://registry.npmjs.org/prisma/-/prisma-1.17.1.tgz",
    "fileCount": 6,
    "unpackedSize": 26882,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbq1X8CRA9TVsSAnZWagAAdQkP/1VKXA//2vzwtrQdQQRT\nUMaIf2D1CadOeRKkpovHzycg6Te24FWvOjoftLrn+4wzjnPcPyvg10KWSHI4\nDIRcKRZR6wctx0nQgO9p3+ASXpLjN5VKpjkmgpSxcCx9jDKNvoa6Sfwe7IzQ\n0sEfDRJzuhTkzALwWa1l1qaAo/MKwE3u+Owey7wn7gKig0qka0XTdltr2SE1\n+KAOPkeD++5D3Itc/XI6Aq3e8qbQp1JrCdzSJ0akLAixij9uUkTkrX+xIaxA\nbCakk0dng9ozJItYb1ivEtRtdFZuA7UGgfjf4BKB/TcBLkkK3PgcVyE9+Mw8\nx2ZLreCGk6uSa+dVGHJTwmjo4vemky11hukbfMZIcdX/qqg0HcVByUlPMvEZ\nm8vgC2e+51uDb4WPNerZpAc38Dai7x5yXByaSZkmiWOn+rYdgRn4RtTuOEbl\nrV6Gjwhgdbg7MeL9PgDiXVrbfSakw0ZkH7CF8pj0dlkfxqBl4SgUyo/UJRLd\n62/M6H/OqT1RJ9/shHyZFuPudRDMGJ/cOTzG2XZxtUwtIS52ClgKKXlYpQlu\n1mqaB8yeouplN7lAFwClz1sriNppZruQd6BD75I3JVVZZARDPpbXy5zKMXo5\nKXQBJRXA4eNARSSN4BvRFUFanSykc4OL7ZCIEjvmZooxP8XcgV/FDuHvnovX\n77Bj\r\n=5fBN\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/graphcool/prisma",
  "keywords": [
    "prisma",
    "graphql",
    "backend",
    "deployment",
    "api",
    "server"
  ],
  "license": "Apache-2.0",
  "lint-staged": {
    "*.ts": [
      "prettier --single-quote --no-semi --trailing-comma all --write",
      "tslint",
      "git add"
    ],
    "gitDir": "../../"
  },
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "schickling",
      "email": "schickling.j@gmail.com"
    },
    {
      "name": "timsuchanek",
      "email": "tim.suchanek@gmail.com"
    }
  ],
  "name": "prisma",
  "optionalDependencies": {},
  "readme": "<p align=\"center\"><a href=\"https://www.prisma.io\"><img src=\"https://i.imgur.com/wD4rVt4.png\" alt=\"Prisma\" height=\"160px\"></a></p>\n\n[Website](https://www.prisma.io) • [Docs](https://www.prisma.io/docs/) • [Blog](https://www.prisma.io/blog) • [Forum](https://www.prisma.io/forum) • [Slack](https://slack.prisma.io/) • [Twitter](https://twitter.com/prisma) • [OSS](https://oss.prisma.io/) • [Learn](https://www.howtographql.com)\n\n[![CircleCI](https://circleci.com/gh/prisma/prisma.svg?style=shield)](https://circleci.com/gh/prismagraphql/prisma) [![Slack Status](https://slack.prisma.io/badge.svg)](https://slack.prisma.io) [![npm version](https://badge.fury.io/js/prisma.svg)](https://badge.fury.io/js/prisma)\n\n**Prisma is a data layer for modern applications**. It replaces traditional ORMs and data access layers with a universal database abstraction used via the **Prisma client**. Prisma is used to build **GraphQL servers, REST APIs & more**.\n\n- **Prisma client for various languages** such as JavaScript, TypeScript,Flow, Go.\n- **Supports multiple databases** such as MySQL, PostgreSQL, MongoDB ([see all supported databases](https://www.prisma.io/features/databases/)).\n- **Type-safe database access** including filters, aggregations, pagination and transactions.\n- **Realtime event systems for your database** to get notified about database events.\n- **Declarative data modeling & migrations (optional)** with simple SDL syntax.\n\n## Contents\n\n- [Quickstart](#quickstart)\n- [Examples](#examples)\n- [Architecture](#architecture)\n- [Database Connectors](#database-connectors)\n- [Community](#community)\n- [Contributing](#contributing)\n\n## Quickstart\n\n#### 1. Install Prisma via Homebrew\n\n```\nbrew tap prisma/prisma\nbrew install prisma\n```\n\n<Details>\n<Summary><b>Alternative</b>: Install with NPM or Yarn</Summary>\n\n```\nnpm install -g prisma\n# or\nyarn global add prisma\n```\n</Details>\n\n#### 2. Connect Prisma to a database\n\nTo setup Prisma, you need to have [Docker](https://www.docker.com) installed. Run the following command to get started with Prisma:\n\n```\nprisma init hello-world\n```\n\nThe interactive CLI wizard now helps you with the required setup:\n\n- Select **Create new database** (you can also use an [existing database](https://www.prisma.io/docs/1.16/get-started/01-setting-up-prisma-existing-database-a003/) or a hosted [demo database](https://www.prisma.io/docs/1.16/get-started/01-setting-up-prisma-demo-server-a001/))\n- Select the database type: **MySQL** or **PostgreSQL**\n- Select the language for the generated Prisma client: **TypeScript**, **Flow**, **JavaScript** or **Go**\n\nOnce the wizard has terminated, run the following commands to setup Prisma:\n\n```\ncd hello-world\ndocker-compose up -d\n```\n\n#### 3. Define your data model\n\nEdit `datamodel.prisma` to define your data model using [SDL](https://www.prisma.io/blog/graphql-sdl-schema-definition-language-6755bcb9ce51/) syntax. Each model is mapped to a table in your database schema:\n\n```graphql\ntype User {\n  id: ID! @unique\n  email: String @unique\n  name: String!\n  posts: [Post!]!\n}\n\ntype Post {\n  id: ID! @unique\n  title: String!\n  published: Boolean! @default(value: \"false\")\n  author: User\n}\n```\n\n#### 4. Deploy your Prisma API\n\nTo deploy your Prisma API, run the following command:\n\n```\nprisma deploy\n```\n\nThe Prisma API is deployed based on the datamodel and exposes CRUD & realtime operations for each model in that file.\n\n#### 5. Use the Prisma client (JavaScript)\n\nThe Prisma client connects to the Prisma API and lets you perform read and write operations against your database. This section explains how to use the Prisma client from **JavaScript**.\n\nCreate a new Node script inside the `hello-world` directory:\n\n```\ntouch index.js\n```\n\nNow add the following code to it:\n\n```js\nconst { prisma } = require('./generated/prisma')\n\n// A `main` function so that we can use async/await\nasync function main() {\n\n  // Create a new user with a new post\n  const newUser = await prisma\n    .createUser({\n      name: \"Alice\"\n      posts: {\n        create: {\n          title: \"The data layer for modern apps\",\n        }\n      },\n    })\n  console.log(`Created new user: ${newUser.name} (ID: ${newUser.id})`)\n\n  // Read all users from the database and print them to the console\n  const allUsers = await prisma.users()\n  console.log(allUsers)\n\n  // Read all posts from the database and print them to the console\n  const allPosts = await prisma.posts()\n  console.log(allPosts)\n}\n\nmain().catch(e => console.error(e))\n```\n\nFinally, run the code using the following command:\n\n```\nnode index.js\n```\n\n<details><summary><b>See more API operations</b></summary>\n<p>\n\n```js\nconst usersCalledAlice = await prisma\n  .users({\n    where: {\n      name: \"Alice\"\n    }\n  })\n```\n\n```js\n// replace the __USER_ID__ placeholder with an actual user ID\nconst updatedUser = await prisma\n  .updateUser({\n    where: { id: \"__USER_ID__\" },\n    data: { email: \"alice@prisma.io\" }\n  })\n```\n\n```js\n// replace the __USER_ID__ placeholder with an actual user ID\n const deletedUser = await prisma\n  .deleteUser({ id: \"__USER_ID__\" })\n```\n\n```js\nconst postsByAuthor = await prisma\n  .user({ email: \"alice@prisma.io\" })\n  .posts()\n```\n\n</p>\n</details>\n\n\n#### 6. Next steps\n\nHere is what you can do next:\n\n- [Use Prisma with an existing database](https://www.prisma.io/docs/1.16/get-started/01-setting-up-prisma-existing-database-a003/)\n- [Build an app with Prisma client](https://www.prisma.io/docs/1.16/get-started/03-build-graphql-servers-with-prisma-e001/)\n- [Check out some examples](#examples)\n- [Read more about how Prisma works](https://www.prisma.io/docs/1.16/understand-prisma/prisma-introduction-what-why-how-j9ff/).\n\n## Examples\n\nCollection of Prisma example projects 💡\n\n| Demo | Language | Description |\n|:------|:----------:|:-------------|\n| [`flow-script`](https://github.com/prisma/prisma-examples/tree/master/flow-script) | [Flow](https://flow.org/) | Simple usage of Prisma client in script |\n| [`go-cli-app`](https://github.com/prisma/prisma-examples/tree/master/go-cli-app) | [Golang](https://en.wikipedia.org/wiki/Go_(programming_language)) | Simple CLI todo list app |\n| [`go-graphql`](https://github.com/prisma/prisma-examples/tree/master/go-graphql) | [Golang](https://en.wikipedia.org/wiki/Go_(programming_language)) | Simple GraphQL server |\n| [`node-cli-app`](https://github.com/prisma/prisma-examples/tree/master/node-cli-app) | [Node.JS](https://nodejs.org/en/) | Simple CLI todo list app |\n| [`node-graphql-auth`](https://github.com/prisma/prisma-examples/tree/master/node-graphql-auth) |  [Node.JS](https://nodejs.org/en/) | GraphQL server with email-password authentication |\n| [`node-graphql-schema-delegation`](https://github.com/prisma/prisma-examples/tree/master/node-graphql-schema-delegation) | [Node.JS](https://nodejs.org/en/) | [Schema delegation](https://www.prisma.io/docs/prisma-client/api-reference/schema-delegation-typescript-pyl8/) with the Prisma client |\n| [`node-graphql`](https://github.com/prisma/prisma-examples/tree/master/node-graphql) |  [Node.JS](https://nodejs.org/en/) | Simple GraphQL server |\n| [`node-rest-express`](https://github.com/prisma/prisma-examples/tree/master/node-rest-express) | [Node.JS](https://nodejs.org/en/) | Simple REST API with Express.JS |\n| [`node-script`](https://github.com/prisma/prisma-examples/tree/master/node-script) | [Node.JS](https://nodejs.org/en/) | Simple usage of Prisma client in script |\n| [`typescript-cli-app`](https://github.com/prisma/prisma-examples/tree/master/typescript-cli-app) | [TypeScript](https://www.typescriptlang.org/) | Simple CLI todo list app |\n| [`typescript-graphql-auth`](https://github.com/prisma/prisma-examples/tree/master/typescript-graphql-auth) | [TypeScript](https://www.typescriptlang.org/) | GraphQL server with email-password authentication |\n| [`typescript-graphql`](https://github.com/prisma/prisma-examples/tree/master/typescript-graphql) | [TypeScript](https://www.typescriptlang.org/) | Simple GraphQL server |\n| [`typescript-graphql-schema-delegation`](https://github.com/prisma/prisma-examples/tree/master/typescript-graphql-schema-delegation) | [TypeScript](https://www.typescriptlang.org/) | [Schema delegation](https://www.prisma.io/docs/prisma-client/api-reference/schema-delegation-typescript-pyl8/) with the Prisma client |\n| [`typescript-script`](https://github.com/prisma/prisma-examples/tree/master/typescript-script) | [TypeScript](https://www.typescriptlang.org/) | Simple usage of Prisma client in script |\n\nYou can also check the [**AirBnB clone example**](https://github.com/prismagraphql/graphql-server-example) we built as a fully-featured demo app for Prisma.\n\n## Architecture\n\nPrisma takes the role of the **data layer** in your backend architecture, replacing traditional ORMs and custom data access layers. It enables a _layered architecture_ which leads to better _separation of concerns_ and improves _maintainability_ of the entire backend.\n\nThe **Prisma client** is used inside your application server to perform read and write operations against your database through the Prisma API.\n\nPrisma runs as _standalone processes_ which allows for it to be scaled independently from your application server.\n\n<p align=\"center\"><img src=\"https://imgur.com/OyIQQxF.png\" height=\"132\" /></p>\n\n## Database Connectors\n\n[Database connectors](https://github.com/prisma/prisma/issues/1751) provide the link between Prisma and the underlying database.\n\nYou can connect the following databases to Prisma already:\n\n- MySQL\n- PostgreSQL\n- MongoDB ([alpha](https://github.com/prisma/prisma/issues/1643))\n\n### Upcoming Connectors\n\nIf you are interested to participate in the preview for one of the following connectors, please reach out in our [Slack](https://slack.prisma.io).\n\n- [Elastic Search](https://github.com/prisma/prisma/issues/1665)\n- [MS SQL](https://github.com/prisma/prisma/issues/1642)\n- [Oracle](https://github.com/prisma/prisma/issues/1644)\n- [ArangoDB](https://github.com/prisma/prisma/issues/1645)\n- [Neo4j](https://github.com/prisma/prisma/issues/1646)\n- [Druid](https://github.com/prisma/prisma/issues/1647)\n- [Dgraph](https://github.com/prisma/prisma/issues/1648)\n- [DynamoDB](https://github.com/prisma/prisma/issues/1655)\n- [Cloud Firestore](https://github.com/prisma/prisma/issues/1660)\n- [CockroachDB](https://github.com/prisma/prisma/issues/1705)\n- [Cassandra](https://github.com/prisma/prisma/issues/1750)\n- [Redis](https://github.com/prisma/prisma/issues/1722)\n- [AWS Neptune](https://github.com/prisma/prisma/issues/1752)\n- [CosmosDB](https://github.com/prisma/prisma/issues/1663)\n- [Influx](https://github.com/prisma/prisma/issues/1857)\n\nJoin the discussion or contribute to influence which we'll work on next!\n\n## Community\n\nPrisma has a [community](https://www.prisma.io/community) of thousands of amazing developers and contributors. Welcome, please join us! 👋\n\n- [Forum](https://www.prisma.io/forum)\n- [Slack](https://slack.prisma.io/)\n- [Twitter](https://twitter.com/prisma)\n- [Facebook](https://www.facebook.com/prisma.io)\n- [Meetup](https://www.meetup.com/graphql-berlin)\n- [GraphQL Europe](https://www.graphql-europe.org/)\n- [Email](mailto:hello@prisma.io)\n\n## Contributing\n\nContributions are **welcome and extremely helpful** 🙌\nPlease refer [to the contribution guide](https://github.com/prisma/prisma/blob/master/CONTRIBUTING.md) for more information.\n\nReleases are separated into three _channels_: **alpha**, **beta** and **stable**. You can learn more about these three channels and Prisma's release process [here](https://www.prisma.io/blog/improving-prismas-release-process-yaey8deiwaex/).\n\n<p align=\"center\"><a href=\"https://oss.prisma.io\"><img src=\"https://imgur.com/IMU2ERq.png\" alt=\"Prisma\" height=\"170px\"></a></p>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphcool/prisma.git"
  },
  "scripts": {
    "build": "rimraf dist && tsc -d && chmod +x dist/index.js",
    "lint": "tslint src/**/*.ts",
    "package": "./scripts/cp-assets.sh && pkg package.json --targets node10-macos-x64",
    "precommit": "lint-staged",
    "prepublishOnly": "npm run lint && npm run build",
    "prettier": "prettier --single-quote --no-semi --trailing-comma all --write '*.ts' 'src/**/*.ts'"
  },
  "typings": "dist/index.d.ts",
  "version": "1.17.1"
}
