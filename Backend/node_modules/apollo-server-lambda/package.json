{
  "_args": [
    [
      {
        "raw": "apollo-server-lambda@1.3.6",
        "scope": null,
        "escapedName": "apollo-server-lambda",
        "name": "apollo-server-lambda",
        "rawSpec": "1.3.6",
        "spec": "1.3.6",
        "type": "version"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-yoga"
    ]
  ],
  "_from": "apollo-server-lambda@1.3.6",
  "_hasShrinkwrap": false,
  "_id": "apollo-server-lambda@1.3.6",
  "_location": "/apollo-server-lambda",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/apollo-server-lambda_1.3.6_1524594940293_0.39411555946530474"
  },
  "_npmUser": {
    "name": "mdg",
    "email": "npm@meteor.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "apollo-server-lambda@1.3.6",
    "scope": null,
    "escapedName": "apollo-server-lambda",
    "name": "apollo-server-lambda",
    "rawSpec": "1.3.6",
    "spec": "1.3.6",
    "type": "version"
  },
  "_requiredBy": [
    "/graphql-yoga"
  ],
  "_resolved": "https://registry.npmjs.org/apollo-server-lambda/-/apollo-server-lambda-1.3.6.tgz",
  "_shasum": "bdaac37f143c6798e40b8ae75580ba673cea260e",
  "_shrinkwrap": null,
  "_spec": "apollo-server-lambda@1.3.6",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-yoga",
  "author": {
    "name": "Jonas Helfer",
    "email": "jonas@helfer.email"
  },
  "bugs": {
    "url": "https://github.com/apollographql/apollo-server/issues"
  },
  "dependencies": {
    "apollo-server-core": "^1.3.6",
    "apollo-server-module-graphiql": "^1.3.4"
  },
  "description": "Production-ready Node.js GraphQL server for AWS Lambda",
  "devDependencies": {
    "@types/aws-lambda": "8.10.1",
    "@types/graphql": "0.12.7",
    "apollo-server-integration-testsuite": "^1.3.6"
  },
  "directories": {},
  "dist": {
    "shasum": "bdaac37f143c6798e40b8ae75580ba673cea260e",
    "tarball": "https://registry.npmjs.org/apollo-server-lambda/-/apollo-server-lambda-1.3.6.tgz",
    "fileCount": 11,
    "unpackedSize": 21073,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa33j9CRA9TVsSAnZWagAAPCUP/R1bZy6AfV2+nKYnHPWz\n7RBXCNGYCQCL3S0LmNYt7IdPX2UIvj5fnvRdiMKB55TTPRUCUG9wNQqVzMhH\nQWVYkdm1RiMPfgb0MDLMxfFA0AVwpKCau3q6T4jqEZ9C2ENnNG1cuprGvc9M\nPr4qOC1SW2dDjoUd8ClS1476j3m5QKBFDDyyXU7dlCA3FWKcHIXpNfAKs+7T\nR8Q+uFhxtX05i8Hjx4hDfqBOPOoQId/ojCOKQrZntLd9DFWumKxRQzcoVHVv\nml7JO6D4cUfF6F27Jtw5VHLCaghbjAKhQTJICKqGuruU74VYq4BXBeNjla0i\njH+tE/iAyPVl8QqpVMs+nm6DYrCX+3TbpO4q6QgA06Aj/wDLdkm58/4EzjwI\nMCw/6ujioObBGSAk8rFyhFt5zDVu2Hdw0ZISzW3GGNrCx94Ao32L4Fq4ZfYM\n38Esvym7fyvnks6mg2eaiCrzjXfaRjmAZLvQv7E5/FF4NkVvJxsrnYeFhuJC\nESMjiLz/pLKQMmzbXSQS+qm98zeDqiE9UmQ+B9EfjPETgnFxYcyOee2USKbs\nOzjFh8oEe2fk8hAjk9zqCryC+I8de4VAuQPbG3ADTwDIhf+QyDeFBe303vX9\nl0u7YMjJPb6H+gG/ml2kQjfFoS0FIs6K7oSCl2V2v+LToUxY5xR8AP9auOBK\nn8SG\r\n=kd8p\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/apollographql/apollo-server#readme",
  "keywords": [
    "GraphQL",
    "Apollo",
    "Server",
    "Lambda",
    "Javascript"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "abernix",
      "email": "npmjs@jro.cc"
    },
    {
      "name": "freiksenet",
      "email": "freiksenet@gmail.com"
    },
    {
      "name": "jbaxleyiii",
      "email": "james@meteor.com"
    },
    {
      "name": "martijnwalraven",
      "email": "martijn@martijnwalraven.com"
    },
    {
      "name": "mdg",
      "email": "npm@meteor.com"
    },
    {
      "name": "sashko",
      "email": "s.stubailo@gmail.com"
    }
  ],
  "name": "apollo-server-lambda",
  "optionalDependencies": {},
  "readme": "---\ntitle: Lambda\ndescription: Setting up Apollo Server with Lambda\n---\n\n[![npm version](https://badge.fury.io/js/apollo-server-core.svg)](https://badge.fury.io/js/apollo-server-core) [![Build Status](https://circleci.com/gh/apollographql/apollo-cache-control-js.svg?style=svg)](https://circleci.com/gh/apollographql/apollo-cache-control-js) [![Coverage Status](https://coveralls.io/repos/github/apollographql/apollo-server/badge.svg?branch=master)](https://coveralls.io/github/apollographql/apollo-server?branch=master) [![Get on Slack](https://img.shields.io/badge/slack-join-orange.svg)](https://www.apollographql.com/#slack)\n\nThis is the AWS Lambda integration for the Apollo community GraphQL Server. [Read the docs.](https://www.apollographql.com/docs/apollo-server/) [Read the CHANGELOG.](https://github.com/apollographql/apollo-server/blob/master/CHANGELOG.md)\n\n```sh\nnpm install apollo-server-lambda\n```\n\n<h2 id=\"deploying\" title=\"Deploying with SAM\">Deploying with AWS Serverless Application Model (SAM)</h2>\n\nTo deploy the AWS Lambda function we must create a Cloudformation Template and a S3 bucket to store the artifact (zip of source code) and template. We will use the [AWS Command Line Interface](https://aws.amazon.com/cli/).\n\n#### 1. Write the API handlers\n\n```js\n// graphql.js\nvar server = require('apollo-server-lambda'),\n  myGraphQLSchema = require('./schema');\n\nexports.graphqlHandler = server.graphqlLambda({ schema: myGraphQLSchema });\nexports.graphiqlHandler = server.graphiqlLambda({\n  endpointURL: '/Prod/graphql',\n});\n```\n\n#### 2. Create an S3 bucket\n\nThe bucket name name must be universally unique.\n\n```bash\naws s3 mb s3://<bucket name>\n```\n\n#### 3. Create the Template\n\nThis will look for a file called graphql.js with two exports: `graphqlHandler` and `graphiqlHandler`. It creates two API endpoints:\n\n* `/graphql` (GET and POST)\n* `/graphiql` (GET)\n\nIn a file called `template.yaml`:\n\n```yaml\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nResources:\n  GraphQL:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: graphql.graphqlHandler\n      Runtime: nodejs6.10\n      Events:\n        GetRequest:\n          Type: Api\n          Properties:\n            Path: /graphql\n            Method: get\n        PostRequest:\n          Type: Api\n          Properties:\n            Path: /graphql\n            Method: post\n  GraphQLInspector:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: graphql.graphiqlHandler\n      Runtime: nodejs6.10\n      Events:\n        GetRequest:\n          Type: Api\n          Properties:\n            Path: /graphiql\n            Method: get\n```\n\n#### 4. Package source code and dependencies\n\nThis will read and transform the template, created in previous step. Package and upload the artifact to the S3 bucket and generate another template for the deployment.\n\n```sh\naws cloudformation package \\\n   --template-file template.yaml \\\n   --output-template-file serverless-output.yaml \\\n   --s3-bucket <bucket-name>\n```\n\n#### 5. Deploy the API\n\nThe will create the Lambda Function and API Gateway for GraphQL. We use the stack-name `prod` to mean production but any stack name can be used.\n\n```\naws cloudformation deploy \\\n   --template-file serverless-output.yaml \\\n   --stack-name prod \\\n   --capabilities CAPABILITY_IAM\n```\n\n<h2 id=\"request-info\" title=\"Getting request info\">Getting request info</h2>\n\nTo read information about the current request from the API Gateway event (HTTP headers, HTTP method, body, path, ...) or the current Lambda Context (Function Name, Function Version, awsRequestId, time remaning, ...) use the options function. This way they can be passed to your schema resolvers using the context option.\n\n```js\nvar server = require('apollo-server-lambda'),\n  myGraphQLSchema = require('./schema');\n\nexports.graphqlHandler = server.graphqlLambda((event, context) => {\n  const headers = event.headers,\n    functionName = context.functionName;\n\n  return {\n    schema: myGraphQLSchema,\n    context: {\n      headers,\n      functionName,\n      event,\n      context,\n    },\n  };\n});\n```\n\n<h2 id=\"modifying-response\" title=\"Modifying the response\">Modifying the Lambda Response (Enable CORS)</h2>\n\nTo enable CORS the response HTTP headers need to be modified. To accomplish this pass in a callback filter to the generated handler of graphqlLambda.\n\n```js\nvar server = require('apollo-server-lambda'),\n  myGraphQLSchema = require('./schema');\n\nexports.graphqlHandler = function(event, context, callback) {\n  const callbackFilter = function(error, output) {\n    output.headers['Access-Control-Allow-Origin'] = '*';\n    callback(error, output);\n  };\n  const handler = server.graphqlLambda({ schema: myGraphQLSchema });\n\n  return handler(event, context, callbackFilter);\n};\n```\n\nTo enable CORS response for requests with credentials (cookies, http authentication) the allow origin header must equal the request origin and the allow credential header must be set to true.\n\n```js\nconst CORS_ORIGIN = 'https://example.com';\n\nvar server = require('apollo-server-lambda'),\n  myGraphQLSchema = require('./schema');\n\nexports.graphqlHandler = function(event, context, callback) {\n  const requestOrigin = event.headers.origin,\n    callbackFilter = function(error, output) {\n      if (requestOrigin === CORS_ORIGIN) {\n        output.headers['Access-Control-Allow-Origin'] = CORS_ORIGIN;\n        output.headers['Access-Control-Allow-Credentials'] = 'true';\n      }\n      callback(error, output);\n    };\n  const handler = server.graphqlLambda({ schema: myGraphQLSchema });\n\n  return handler(event, context, callbackFilter);\n};\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/apollographql/apollo-server/tree/master/packages/apollo-server-lambda"
  },
  "scripts": {
    "compile": "tsc",
    "prepublish": "npm run compile"
  },
  "typescript": {
    "definition": "dist/index.d.ts"
  },
  "typings": "dist/index.d.ts",
  "version": "1.3.6"
}
