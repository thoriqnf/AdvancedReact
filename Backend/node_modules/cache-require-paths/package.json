{
  "_args": [
    [
      {
        "raw": "cache-require-paths@^0.3.0",
        "scope": null,
        "escapedName": "cache-require-paths",
        "name": "cache-require-paths",
        "rawSpec": "^0.3.0",
        "spec": ">=0.3.0 <0.4.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/prisma-generate-schema/node_modules/prisma-cli-engine"
    ]
  ],
  "_from": "cache-require-paths@>=0.3.0 <0.4.0",
  "_id": "cache-require-paths@0.3.0",
  "_inCache": true,
  "_location": "/cache-require-paths",
  "_nodeVersion": "4.5.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/cache-require-paths-0.3.0.tgz_1471984707615_0.0527331733610481"
  },
  "_npmUser": {
    "name": "bahmutov",
    "email": "gleb.bahmutov@gmail.com"
  },
  "_npmVersion": "2.15.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cache-require-paths@^0.3.0",
    "scope": null,
    "escapedName": "cache-require-paths",
    "name": "cache-require-paths",
    "rawSpec": "^0.3.0",
    "spec": ">=0.3.0 <0.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/prisma-cli-engine",
    "/prisma-generate-schema/prisma-cli-engine"
  ],
  "_resolved": "https://registry.npmjs.org/cache-require-paths/-/cache-require-paths-0.3.0.tgz",
  "_shasum": "12a6075a3e4988da4c22f218e29485663e4c4a63",
  "_shrinkwrap": null,
  "_spec": "cache-require-paths@^0.3.0",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/prisma-generate-schema/node_modules/prisma-cli-engine",
  "author": {
    "name": "Gleb Bahmutov",
    "email": "gleb.bahmutov@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/bahmutov/cache-require-paths/issues"
  },
  "dependencies": {},
  "description": "Caches resolved paths in module require to avoid Node hunting for right module. Speeds up app load.",
  "devDependencies": {
    "pre-git": "0.2.1",
    "semantic-release": "^4.3.5"
  },
  "directories": {},
  "dist": {
    "shasum": "12a6075a3e4988da4c22f218e29485663e4c4a63",
    "tarball": "https://registry.npmjs.org/cache-require-paths/-/cache-require-paths-0.3.0.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "6a6e7b55ad9616fe6b99d666974d1e127ef21226",
  "homepage": "https://github.com/bahmutov/cache-require-paths",
  "keywords": [
    "npm",
    "node",
    "application",
    "load",
    "startup",
    "performance",
    "speed",
    "cache",
    "resolution"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bahmutov",
      "email": "gleb.bahmutov@gmail.com"
    }
  ],
  "name": "cache-require-paths",
  "optionalDependencies": {},
  "pre-commit": [
    "npm test",
    "npm version"
  ],
  "readme": "# cache-require-paths\n\n> Caches resolved paths in module require to avoid Node hunting for right module. Speeds up app load.\n\n[![NPM][cache-require-paths-icon] ][cache-require-paths-url]\n\n[![Build status][cache-require-paths-ci-image] ][cache-require-paths-ci-url]\n[![semantic-release][semantic-image] ][semantic-url]\n\n[cache-require-paths-icon]: https://nodei.co/npm/cache-require-paths.png?downloads=true\n[cache-require-paths-url]: https://npmjs.org/package/cache-require-paths\n[cache-require-paths-ci-image]: https://travis-ci.org/bahmutov/cache-require-paths.png?branch=master\n[cache-require-paths-ci-url]: https://travis-ci.org/bahmutov/cache-require-paths\n[semantic-image]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\n[semantic-url]: https://github.com/semantic-release/semantic-release\n\nThis is a partial solution to Node \"hunting\" for right file to load when you require a 3rd party\ndependency. See [Nodeâ€™s `require` is dog slow](https://kev.inburke.com/kevin/node-require-is-dog-slow/) \nand [Faster Node app require](http://glebbahmutov.com/blog/faster-node-app-require/) for details.\n\n## Use\n\n    npm install --save cache-require-paths\n\nLoad the module first in your application file\n\n```js\n// index.js\nrequire('cache-require-paths');\n...\n```\n\nThe first time the app loads, a cache of resolved file paths will be saved to `.cache-require-paths.json`\nin the current directory.  Every application startup after that will reuse this filename cache to avoid\n\"hunting\" for the right filename.\n\nTo save cached paths to a different file, set the environmental variable `CACHE_REQUIRE_PATHS_FILE`.\n\n## Results\n\nHere are results for loading common packages without and with caching resolved require paths.\nYou can run any of this experiments inside the `test` folder. `node index.js` loads\nusing the standard resolve. `node index.js --cache` uses a cache of the resolves paths.\n\nUsing node 0.10.37\n\n    require('X')    |  standard (ms)  |  with cache (ms)  |  speedup (%)\n    ------------------------------------------------------------------\n    express@4.12.3  |        72       |       46          |     36\n    karma@0.12.31   |       230       |      170          |     26\n    grunt@0.4.5     |       120       |       95          |     20\n    sails@0.11.0    |       170       |      120          |     29\n\nUsing node 0.12.2 - all startup times became slower.\n\n    require('X')    |  standard (ms)  |  with cache (ms)  |  speedup (%)\n    ------------------------------------------------------------------\n    express@4.12.3  |        90       |       55          |     38\n    karma@0.12.31   |       250       |      200          |     20\n    grunt@0.4.5     |       150       |      120          |     20\n    sails@0.11.0    |       200       |      145          |     27\n\n## TODO\n\n- [ ] Cache only the absolute paths (relative paths resolve quickly)\n- [ ] Invalidate cache if dependencies in the package.json change\n\n## Discussion\n\nYou can see Node on Mac OS X searchig for a file to load when loading an absolute path\nlike `require(express)` by using the following command to make a log of all system level\ncalls from Node (start this from another terminal before running node program)\n\n    sudo dtruss -d -n 'node' > /tmp/require.log 2>&1\n\nThen run the test program, for example in the `test` folder run\n\n    $ node index.js\n\nKill the `dtruss` process and open the generated `/tmp/require.log`. It shows every system call\nwith the following 4 columns: process id (should be single node process), relative time (microseconds),\nsystem call with arguments, and after the equality sign the numerical result of the call.\n\nWhen loading `express` dependency from the test program using `require('express');` we see\nthe following search (I abbreviated paths for clarity):\n\n    # microseconds call\n    664730 stat64(\".../test/node_modules/express\\0\", 0x7FFF5FBFECF8, 0x204)        = 0 0\n    664784 stat64(\".../test/node_modules/express.js\\0\", 0x7FFF5FBFED28, 0x204)         = -1 Err#2\n    664834 stat64(\".../test/node_modules/express.json\\0\", 0x7FFF5FBFED28, 0x204)       = -1 Err#2\n    664859 stat64(\".../test/node_modules/express.node\\0\", 0x7FFF5FBFED28, 0x204)       = -1 Err#2\n    664969 open(\".../test/node_modules/express/package.json\\0\", 0x0, 0x1B6)        = 11 0\n    664976 fstat64(0xB, 0x7FFF5FBFEC38, 0x1B6)         = 0 0\n    665022 read(0xB, \"{\\n  \\\"name\\\": \\\"express\\\", ...}\", 0x103D)        = 4157 0\n    665030 close(0xB)      = 0 0\n\nBy default, Node checks if the local `node_modules/express` folder exists first (first `stat64` call),\nThen it tries to check the status of the `node_modules/express.js` file and fails. \nThen `node_modules/express.json` file. Then `node_modules/express.node` file. Finally it opens\nthe `node_modules/express/package.json` file and reads the contents. \n\nNote that this is not the end of the story. Node loader only loads `express/package.json` to fetch\n`main` filename or use the default `index.js`! Each wasted file system call takes only 100 microseconds,\nbut the tiny delays add up to hundreds of milliseconds and finally seconds for larger frameworks.\n\nProfile the same program with `--cache` option added to the command line arguments\n\n    $ node index.js --cache\n\nThis option loads the `cache-require-paths` module as the first require of the application\n\n```js\nvar useCache = process.argv.some(function (str) {\n  return str === '--cache';\n});\nif (useCache) {\n  console.log('using filename cache');\n  require('cache-require-paths');\n}\n```\n\nThe trace now shows *no calls to find `express` package*, just straight load of the `express/index.js` file.\n\n    643466 stat64(\".../node_modules/express/index.js\\0\", 0x7FFF5FBFED28, 0x3)         = 0 0\n    643501 lstat64(\".../node_modules\\0\", 0x7FFF5FBFED08, 0x3)         = 0 0\n    643513 lstat64(\".../node_modules/express\\0\", 0x7FFF5FBFED08, 0x3)         = 0 0\n    643523 lstat64(\".../node_modules/express/index.js\\0\", 0x7FFF5FBFED08, 0x3)        = 0 0\n    643598 open(\".../node_modules/express/index.js\\0\", 0x0, 0x1B6)        = 12 0\n    643600 fstat64(0xC, 0x7FFF5FBFED58, 0x1B6)         = 0 0\n\nMission achieved. Note that the speedup only happens after the first application run finishes successfully.\nThe resolution cache needs to be saved to a local file, and this happens only on process exit.\n\n## Small print\n\nAuthor: Gleb Bahmutov &copy; 2015\n\n* [@bahmutov](https://twitter.com/bahmutov)\n* [glebbahmutov.com](http://glebbahmutov.com)\n* [blog](http://glebbahmutov.com/blog)\n\nLicense: MIT - do anything with the code, but don't blame me if it does not work.\n\nSpread the word: tweet, star on github, etc.\n\nSupport: if you find any problems with this module, email / tweet /\n[open issue](https://github.com/bahmutov/cache-require-paths/issues) on Github\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bahmutov/cache-require-paths.git"
  },
  "scripts": {
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "size": "t=\"$(npm pack .)\"; wc -c \"${t}\"; tar tvf \"${t}\"; rm \"${t}\";",
    "test": "cd test; npm install; node index; node index --cache; node index --cache"
  },
  "version": "0.3.0"
}
