{
  "_args": [
    [
      {
        "raw": "graphql-subscriptions@^0.5.8",
        "scope": null,
        "escapedName": "graphql-subscriptions",
        "name": "graphql-subscriptions",
        "rawSpec": "^0.5.8",
        "spec": ">=0.5.8 <0.6.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-yoga"
    ]
  ],
  "_from": "graphql-subscriptions@^0.5.8",
  "_hasShrinkwrap": false,
  "_id": "graphql-subscriptions@0.5.8",
  "_location": "/graphql-subscriptions",
  "_nodeVersion": "8.9.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-subscriptions_0.5.8_1519303399171_0.7169903077768127"
  },
  "_npmUser": {
    "name": "danielr",
    "email": "danielr@neophi.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-subscriptions@^0.5.8",
    "scope": null,
    "escapedName": "graphql-subscriptions",
    "name": "graphql-subscriptions",
    "rawSpec": "^0.5.8",
    "spec": ">=0.5.8 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/graphql-yoga"
  ],
  "_resolved": "http://registry.npmjs.org/graphql-subscriptions/-/graphql-subscriptions-0.5.8.tgz",
  "_shasum": "13a6143c546bce390404657dc73ca501def30aa7",
  "_shrinkwrap": null,
  "_spec": "graphql-subscriptions@^0.5.8",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend/node_modules/graphql-yoga",
  "bugs": {
    "url": "https://github.com/apollostack/graphql-subscriptions/issues"
  },
  "contributors": [
    {
      "name": "Authors"
    },
    {
      "name": "Jonas Helfer",
      "email": "helfer@users.noreply.github.com"
    },
    {
      "name": "Jonas Helfer",
      "email": "jonas@helfer.email"
    },
    {
      "name": "Quint Stoffers",
      "email": "quintstoffers@users.noreply.github.com"
    },
    {
      "name": "Sashko Stubailo",
      "email": "s.stubailo@gmail.com"
    },
    {
      "name": "Sashko Stubailo",
      "email": "sashko@stubailo.com"
    },
    {
      "name": "David Yahalomi",
      "email": "davidyaha@users.noreply.github.com"
    },
    {
      "name": "Alexander Anich",
      "email": "Anichale@users.noreply.github.com"
    },
    {
      "name": "Francois Valdy",
      "email": "gluck@users.noreply.github.com"
    },
    {
      "name": "Daniel Rinehart",
      "email": "NeoPhi@users.noreply.github.com"
    }
  ],
  "dependencies": {
    "iterall": "^1.2.1"
  },
  "description": "GraphQL subscriptions for node.js",
  "devDependencies": {
    "@types/graphql": "^0.11.3",
    "@types/mocha": "^2.2.39",
    "@types/node": "^8.0.28",
    "chai": "^4.1.2",
    "chai-as-promised": "^7.1.1",
    "graphql": "^0.13.0",
    "istanbul": "^1.0.0-alpha.2",
    "mocha": "^3.3.0",
    "remap-istanbul": "^0.9.1",
    "rimraf": "^2.6.2",
    "sinon": "^3.2.1",
    "sinon-chai": "^2.9.0",
    "tslint": "^5.2.0",
    "typescript": "^2.3.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-0CaZnXKBw2pwnIbvmVckby5Ge5e2ecmjofhYCdyeACbCly2j3WXDP/pl+s+Dqd2GQFC7y99NB+53jrt55CKxYQ==",
    "shasum": "13a6143c546bce390404657dc73ca501def30aa7",
    "tarball": "http://registry.npmjs.org/graphql-subscriptions/-/graphql-subscriptions-0.5.8.tgz",
    "fileCount": 23,
    "unpackedSize": 40212
  },
  "gitHead": "534cab18add854e73179b7d84b40c0aec8ad7a0b",
  "homepage": "https://github.com/apollostack/graphql-subscriptions#readme",
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "danielr",
      "email": "danielr@neophi.com"
    },
    {
      "name": "freiksenet",
      "email": "freiksenet@gmail.com"
    },
    {
      "name": "helfer",
      "email": "jonas@helfer.email"
    },
    {
      "name": "mdg",
      "email": "npm@meteor.com"
    },
    {
      "name": "sashko",
      "email": "s.stubailo@gmail.com"
    },
    {
      "name": "urigo",
      "email": "uri.goldshtein@gmail.com"
    }
  ],
  "name": "graphql-subscriptions",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": "^0.10.5 || ^0.11.3 || ^0.12.0 || ^0.13.0"
  },
  "readme": "[![npm version](https://badge.fury.io/js/graphql-subscriptions.svg)](https://badge.fury.io/js/graphql-subscriptions) [![GitHub license](https://img.shields.io/github/license/apollostack/graphql-subscriptions.svg)](https://github.com/apollostack/graphql-subscriptions/blob/license/LICENSE)\n\n# graphql-subscriptions\n\nGraphQL subscriptions is a simple npm package that lets you wire up GraphQL with a pubsub system (like Redis) to implement subscriptions in GraphQL.\n\nYou can use it with any GraphQL client and server (not only Apollo).\n\n### Installation\n\n`npm install graphql-subscriptions graphql` or `yarn add graphql-subscriptions graphql`\n\n> This package should be used with a network transport, for example [subscriptions-transport-ws](https://github.com/apollographql/subscriptions-transport-ws).\n\n### TypeScript\n\nIf you are developing a project that uses this module with TypeScript:\n\n* ensure that your `tsconfig.json` `lib` definition includes `\"esnext.asynciterable\"`\n* `npm install @types/graphql` or `yarn add @types/graphql`\n\n### Getting started with your first subscription\n\nTo begin with GraphQL subscriptions, start by defining a GraphQL `Subscription` type in your schema:\n\n```graphql\ntype Subscription {\n    somethingChanged: Result\n}\n\ntype Result {\n    id: String\n}\n```\n\nNext, add the `Subscription` type to your `schema` definition:\n\n```graphql\nschema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n```\n\nNow, let's create a simple `PubSub` instance - it is a simple pubsub implementation, based on `EventEmitter`. Alternative `EventEmitter` implementations can be passed by an options object\nto the `PubSub` constructor.\n\n```js\nimport { PubSub } from 'graphql-subscriptions';\n\nexport const pubsub = new PubSub();\n```\n\nNow, implement your Subscriptions type resolver, using the `pubsub.asyncIterator` to map the event you need:\n\n```js\nconst SOMETHING_CHANGED_TOPIC = 'something_changed';\n\nexport const resolvers = {\n  Subscription: {\n    somethingChanged: {\n      subscribe: () => pubsub.asyncIterator(SOMETHING_CHANGED_TOPIC),\n    },\n  },\n}\n```\n\n> Subscriptions resolvers are not a function, but an object with `subscribe` method, than returns `AsyncIterable`.\n\nNow, GraphQL engine knows that `somethingChanged` is a subscription, and every time we will use `pubsub.publish` over this topic - is will publish it using the transport we use:\n\n```js\npubsub.publish(SOMETHING_CHANGED_TOPIC, { somethingChanged: { id: \"123\" }});\n```\n\n> Note that the default PubSub implementation is intended for demo purposes. It only works if you have a single instance of your server and doesn't scale beyond a couple of connections.\n> For production usage you'll want to use one of the [PubSub implementations](#pubsub-implementations) backed by an external store. (e.g. Redis)\n\n### Filters\n\nWhen publishing data to subscribers, we need to make sure that each subscribers get only the data it need.\n\nTo do so, we can use `withFilter` helper from this package, which wraps `AsyncIterator` with a filter function, and let you control each publication for each user.\n\n`withFilter` API:\n- `asyncIteratorFn: (rootValue, args, context, info) => AsyncIterator<any>` : A function that returns `AsyncIterator` you got from your `pubsub.asyncIterator`.\n- `filterFn: (payload, variables, context, info) => boolean | Promise<boolean>` - A filter function, executed with the payload (the published value), variables, context and operation info, must return `boolean` or `Promise<boolean>` indicating if the payload should pass to the subscriber.\n\nFor example, if `somethingChanged` would also accept a variable with the ID that is relevant, we can use the following code to filter according to it:\n\n```js\nimport { withFilter } from 'graphql-subscriptions';\n\nconst SOMETHING_CHANGED_TOPIC = 'something_changed';\n\nexport const resolvers = {\n  Subscription: {\n    somethingChanged: {\n      subscribe: withFilter(() => pubsub.asyncIterator(SOMETHING_CHANGED_TOPIC), (payload, variables) => {\n        return payload.somethingChanged.id === variables.relevantId;\n      }),\n    },\n  },\n}\n```\n\n> Note that when using `withFilter`, you don't need to wrap your return value with a function.\n\n### Channels Mapping\n\nYou can map multiple channels into the same subscription, for example when there are multiple events that trigger the same subscription in the GraphQL engine.\n\n```js\nconst SOMETHING_UPDATED = 'something_updated';\nconst SOMETHING_CREATED = 'something_created';\nconst SOMETHING_REMOVED = 'something_removed';\n\nexport const resolvers = {\n  Subscription: {\n    somethingChanged: {\n      subscribe: () => pubsub.asyncIterator([ SOMETHING_UPDATED, SOMETHING_CREATED, SOMETHING_REMOVED ]),\n    },\n  },\n}\n````\n\n### Payload Manipulation\n\nYou can also manipulate the published payload, by adding `resolve` methods to your subscription:\n\n```js\nconst SOMETHING_UPDATED = 'something_updated';\n\nexport const resolvers = {\n  Subscription: {\n    somethingChanged: {\n      resolve: (payload, args, context, info) => {\n        // Manipulate and return the new value\n\n        return payload;\n      },\n      subscribe: () => pubsub.asyncIterator(SOMETHING_UPDATED),\n    },\n  },\n}\n````\n\n### Custom `AsyncIterator` Wrappers\n\nThe value you should return from your `subscribe` resolver must be an `AsyncIterator`.\n\nYou can use this value and wrap it with another `AsyncIterator` to implement custom logic over your subscriptions.\n\nFor example, the following implementation manipulate the payload by adding some static fields:\n\n```typescript\nimport { $$asyncIterator } from 'iterall';\n\nexport const withStaticFields = (asyncIterator: AsyncIterator<any>, staticFields: Object): Function => {\n  return (rootValue: any, args: any, context: any, info: any): AsyncIterator<any> => {\n\n    return {\n      next() {\n        return asyncIterator.next().then(({ value, done }) => {\n          return {\n            value: {\n              ...value,\n              ...staticFields,\n            },\n            done,\n          };\n        });\n      },\n      return() {\n        return Promise.resolve({ value: undefined, done: true });\n      },\n      throw(error) {\n        return Promise.reject(error);\n      },\n      [$$asyncIterator]() {\n        return this;\n      },\n    };\n  };\n};\n```\n\n> You can also take a look at `withFilter` for inspiration.\n\nFor more information about `AsyncIterator`:\n- [TC39 Proposal](https://github.com/tc39/proposal-async-iteration)\n- [iterall](https://github.com/leebyron/iterall)\n- [IxJS](https://github.com/ReactiveX/IxJS)\n\n### PubSub Implementations\n\nIt can be easily replaced with some other implementations of [PubSubEngine interface](https://github.com/apollographql/graphql-subscriptions/blob/master/src/pubsub.ts#L21-L25). There are a couple of them out there:\n- Use Redis with https://github.com/davidyaha/graphql-redis-subscriptions\n- Use MQTT enabled broker with https://github.com/davidyaha/graphql-mqtt-subscriptions\n- Use RabbitMQ with https://github.com/cdmbase/graphql-rabbitmq-subscriptions\n- Use Kafka with https://github.com/ancashoria/graphql-kafka-subscriptions\n- [Add your implementation...](https://github.com/apollographql/graphql-subscriptions/pull/new/master)\n\nYou can also implement a `PubSub` of your own, by using the exported interface `PubSubEngine` from this package.\n\n#### SubscriptionManager **@deprecated**\n\n`SubscriptionManager` is the previous alternative for using `graphql-js` subscriptions directly, and it's now deprecated.\n\nIf you are looking for it's API docs, refer to [a previous commit of the repository](https://github.com/apollographql/graphql-subscriptions/blob/5eaee92cd50060b3f3637f00c53960f51a07d0b2/README.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollostack/graphql-subscriptions.git"
  },
  "scripts": {
    "clean": "rimraf dist coverage",
    "compile": "tsc",
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover _mocha -- --full-trace ./dist/test/tests.js",
    "lint": "tslint --type-check --project ./tsconfig.json ./src/**/*.ts",
    "postcoverage": "remap-istanbul --input coverage/coverage.raw.json --type lcovonly --output coverage/lcov.info",
    "posttest": "npm run lint",
    "prepublishOnly": "npm run clean && npm run compile",
    "pretest": "npm run compile",
    "test": "npm run testonly --",
    "testonly": "mocha --reporter spec --full-trace ./dist/test/tests.js ./dist/test/asyncIteratorSubscription.js ",
    "watch": "tsc -w"
  },
  "typescript": {
    "definition": "dist/index.d.ts"
  },
  "typings": "dist/index.d.ts",
  "version": "0.5.8"
}
