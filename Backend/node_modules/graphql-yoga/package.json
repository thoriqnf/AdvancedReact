{
  "_args": [
    [
      {
        "raw": "graphql-yoga@1.16.2",
        "scope": null,
        "escapedName": "graphql-yoga",
        "name": "graphql-yoga",
        "rawSpec": "1.16.2",
        "spec": "1.16.2",
        "type": "version"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend"
    ]
  ],
  "_from": "graphql-yoga@1.16.2",
  "_id": "graphql-yoga@1.16.2",
  "_inCache": true,
  "_location": "/graphql-yoga",
  "_nodeVersion": "8.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-yoga_1.16.2_1535454871628_0.8033371675216898"
  },
  "_npmUser": {
    "name": "timsuchanek",
    "email": "tim.suchanek@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "graphql-request": "1.8.2",
    "js-yaml": "3.12.0",
    "lodash": "4.17.11",
    "minimatch": "3.0.4"
  },
  "_requested": {
    "raw": "graphql-yoga@1.16.2",
    "scope": null,
    "escapedName": "graphql-yoga",
    "name": "graphql-yoga",
    "rawSpec": "1.16.2",
    "spec": "1.16.2",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-yoga/-/graphql-yoga-1.16.2.tgz",
  "_shasum": "083293a9cecab6283e883c5a482c5c920fa66585",
  "_shrinkwrap": null,
  "_spec": "graphql-yoga@1.16.2",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Backend",
  "author": {
    "name": "Johannes Schickling",
    "email": "johannes@graph.cool"
  },
  "ava": {
    "files": [
      "dist/**/*.test.js"
    ]
  },
  "bugs": {
    "url": "https://github.com/graphcool/graphql-yoga/issues"
  },
  "dependencies": {
    "@types/cors": "^2.8.4",
    "@types/express": "^4.11.1",
    "@types/graphql": "^0.13.0",
    "@types/graphql-deduplicator": "^2.0.0",
    "@types/zen-observable": "^0.5.3",
    "apollo-server-express": "^1.3.6",
    "apollo-server-lambda": "1.3.6",
    "apollo-upload-server": "^5.0.0",
    "aws-lambda": "^0.1.2",
    "body-parser-graphql": "1.1.0",
    "cors": "^2.8.4",
    "express": "^4.16.3",
    "graphql": "^0.11.0 || ^0.12.0 || ^0.13.0",
    "graphql-deduplicator": "^2.0.1",
    "graphql-import": "^0.6.0",
    "graphql-middleware": "1.6.6",
    "graphql-playground-middleware-express": "1.7.2",
    "graphql-playground-middleware-lambda": "1.6.1",
    "graphql-subscriptions": "^0.5.8",
    "graphql-tools": "^3.0.0",
    "subscriptions-transport-ws": "^0.9.8"
  },
  "description": "<p align=\"center\"><img src=\"https://imgur.com/Sv6j0B6.png\" width=\"100\" /></p>",
  "devDependencies": {
    "@types/aws-lambda": "8.10.3",
    "@types/request-promise-native": "1.0.14",
    "ava": "0.25.0",
    "npm-run-all": "4.1.3",
    "prettier": "1.12.1",
    "prettier-check": "2.0.0",
    "request": "2.85.0",
    "request-promise-native": "1.0.5",
    "tslint": "5.9.1",
    "tslint-config-prettier": "1.12.0",
    "tslint-config-standard": "7.0.0",
    "typescript": "2.8.3",
    "yarn": "1.6.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-dV7uEUm/tzl3K/gkHPBt718N+F0gmhZKsg8HJpj35SEniGyXVI3VjDWd7Na3bWdue4p8Sxb+/JguuK8jpe8dWg==",
    "shasum": "083293a9cecab6283e883c5a482c5c920fa66585",
    "tarball": "https://registry.npmjs.org/graphql-yoga/-/graphql-yoga-1.16.2.tgz",
    "fileCount": 18,
    "unpackedSize": 101264,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbhS6YCRA9TVsSAnZWagAAScgQAI8urrzkN5VQ0hHVwiI0\nKdvAHLx8if5Hut9szVepmbnLWmiYojBmknoGQYlxKyf+pjoDNtRtvXRlyzlc\nsmXO7T58X/uZ7rI7coAeyeU5XabK63beA+4rasomIXv90N93syYVOXx/VwHi\npI+1yziAQZmZxxlNC5GgvJdln1nhJIUi4oyavlxHzeUCO0j9j94QWIQmjBd6\n6yu87HKI4Qb2W0SdoVSToLoPm3BzCSe5Fgpr30bVYbUlJkxs+xpXR4J5nyih\nHf1x8wvQM7uEHdJN2PkpzVaRhmMWPWK2QvUE+EP7gkjj9ww+2UgstMEDdPEm\ntqd7Vk3FHdq7SSTiVxKE5Q7I0PYknjUc8LH98/hmFrneFY2ok/U8TYxJHK52\nPS2Z/KPskhiBrOe2QKnAYsVPy0IhBYvZXqyk60V/OHOmO1Y6wj3f6++N2qcm\nQ/50HNk9bYU0JbgM2e0ksuZPpEdti7FPODqMlv1MDoDMpzokjVUgONOu1M2h\noq0ryZB0AfonukLsMyELG5x/uu9vovoT+RKyTiXJgehbvKdx6F3dUmEe0tc9\nbXvP9KDcQV1g65dbIE4I8PRtkBdLBC4WlBDT4mBdaVcHYlB1XQFYKuLYWg+K\nxQa91tmnm5Gy1qksBtX/kMSrG71xm/C/23DzepPKGUh3loEGmKnUaTt1yJa8\n2xng\r\n=VQhd\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist"
  ],
  "gitHead": "3362b13374190fd2390594495dc08064e5ee4815",
  "homepage": "https://github.com/graphcool/graphql-yoga",
  "keywords": [
    "graphql",
    "server",
    "api",
    "graphql-server",
    "apollo"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "schickling",
      "email": "schickling.j@gmail.com"
    },
    {
      "name": "timsuchanek",
      "email": "tim.suchanek@gmail.com"
    }
  ],
  "name": "graphql-yoga",
  "optionalDependencies": {},
  "readme": "<p align=\"center\"><img src=\"https://imgur.com/Sv6j0B6.png\" width=\"100\" /></p>\n\n# graphql-yoga\n\n[![CircleCI](https://circleci.com/gh/prismagraphql/graphql-yoga.svg?style=shield)](https://circleci.com/gh/prismagraphql/graphql-yoga) [![npm version](https://badge.fury.io/js/graphql-yoga.svg)](https://badge.fury.io/js/graphql-yoga)\n\nFully-featured GraphQL Server with focus on easy setup, performance & great developer experience\n\n## Overview\n\n* **Easiest way to run a GraphQL server:** Sensible defaults & includes everything you need with minimal setup.\n* **Includes Subscriptions:** Built-in support for GraphQL subscriptions using WebSockets.\n* **Compatible:** Works with all GraphQL clients (Apollo, Relay...) and fits seamless in your GraphQL workflow.\n\n`graphql-yoga` is based on the following libraries & tools:\n\n* [`express`](https://github.com/expressjs/express)/[`apollo-server`](https://github.com/apollographql/apollo-server): Performant, extensible web server framework\n* [`graphql-subscriptions`](https://github.com/apollographql/graphql-subscriptions)/[`subscriptions-transport-ws`](https://github.com/apollographql/subscriptions-transport-ws): GraphQL subscriptions server\n* [`graphql.js`](https://github.com/graphql/graphql-js)/[`graphql-tools`](https://github.com/apollographql/graphql-tools): GraphQL engine & schema helpers\n* [`graphql-playground`](https://github.com/graphcool/graphql-playground): Interactive GraphQL IDE\n\n## Features\n\n* GraphQL spec-compliant\n* File upload\n* GraphQL Subscriptions\n* TypeScript typings\n* GraphQL Playground\n* Extensible via Express middlewares\n* Schema directives\n* Apollo Tracing\n* Accepts both `application/json` and `application/graphql` content-types\n* Runs everywhere: Can be deployed via `now`, `up`, AWS Lambda, Heroku etc.\n* Supports middleware out of the box.\n\n## Install\n\n```sh\nyarn add graphql-yoga\n```\n\n## Usage\n\n### Quickstart ([Hosted demo](https://demo-graphql-yoga.glitch.me))\n\n```ts\nimport { GraphQLServer } from 'graphql-yoga'\n// ... or using `require()`\n// const { GraphQLServer } = require('graphql-yoga')\n\nconst typeDefs = `\n  type Query {\n    hello(name: String): String!\n  }\n`\n\nconst resolvers = {\n  Query: {\n    hello: (_, { name }) => `Hello ${name || 'World'}`,\n  },\n}\n\nconst server = new GraphQLServer({ typeDefs, resolvers })\nserver.start(() => console.log('Server is running on localhost:4000'))\n```\n\n> To get started with `graphql-yoga`, follow the instructions in the READMEs of the [examples](./examples).\n\n### API\n\n#### `GraphQLServer`\n\n##### `constructor(props: Props): GraphQLServer`\n\nThe `props` argument accepts the following fields:\n\n\n| Key                | Type                                                            | Default | Note                                                                                                                                                                                               |\n| ------------------ | --------------------------------------------------------------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `typeDefs`         | `String` or `Function` or `DocumentNode` or `array` of previous | `null`  | Contains GraphQL type definitions in [SDL](https://blog.graph.cool/graphql-sdl-schema-definition-language-6755bcb9ce51) or file path to type definitions (required if `schema` is not provided \\*) |\n| `resolvers`        | Object                                                          | `null`  | Contains resolvers for the fields specified in `typeDefs` (required if `schema` is not provided \\*)                                                                                                |\n| `resolverValidationOptions` | Object | `null` | Object which controls the resolver validation behaviour (see [\"Generating a schema\"](https://www.apollographql.com/docs/graphql-tools/generate-schema.html#makeExecutableSchema)) for more information |\n| `schema`           | Object                                                          | `null`  | An instance of [`GraphQLSchema`](http://graphql.org/graphql-js/type/#graphqlschema) (required if `typeDefs` and `resolvers` are not provided \\*)                                                   |\n| `mocks`            | Object or Boolean |  `null`  | Applies [mocks to schema](https://github.com/apollographql/graphql-tools/blob/master/docs/source/mocking.md). Setting this to true will apply a default mock, however you can pass an object to customize the mocks similar to the resolvers map. |\n| `context`          | Object or Function                                              | `{}`    | Contains custom data being passed through your resolver chain. This can be passed in as an object, or as a Function with the signature `(req: ContextParameters) => any` \\*\\*                      |\n| `schemaDirectives` | Object                                                          | `null`  | [`Apollo Server schema directives`](https://www.apollographql.com/docs/graphql-tools/schema-directives.html) that allow for transforming schema types, fields, and arguments                       |\n| `middlewares`      | `array` of Middleware                                           | `[]`    | A list of [`GraphQLMiddleware`](https://github.com/graphcool/graphql-middleware) middleware.                                                                                                       |\n\n> (\\*) There are two major ways of providing the [schema](https://blog.graph.cool/graphql-server-basics-the-schema-ac5e2950214e) information to the `constructor`:\n>\n> 1.  Provide `typeDefs` and `resolvers` and omit the `schema`, in this case `graphql-yoga` will construct the `GraphQLSchema` instance using [`makeExecutableSchema`](https://www.apollographql.com/docs/graphql-tools/generate-schema.html#makeExecutableSchema) from [`graphql-tools`](https://github.com/apollographql/graphql-tools).\n> 2.  Provide the `schema` directly and omit `typeDefs` and `resolvers`.\n\n> (\\*\\*) Notice that the `req` argument is an object of the shape `{ request, response, connection }` which either carries a `request: Request` property (when it's a `Query`/`Mutation` resolver), `response: Response` property (when it's a `Query`/`Mutation` resolver), or a `connection: SubscriptionOptions` property (when it's a `Subscription` resolver). [`Request`](http://expressjs.com/en/api.html#req) is imported from Express.js. [`Response`](http://expressjs.com/en/api.html#res) is imported from Express.js aswell. `SubscriptionOptions` is from the [`graphql-subscriptions`](https://github.com/apollographql/graphql-subscriptions) package. `SubscriptionOptions` are getting the `connectionParams` automatically injected under `SubscriptionOptions.context.[CONNECTION_PARAMETER_NAME]`\n\nHere is example of creating a new server:\n\n```js\nconst typeDefs = `\n  type Query {\n    hello(name: String): String!\n  }\n`\n\nconst resolvers = {\n  Query: {\n    hello: (_, { name }) => `Hello ${name || 'World'}`,\n  },\n}\n\nconst server = new GraphQLServer({ typeDefs, resolvers })\n```\n\n#### `start(options: Options, callback: ((options: Options) => void) = (() => null)): Promise<void>`\n\nOnce your `GraphQLServer` is instantiated, you can call the `start` method on it. It takes two arguments: `options`, the options object defined above, and `callback`, a function that's invoked right before the server is started. As an example, the `callback` can be used to print information that the server has started.\n\nThe `options` object has the following fields:\n\n| Key             | Type                                                             | Default         | Note                                                                                                                                                                                                                                                                                                                         |\n| --------------- | ---------------------------------------------------------------- | --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `cors`          | Object                                                           | `null`          | Contains [configuration options](https://github.com/expressjs/cors#configuration-options) for [cors](https://github.com/expressjs/cors)                                                                                                                                                                                      |\n| `tracing`       | Boolean or [TracingOptions](/src/types.ts#L49-L51)               | `'http-header'` | Indicates whether [Apollo Tracing](https://github.com/apollographql/apollo-tracing) should be enabled or disabled for your server (if a string is provided, accepted values are: `'enabled'`, `'disabled'`, `'http-header'`)                                                                                                 |\n| `port`          | Number or String                                                 | `4000`          | Determines the port your server will be listening on (note that you can also specify the port by setting the `PORT` environment variable)                                                                                                                                                                                    |\n| `endpoint`      | String                                                           | `'/'`           | Defines the HTTP endpoint of your server                                                                                                                                                                                                                                                                                     |\n| `subscriptions` | Object or String or `false`                                      | `'/'`           | Defines the subscriptions (websocket) endpoint for your server; accepts an object with [subscription server options](https://github.com/apollographql/subscriptions-transport-ws#constructoroptions-socketoptions) `path`, `keepAlive`, `onConnect` and `onDisconnect`; setting to `false` disables subscriptions completely |\n| `playground`    | String or `false`                                                | `'/'`           | Defines the endpoint where you can invoke the [Playground](https://github.com/graphcool/graphql-playground); setting to `false` disables the playground endpoint                                                                                                                                                             |\n| `uploads`       | [UploadOptions](/src/types.ts#L39-L43) or `false` or `undefined` | `null`          | Provides information about upload limits; the object can have any combination of the following three keys: `maxFieldSize`, `maxFileSize`, `maxFiles`; each of these have values of type Number; setting to `false` disables file uploading                                                                                   |\n| `https`         | [HttpsOptions](/src/types.ts#L62-L65) or `undefined`             | `undefined`     | Enables HTTPS support with a key/cert\n| `getEndpoint`  | String or Boolean |  `false`  | Adds a graphql HTTP GET endpoint to your server (defaults to `endpoint` if `true`).  Used for leveraging CDN level caching. |\n| `deduplicator` | Boolean | `true` | Enables [graphql-deduplicator](https://github.com/gajus/graphql-deduplicator). Once enabled sending the header `X-GraphQL-Deduplicate` will deduplicate the data.  |\n| `bodyParserOptions` | BodyParserJSONOptions | [BodyParserJSONOptions Defaults](https://github.com/expressjs/body-parser#bodyparserjsonoptions) | Allows pass through of [body-parser options](https://github.com/expressjs/body-parser#bodyparserjsonoptions)  |\n\nAdditionally, the `options` object exposes these `apollo-server` options:\n\n| Key               | Type                 | Note                                                                                                                                                                                                                                                                                                                                 |\n| ----------------- | -------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `cacheControl`    | Boolean              | Enable extension that returns Cache Control data in the response                                                                                                                                                                                                                                                                     |\n| `formatError`     | Number               | A function to apply to every error before sending the response to clients. Defaults to [defaultErrorFormatter](https://github.com/graphcool/graphql-yoga/blob/master/src/defaultErrorFormatter.ts). Please beware, that if you override this, `requestId` and `code` on errors won't automatically be propagated to your yoga server |\n| `logFunction`     | LogFunction          | A function called for logging events such as execution times                                                                                                                                                                                                                                                                         |\n| `rootValue`       | any                  | RootValue passed to GraphQL execution                                                                                                                                                                                                                                                                                                |\n| `validationRules` | Array of functions   | Additional GraphQL validation rules to be applied to client-specified queries                                                                                                                                                                                                                                                        |\n| `fieldResolver`   | GraphQLFieldResolver | Specify a custom default field resolver function                                                                                                                                                                                                                                                                                     |\n| `formatParams`    | Function             | A function applied to each query in a batch to format parameters before execution                                                                                                                                                                                                                                                    |\n| `formatResponse`  | Function             | A function applied to each response after execution                                                                                                                                                                                                                                                                                  |\n| `debug`           | boolean              | Print additional debug logging if execution errors occur                                                                                                                                                                                                                                                                             |\n\n```js\nconst options = {\n  port: 8000,\n  endpoint: '/graphql',\n  subscriptions: '/subscriptions',\n  playground: '/playground',\n}\n\nserver.start(options, ({ port }) =>\n  console.log(\n    `Server started, listening on port ${port} for incoming requests.`,\n  ),\n)\n```\n\n#### `PubSub`\n\nSee the original documentation in [`graphql-subscriptions`](https://github.com/apollographql/graphql-subscriptions).\n\n#### `mocking`\n\nMocking the schema is straight forward, along wit\n```javascript\nimport { GraphqlServer, MockList } from 'graphql-yoga';\n\nconst typeDefs = `\n  type Query {\n    hello(name: String): String!\n    listOfStrings: [String]\n  }\n`\n\nconst mocks = {\n  Query: () => ({\n    hello: () => 'Hello World',\n    listOfStrings: () => new MockList([2,6]),\n  }),\n\n}\n\nconst server = new GraphQLServer({ typeDefs, mocks })\n```\n\n### Endpoints\n\n## Examples\n\nThere are three examples demonstrating how to quickly get started with `graphql-yoga`:\n\n* [hello-world](./examples/hello-world): Basic setup for building a schema and allowing for a `hello` query.\n* [subscriptions](./examples/subscriptions): Basic setup for using subscriptions with a counter that increments every 2 seconds and triggers a subscription.\n* [fullstack](./examples/fullstack): Fullstack example based on [`create-react-app`](https://github.com/facebookincubator/create-react-app) demonstrating how to query data from `graphql-yoga` with [Apollo Client 2.0](https://www.apollographql.com/client/).\n\n## Workflow\n\nOnce your `graphql-yoga` server is running, you can use [GraphQL Playground](https://github.com/graphcool/graphql-playground) out of the box – typically running on `localhost:4000`. (Read [here](https://blog.graph.cool/introducing-graphql-playground-f1e0a018f05d) for more information.)\n\n[![](https://imgur.com/6IC6Huj.png)](https://www.graphqlbin.com/RVIn)\n\n## Deployment\n\n### `now`\n\nTo deploy your `graphql-yoga` server with [`now`](https://zeit.co/now), follow these instructions:\n\n1.  Download [**Now Desktop**](https://zeit.co/download)\n2.  Navigate to the root directory of your `graphql-yoga` server\n3.  Run `now` in your terminal\n\n### Heroku\n\nTo deploy your `graphql-yoga` server with [Heroku](https://heroku.com), follow these instructions:\n\n1.  Download and install the [Heroku Command Line Interface](https://devcenter.heroku.com/articles/heroku-cli#download-and-install) (previously Heroku Toolbelt)\n2.  Log in to the Heroku CLI with `heroku login`\n3.  Navigate to the root directory of your `graphql-yoga` server\n4.  Create the Heroku instance by executing `heroku create`\n5.  Deploy your GraphQL server by executing `git push heroku master`\n\n### `up` (Coming soon 🔜 )\n\n### AWS Lambda (Coming soon 🔜 )\n\n## FAQ\n\n### How does `graphql-yoga` compare to `apollo-server` and other tools?\n\nAs mentioned above, `graphql-yoga` is built on top of a variety of other packages, such as `graphql.js`, `express` and `apollo-server`. Each of these provides a certain piece of functionality required for building a GraphQL server.\n\nUsing these packages individually incurs overhead in the setup process and requires you to write a lot of boilerplate. `graphql-yoga` abstracts away the initial complexity and required boilerplate and lets you get started quickly with a set of sensible defaults for your server configuration.\n\n`graphql-yoga` is like [`create-react-app`](https://github.com/facebookincubator/create-react-app) for building GraphQL servers.\n\n### Can't I just setup my own GraphQL server using `express` and `graphql.js`?\n\n`graphql-yoga` is all about convenience and a great \"Getting Started\" experience by abstracting away the complexity that comes when you're building your own GraphQL server from scratch. It's a pragmatic approach to bootstrap a GraphQL server, much like how [`create-react-app`](https://github.com/facebookincubator/create-react-app) removes friction when first starting out with React.\n\nWhenever the defaults of `graphql-yoga` are too tight a corset for you, you can simply _eject_ from it and use the tooling it's built upon - there's no lock-in or any other kind of magic going on preventing you from doing this.\n\n### How to eject from the standard `express` setup?\n\nThe core value of `graphql-yoga` is that you don't have to write the boilerplate required to configure your [express.js](https://github.com/expressjs/) application. However, once you need to add more customized behaviour to your server, the default configuration provided by `graphql-yoga` might not suit your use case any more. For example, it might be the case that you want to add more custom _middleware_ to your server, like for logging or error reporting.\n\nFor these cases, `GraphQLServer` exposes the `express.Application` directly via its [`express`](./src/index.ts#L17) property:\n\n```js\nserver.express.use(myMiddleware())\n```\n\nMiddlewares can also be added specifically to the GraphQL endpoint route, by using:\n\n```js\nserver.express.post(server.options.endpoint, myMiddleware())\n```\n\nAny middlewares you add to that route, will be added right before the `apollo-server-express` middleware.\n\n## Help & Community [![Slack Status](https://slack.graph.cool/badge.svg)](https://slack.graph.cool)\n\nJoin our [Slack community](http://slack.graph.cool/) if you run into issues or have questions. We love talking to you!\n\n<p align=\"center\"><a href=\"https://oss.prisma.io\"><img src=\"https://imgur.com/IMU2ERq.png\" alt=\"Prisma\" height=\"170px\"></a></p>\n",
  "readmeFilename": "README.md",
  "release": {
    "branch": "master"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/graphcool/graphql-yoga.git"
  },
  "scripts": {
    "build": "rm -rf dist && tsc -d",
    "format": "prettier --write --ignore-path .gitignore {src,.}/{*.ts,*.js}",
    "lint": "tslint --project tsconfig.json {src,test}/**/*.ts && prettier-check --ignore-path .gitignore {src,.}/{*.ts,*.js}",
    "prepublish": "yarn build",
    "test": "yarn lint && yarn build && ava",
    "watch": "yarn build && npm-run-all --parallel watch:*",
    "watch:ava": "ava --watch",
    "watch:tsc": "tsc --watch"
  },
  "typings": "dist/index.d.ts",
  "version": "1.16.2"
}
