{
  "_args": [
    [
      {
        "raw": "compute-scroll-into-view@^1.0.2",
        "scope": null,
        "escapedName": "compute-scroll-into-view",
        "name": "compute-scroll-into-view",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/downshift"
    ]
  ],
  "_from": "compute-scroll-into-view@^1.0.2",
  "_hasShrinkwrap": false,
  "_id": "compute-scroll-into-view@1.0.11",
  "_location": "/compute-scroll-into-view",
  "_nodeVersion": "8.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/compute-scroll-into-view_1.0.11_1538914757964_0.6169100011770505"
  },
  "_npmUser": {
    "name": "stipsan",
    "email": "stipsan@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "compute-scroll-into-view@^1.0.2",
    "scope": null,
    "escapedName": "compute-scroll-into-view",
    "name": "compute-scroll-into-view",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/downshift"
  ],
  "_resolved": "https://registry.npmjs.org/compute-scroll-into-view/-/compute-scroll-into-view-1.0.11.tgz",
  "_shasum": "7ff0a57f9aeda6314132d8994cce7aeca794fecf",
  "_shrinkwrap": null,
  "_spec": "compute-scroll-into-view@^1.0.2",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/downshift",
  "author": {
    "name": "Cody Olsen"
  },
  "browserify": {
    "transform": [
      "loose-envify"
    ]
  },
  "bugs": {
    "url": "https://github.com/stipsan/compute-scroll-into-view/issues"
  },
  "bundlesize": [
    {
      "path": "./umd/compute-scroll-into-view.min.js",
      "maxSize": "2.5 kB",
      "compression": "none"
    }
  ],
  "dependencies": {},
  "description": "The engine that powers scroll-into-view-if-needed",
  "devDependencies": {
    "@babel/cli": "7.1.2",
    "@babel/core": "7.1.2",
    "@babel/plugin-external-helpers": "7.0.0",
    "@babel/preset-env": "7.1.0",
    "@babel/preset-typescript": "7.1.0",
    "babel-plugin-add-module-exports": "1.0.0",
    "babel-plugin-dev-expression": "0.2.1",
    "concurrently": "4.0.1",
    "husky": "1.1.1",
    "jest": "23.6.0",
    "jest-junit": "5.2.0",
    "jest-puppeteer": "3.4.0",
    "lint-staged": "7.3.0",
    "prettier": "1.14.3",
    "prettier-package-json": "2.0.1",
    "puppeteer": "1.9.0",
    "rimraf": "2.6.2",
    "rollup": "0.66.4",
    "rollup-plugin-babel": "4.0.3",
    "rollup-plugin-commonjs": "9.1.8",
    "rollup-plugin-node-resolve": "3.4.0",
    "rollup-plugin-replace": "2.1.0",
    "rollup-plugin-terser": "3.0.0",
    "semantic-release": "15.9.17",
    "serve": "10.0.2",
    "tslint": "5.11.0",
    "tslint-config-prettier": "1.15.0",
    "typescript": "3.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-uUnglJowSe0IPmWOdDtrlHXof5CTIJitfJEyITHBW6zDVOGu9Pjk5puaLM73SLcwak0L4hEjO7Td88/a6P5i7A==",
    "shasum": "7ff0a57f9aeda6314132d8994cce7aeca794fecf",
    "tarball": "https://registry.npmjs.org/compute-scroll-into-view/-/compute-scroll-into-view-1.0.11.tgz",
    "fileCount": 8,
    "unpackedSize": 37413,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbufnGCRA9TVsSAnZWagAAEqQP/0FRXelW1ucM0kRc/mXG\ny92D9yoMSQEBHddR6hLmZM1DSZng0/C7Wo+kHk15vOdo8xmjDDCCD4YX+Kt9\nbQyrDxO5772gygrPVZa/N0b/KgCUxk5rYryLCBNJGHJpH0rmxtIK/2eLzQmr\n37ATyqxTnhhIOBoi/88bQt/7OQ2e9ucuHsF9eyrqvuiisy13QjLZlOUUBEti\ngfNmK8uX/ukSzaT0CxmOovUAvNgQ1/AwexjBfS5oXACvQs9ln3K9HJ9meOFn\ngR6yeriNRfzlYOcTvbjRKQxurlryrc3akg38oErwbVUzaAIwig5eLGctkHy4\nUNXwxJ9Yuau3+bCqhReHF/vr0OGJhAsYCSTrQIHm7LTa/0zDkOlPdu5jGRSt\nQPE8w99cBAUVNXW8l/MEfFrHot9w/+RKI/Q1SgBgcEJO1j7JKk8Lt5T6+Jc9\nHe9TVVzEe7sIOWOXqzJQd6H8k4UMFyW7qGshOi9zhcLmedNfgLnxx5qeAeOc\njQOFlq8y2oqAglGcBxtV0uflOMAdNxgzdac5NP01QwZG+KAnZJ4A+UNEVcsD\ndOUImf+PDTyDT24jX9ELEpC/fUoUAFQcYuDogWfFignXOaR/twZ3G2jqa6I2\nf8iL7ZBkj3PKGZNUYLbNoMJtm2Pxu4+Rp0eJ6FIeucRrfrYIDgmjkmHUtrdZ\nbWak\r\n=YjTI\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "es",
    "typings",
    "umd"
  ],
  "gitHead": "fe9a0517afa3aa8904476e89805c9f8cb471fe83",
  "homepage": "https://scroll-into-view-if-needed.netlify.com",
  "keywords": [
    "if-needed",
    "scroll",
    "scroll-into-view",
    "scroll-into-view-if-needed",
    "scrollIntoView",
    "scrollIntoViewIfNeeded",
    "scrollMode",
    "typescript"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "prettier --write",
      "git add"
    ],
    "*.{ts,tsx}": [
      "prettier --write",
      "git add"
    ],
    "*.json": [
      "prettier --write",
      "git add"
    ],
    "*.md": [
      "prettier --write",
      "git add"
    ],
    "**/package.json": [
      "prettier-package-json --write",
      "git add"
    ],
    "**/.babelrc": [
      "prettier --write",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "stipsan",
      "email": "stipsan@gmail.com"
    }
  ],
  "module": "es/index.js",
  "name": "compute-scroll-into-view",
  "optionalDependencies": {},
  "prettier": {
    "semi": false,
    "singleQuote": true,
    "trailingComma": "es5"
  },
  "readme": "[![CircleCI Status](https://img.shields.io/circleci/project/github/stipsan/compute-scroll-into-view.svg?style=flat-square)](https://circleci.com/gh/stipsan/compute-scroll-into-view)\n[![npm stat](https://img.shields.io/npm/dm/compute-scroll-into-view.svg?style=flat-square)](https://npm-stat.com/charts.html?package=compute-scroll-into-view)\n[![npm version](https://img.shields.io/npm/v/compute-scroll-into-view.svg?style=flat-square)](https://www.npmjs.com/package/compute-scroll-into-view)\n[![gzip size][gzip-badge]][unpkg-dist]\n[![size][size-badge]][unpkg-dist]\n[![module formats: umd, cjs, and es][module-formats-badge]][unpkg-dist]\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?style=flat-square)](https://github.com/semantic-release/semantic-release)\n\n![compute-scroll-into-view](https://user-images.githubusercontent.com/81981/43024153-a2cc212c-8c6d-11e8-913b-b4d62efcf105.png)\n\nLower level API that is used by the [ponyfill](https://ponyfill.com) [scroll-into-view-if-needed](https://github.com/stipsan/scroll-into-view-if-needed) to compute where (if needed) elements should scroll based on [options defined in the spec](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) and the [`scrollMode: \"if-needed\"` draft spec proposal](https://github.com/w3c/csswg-drafts/pull/1805).\nUse this if you want the smallest possible bundlesize and is ok with implementing the actual scrolling yourself.\n\nScrolling SVG elements are supported, as well as Shadow DOM elements. The [VisualViewport](https://developer.mozilla.org/en-US/docs/Web/API/VisualViewport) API is also supported, ensuring scrolling works properly on modern devices. Quirksmode is also supported as long as you polyfill [`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement).\n\n## Install\n\n```bash\nyarn add compute-scroll-into-view\n```\n\nThe UMD build is also available on [unpkg](https://unpkg.com/compute-scroll-into-view/umd/):\n\n```html\n<script src=\"https://unpkg.com/compute-scroll-into-view/umd/compute-scroll-into-view.min.js\"></script>\n```\n\nYou can find the library on `window.computeScrollIntoView`.\n\n## Usage\n\n```js\n// es6 import\nimport computeScrollIntoView from 'compute-scroll-into-view'\n// or es5\nconst computeScrollIntoView = require('compute-scroll-into-view')\n\nconst node = document.getElementById('hero')\n\n// same behavior as Element.scrollIntoView({block: \"nearest\", inline: \"nearest\"})\n// see: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\nconst actions = computeScrollIntoView(node, {\n  scrollMode: 'if-needed',\n  block: 'nearest',\n  inline: 'nearest',\n})\n\n// same behavior as Element.scrollIntoViewIfNeeded(true)\n// see: https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded\nconst actions = computeScrollIntoView(node, { scrollMode: 'if-needed' block: 'center', inline: 'center' })\n\n// Then perform the scrolling, use scroll-into-view-if-needed if you don't want to implement this part\nactions.forEach(({ el, top, left }) => {\n  el.scrollTop = top\n  el.scrollLeft = left\n})\n```\n\n## API\n\n### computeScrollIntoView(target, options)\n\n### options\n\nType: `Object`\n\n#### [block](https://scroll-into-view-if-needed.netlify.com/#scroll-alignment)\n\nType: `'start' | 'center' | 'end' | 'nearest'`<br> Default: `'center'`\n\nControl the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\nThis means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n\n#### [inline](https://scroll-into-view-if-needed.netlify.com/#scroll-alignment)\n\nType: `'start' | 'center' | 'end' | 'nearest'`<br> Default: `'nearest'`\n\nLike `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n\n#### [scrollMode](https://scroll-into-view-if-needed.netlify.com/#scrolling-if-needed)\n\nType: `'always' | 'if-needed'`<br> Default: `'always'`\n\nThis is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/1805\n\nThis library will be updated to reflect any changes to the spec and will provide a migration path.\nTo be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n\n#### [boundary](https://scroll-into-view-if-needed.netlify.com/#limit-propagation)\n\nType: `Element | Function`\n\nBy default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\nBy passing a boundary you can short-circuit this loop depending on your needs:\n\n- Prevent the browser window from scrolling.\n- Scroll elements into view in a list, without scrolling container elements.\n\nYou can also pass a function to do more dynamic checks to override the scroll scoping:\n\n```js\nconst actions = computeScrollIntoView(target, {\n  boundary: parent => {\n    // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n    // this is required by the CSSOM spec\n    if (getComputedStyle(parent)['overflow'] === 'hidden') {\n      return false\n    }\n\n    return true\n  },\n})\n```\n\n#### skipOverflowHiddenElements\n\nType: `Boolean`<br> Default: `false`\n\nBy default the [spec](https://drafts.csswg.org/cssom-view/#scrolling-box) states that `overflow: hidden` elements should be scrollable because it has [been used to allow programatic scrolling](https://drafts.csswg.org/css-overflow-3/#valdef-overflow-hidden). This behavior can sometimes lead to [scrolling issues](https://github.com/stipsan/scroll-into-view-if-needed/pull/225#issue-186419520) when you have a node that is a child of an `overflow: hidden` node.\n\nThis package follows the convention [adopted by Firefox](https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18) of setting a boolean option to _not_ scroll all nodes with `overflow: hidden` set.\n\n# TypeScript support\n\nThis library ships with library definitions for TypeScript.\n\n> FlowType definitions is coming soon...\n\n[gzip-badge]: http://img.badgesize.io/https://unpkg.com/compute-scroll-into-view/umd/compute-scroll-into-view.min.js?compression=gzip&label=gzip%20size&style=flat-square\n[size-badge]: http://img.badgesize.io/https://unpkg.com/compute-scroll-into-view/umd/compute-scroll-into-view.min.js?label=size&style=flat-square\n[unpkg-dist]: https://unpkg.com/compute-scroll-into-view/umd/\n[module-formats-badge]: https://img.shields.io/badge/module%20formats-umd%2C%20cjs%2C%20es-green.svg?style=flat-square\n",
  "readmeFilename": "README.md",
  "release": {
    "prepare": [
      "@semantic-release/npm"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/stipsan/compute-scroll-into-view.git"
  },
  "scripts": {
    "build": "yarn build:d.ts && yarn build:cjs && yarn build:es && yarn build:umd && yarn build:umd.min",
    "build:cjs": "BABEL_ENV=cjs babel src -d . --extensions '.ts'",
    "build:d.ts": "tsc --emitDeclarationOnly",
    "build:es": "BABEL_ENV=es babel src -d es --extensions '.ts'",
    "build:umd": "BABEL_ENV=umd NODE_ENV=development rollup -c -f umd -o umd/compute-scroll-into-view.js",
    "build:umd.min": "BABEL_ENV=umd NODE_ENV=production rollup -c -f umd -o umd/compute-scroll-into-view.min.js",
    "clean": "rimraf 'umd' 'es' 'typings'",
    "dev": "concurrently 'tsc --noEmit --watch' 'yarn build:cjs --watch' 'yarn build:es --watch' 'yarn build:umd --watch' 'yarn build:umd.min --watch'",
    "prebuild": "yarn clean",
    "precommit": "lint-staged",
    "prepublishOnly": "unset npm_config_cafile && yarn build",
    "test": "jest -c integration/jest.config.js",
    "typecheck": "tsc --noEmit"
  },
  "typings": "typings/index.d.ts",
  "version": "1.0.11"
}
