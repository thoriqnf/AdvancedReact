{
  "_args": [
    [
      {
        "raw": "react-adopt@^0.6.0",
        "scope": null,
        "escapedName": "react-adopt",
        "name": "react-adopt",
        "rawSpec": "^0.6.0",
        "spec": ">=0.6.0 <0.7.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend"
    ]
  ],
  "_from": "react-adopt@>=0.6.0 <0.7.0",
  "_id": "react-adopt@0.6.0",
  "_inCache": true,
  "_location": "/react-adopt",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-adopt_0.6.0_1526158195750_0.16843064285105358"
  },
  "_npmUser": {
    "name": "pedronauck",
    "email": "pedronauck@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-adopt@^0.6.0",
    "scope": null,
    "escapedName": "react-adopt",
    "name": "react-adopt",
    "rawSpec": "^0.6.0",
    "spec": ">=0.6.0 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-adopt/-/react-adopt-0.6.0.tgz",
  "_shasum": "e5ff903a655d3082217f82bc9d5033a4b64fafad",
  "_shrinkwrap": null,
  "_spec": "react-adopt@^0.6.0",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend",
  "author": {
    "name": "Pedro Nauck",
    "email": "pedronauck@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/pedronauck/react-adopt/issues"
  },
  "dependencies": {
    "hoist-non-react-statics": "^2.5.0",
    "react": "^16.3.2",
    "react-display-name": "^0.2.4"
  },
  "description": ":sunglasses: _**React Adopt -**_ Compose render props components like a pro",
  "devDependencies": {
    "@types/enzyme": "^3.1.10",
    "@types/enzyme-adapter-react-16": "^1.0.2",
    "@types/jest": "^22.2.3",
    "@types/react": "^16.3.14",
    "cross-env": "^5.1.5",
    "enzyme": "^3.3.0",
    "enzyme-adapter-react-16": "^1.1.1",
    "husky": "^0.14.3",
    "jest": "^22.4.3",
    "libundler": "^1.6.4",
    "lint-staged": "^7.1.0",
    "np": "^2.20.1",
    "npm-run-all": "^4.1.3",
    "prettier": "^1.12.1",
    "react-dom": "^16.3.2",
    "react-powerplug": "^0.1.5",
    "ts-jest": "^22.4.5",
    "ts-node": "^6.0.3",
    "tslint": "^5.10.0",
    "tslint-config-prettier": "^1.12.0",
    "typescript": "^2.8.3"
  },
  "directories": {},
  "dist": {
    "shasum": "e5ff903a655d3082217f82bc9d5033a4b64fafad",
    "tarball": "https://registry.npmjs.org/react-adopt/-/react-adopt-0.6.0.tgz",
    "fileCount": 16,
    "unpackedSize": 42471,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa91N1CRA9TVsSAnZWagAAaRkQAKH8bUYppoHQOoR+K2MQ\n8Bm9BleD4FhIh6KQj/kHTMyYoMFTjWz+n1vcSqjwJtV35/nh5eZbsWxDjeA1\naqp87U/IXOEV81WPp10TSopIgT1ZFdmESu/4D96T5kAgbyEro0JCPndM6T7y\nlvkNN4GJ5s91C/fEbSYDVWf2EC4COTduPKKrb5S/dx++4difqbsJjwcFSvGJ\nqB4NCa7urkNqF6pJL+r+IG9tbrQAhMFGLBW0HeJKjwPUynSwDFUZyNzUQkDY\n3qAJKWlE53VN4Z5PxnxKIP0P7AfRTkGSDJ+qGovGMMohvt0n25KiSwk4o7Yb\nkBAms32TUyjFWn1e3qNs2JEEYnTW3OKuqLO0dQ99wKK9HBRBlix9AMcPZuuh\nQFNsp9uI6ZbSOZzpREdtV/lZCFcjzT4/EXIlhITNvRBM7tFXdIcmc1lyNGsW\nq0LEBmueQ+C78F+aexkvTdWAl35Q3mhZaJsnapiswYvmxeKGMEJOsb3tCfoz\nRvkEd46QPS72yaO8y2Lpm0W1ezrqyvFbV0FEABjchAG7ovFZCjZateejGdlq\n8S9mNfKmLADznqKvUZLC+J4Sw+3f0BInOvbPD0+HWOUdf8uNtCwPDM628G2U\nlhvpXtITcc0UGmSDknABUNsxLe9xzlSnNw2PbbroOS15taBpLaX130xjunBO\nu+Zg\r\n=FDhU\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist/",
    "README.md",
    "LICENSE"
  ],
  "homepage": "https://github.com/pedronauck/react-adopt",
  "husky": {
    "pre-commit": "lint-staged && yarn test"
  },
  "jest": {
    "setupFiles": [
      "<rootDir>/utils/test-setup.ts"
    ],
    "transform": {
      "^.+\\.(ts|tsx)$": "ts-jest"
    },
    "testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(js?|jsx?|jsx?|tsx?)$",
    "moduleFileExtensions": [
      "ts",
      "tsx",
      "js",
      "jsx",
      "json",
      "node"
    ]
  },
  "keywords": [
    "react",
    "render-props",
    "compose"
  ],
  "license": "MIT",
  "licenseText": "MIT License\n\nCopyright (c) 2018 Pedro Nauck\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
  "lint-staged": {
    "src/**.tsx": [
      "yarn fix:prettier",
      "git add"
    ]
  },
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "pedronauck",
      "email": "pedronauck@gmail.com"
    }
  ],
  "module": "dist/index.m.js",
  "name": "react-adopt",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">= 0.14.0"
  },
  "readme": ":sunglasses: _**React Adopt -**_ Compose render props components like a pro\n\n[![GitHub release](https://img.shields.io/github/release/pedronauck/react-adopt.svg)]()\n[![Build Status](https://travis-ci.org/pedronauck/react-adopt.svg?branch=master)](https://travis-ci.org/pedronauck/react-adopt)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/ebdcc3e942b14363a96438b41c770b32)](https://www.codacy.com/app/pedronauck/react-adopt?utm_source=github.com&utm_medium=referral&utm_content=pedronauck/react-adopt&utm_campaign=Badge_Grade)\n\n![](https://i.imgflip.com/27euu2.jpg)\n\n## üìú Table of content\n\n- [Why](#--why)\n- [Solution](#--solution)\n- [Demos](#--demos)\n- [Usage](#--usage-demo)\n  - [Working with new Context api](#working-with-new-context-api)\n  - [Custom render and retrieving props from composed](#custom-render-and-retrieving-props-from-composed)\n  - [Mapping props from mapper](#mapping-props-from-mapper)\n  - [Leading with multiple params](#leading-with-multiple-params)\n  - [Typescript support](#typescript-support)\n  - [Inline composition](#inline-composition)\n\n## üßê &nbsp; Why\n\n[Render Props](https://reactjs.org/docs/render-props.html) are the new hype of React's ecosystem, that's a fact. So, when you need to use more than one render props component together, this can be boring and generate something called a *\"render props callback hell\"*, like this:\n\n![Bad](https://i.imgur.com/qmk3Bk5.png)\n\n## üí° &nbsp; Solution\n\n* **Small**. 0.7kb minified!\n* **Extremely Simple**. Just a method!\n\nReact Adopt is a simple method that composes multiple render prop components, combining each prop result from your mapper.\n\n## üìü &nbsp; Demos\n\n- [Basic example](https://codesandbox.io/s/vq1wl37m0y?hidenavigation=1)\n- [Todo App example using React Apollo](https://codesandbox.io/s/3x7n8wyp15?hidenavigation=1)\n- [Example with new Context API](https://codesandbox.io/s/qv3m6yk2n4?hidenavigation=1)\n\n## üíª &nbsp; Usage\n\nInstall as project dependency:\n\n```bash\n$ yarn add react-adopt\n```\n\nNow you can use React Adopt to compose your components. See below for an example using the awesome [react-powerplug](https://github.com/renatorib/react-powerplug):\n\n![Good](https://i.imgur.com/RXVlFwy.png)\n\n### Working with new Context api\n\nOne use case that React Adopt can fit perfectly is when you need to use [React's new context api](https://reactjs.org/docs/context.html) that use render props to create some context:\n\n```jsx\nimport React from 'react'\nimport { adopt } from 'react-adopt'\n\nconst ThemeContext = React.createContext('light')\nconst UserContext = React.createContext({ name: 'John' })\n\nconst Context = adopt({\n  theme: <ThemeContext.Consumer />,\n  user: <UserContext.Consumer />,\n})\n\n<Context>\n  {({ theme, user }) => /* ... */}\n</Context>\n```\n\nSee [this demo](https://codesandbox.io/s/qv3m6yk2n4?hidenavigation=1) for a better explanation.\n\n### Custom render and retrieving props from composed\n\nSome components don't use the `children` prop for render props to work. For cases like this, you can pass a function instead of a jsx element to your mapper. This function will receive a `render` prop that will be responsible for your render, the props passed on `Composed` component, and the previous values from each mapper. See an example:\n\n```jsx\nimport { adopt } from 'react-adopt'\nimport MyCustomRenderProps from 'my-custom-render-props'\n\nconst Composed = adopt({\n  custom: ({ render }) => <MyCustomRenderProps render={render} />\n})\n\n<Composed>\n  {({ custom }) => (\n    <div>{custom.value}</div>\n  )}\n</Composed>\n```\n\nYou can also retrieve the properties passed to the composed component this way too:\n\n\n```jsx\nimport { adopt } from 'react-adopt'\nimport { Value } from 'react-powerplug'\n\nconst Composed = adopt({\n  greet: ({ initialGreet, render }) => (\n    <Value initial={initialGreet}>{render}</Value>\n  )\n})\n\n<Composed initialGreet=\"Hi\">\n  {({ greet }) => (\n    <div>{greet.value}</div>\n  )}\n</Composed>\n```\n\nAnd get previous mapper results as prop for compose:\n\n```jsx\nimport { adopt } from 'react-adopt'\n\nimport { User, Cart, ShippingRate } from 'my-containers'\n\nconst Composed = adopt({\n  cart: <Cart />,\n  user: <User />,\n  shippingRates: ({ user, cart, render }) => (\n ¬† ¬†<ShippingRate zipcode={user.zipcode} items={cart.items}>\n      {render}\n    </ShippingRate>\n  )\n})\n\n<Composed>\n  {({ cart, user, shippingRates }) => /* ... */ }\n</Composed>\n```\n\n### Mapping props from mapper\n\nSometimes, get properties from your mappers can be kind of boring depending on how nested the result from each mapper. To easily avoid deeply nested objects or combine your results, you can map the final results into a single object using the `mapProps` function as the second parameter.\n\n```js\nimport { adopt } from 'react-adopt'\nimport { Value } from 'react-powerplug'\n\nconst mapper = {\n  greet: <Value initial=\"Hi\" />,\n  name: <Value initial=\"John\" />,\n}\n\nconst mapProps = ({ greet, name }) => ({\n  message: `${greet.value} ${name.value}`,\n})\n\nconst Composed = adopt(mapper, mapProps)\n\nconst App = () => (\n  <Composed>\n    {({ message }) => /* ... */}\n  </Composed>\n)\n```\n\nYou can do that using the `<Adopt />` component as well:\n\n```js\nimport { Adopt } from 'react-adopt'\nimport { Value } from 'react-powerplug'\n\nconst mapper = {\n  greet: <Value initial=\"Hi\" />,\n  name: <Value initial=\"John\" />,\n}\n\nconst mapProps = ({ greet, name }) => ({\n  message: `${greet.value} ${name.value}`,\n})\n\nconst App = () => (\n  <Adopt mapper={mapper} mapProps={mapProps}>\n    {({ message }) => /* ... */}\n  </Adopt>\n)\n```\n\n### Leading with multiple params\n\nSome render props components return multiple arguments in the children function instead of a single one (see a simple example in the new [Query](https://www.apollographql.com/docs/react/essentials/queries.html#basic) and [Mutation](https://www.apollographql.com/docs/react/essentials/mutations.html) component from `react-apollo`). In this case, you can do an arbitrary render with `render` prop [using your map value as a function](#custom-render-and-retrieving-props-from-composed):\n\n```js\nimport { adopt } from 'react-adopt'\nimport { Mutation } from 'react-apollo'\n\nconst ADD_TODO = /* ... */\n\nconst addTodo = ({ render }) => (\n  <Mutation mutation={ADD_TODO}>\n    {/* this is an arbitrary render where you will pass your two arguments into a single one */}\n ¬† ¬†{(mutation, result) => render({ mutation, result })}\n ¬† </Mutation>\n)\n\nconst Composed = adopt({\n  addTodo,\n})\n\nconst App = () => (\n  <Compose>\n    {({ addTodo: { mutation, result } }) => /* ... */}\n  </Compose>\n)\n```\n\nSee [this demo](https://codesandbox.io/s/3x7n8wyp15?hidenavigation=1) for a complete explanation about multiple params..\n\n### Typescript support\n\nReact Adopt has full typescript support when you need to type the composed component:\n\n```ts\nimport * as React from 'react'\nimport { adopt } from 'react-adopt'\nimport { Value } from 'react-powerplug'\n\ninterface RenderProps {\n  foo: { value: string }\n}\n\ninterface Props {\n  tor: string\n}\n\nconst foo = ({ tor, render }) => (\n  <Value initial=\"foo\">{render}</Value>\n)\n\nconst Composed = adopt<RenderProps, Props>({\n  foo,\n})\n\n<Composed tor=\"tor\">\n  {({ foo, bar }) => (\n    <div>{foo.value}</div>\n  )}\n</Composed>\n```\n\n### Inline composition\n\nIf you dont care about [typings](#typescript-support) and need something more easy and quick, you can choose to use an inline composition by importing the `<Adopt>` component and passing your mapper as a prop:\n\n```js\nimport React from 'react'\nimport { Adopt } from 'react-adopt'\nimport { Value } from 'react-powerplug'\n\nconst mapper = {\n  greet: <Value initial=\"Hi\" />,\n  name: <Value initial=\"John\" />\n}\n\n<Adopt mapper={mapper}>\n  {({ greet, name }) => /* ... */}\n</Adopt>\n```\n\n## üï∫ &nbsp; Contribute\n\n1.  [Fork](https://help.github.com/articles/fork-a-repo/) this repository to your own GitHub account and then [clone](https://help.github.com/articles/cloning-a-repository/) it to your local device\n2.  Install dependencies using Yarn: `yarn install`\n3.  Make the necessary changes and ensure that the tests are passing using `yarn test`\n4.  Send a pull request üôå\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pedronauck/react-adopt.git"
  },
  "scripts": {
    "build": "libundler build --ts --sourcemap",
    "build:prod": "yarn build --compress",
    "dev": "libundler watch --ts",
    "fix": "run-s fix:*",
    "fix:prettier": "prettier \"src/**/*.{ts,tsx}\" --write",
    "fix:tslint": "tslint -p ./",
    "prebuild:prod": "yarn run fix",
    "prerelease": "yarn build:prod",
    "release": "np",
    "test": "cross-env NODE_ENV=test jest"
  },
  "source": "src/index.tsx",
  "types": "dist/index.d.ts",
  "umd:main": "dist/index.umd.js",
  "version": "0.6.0"
}
