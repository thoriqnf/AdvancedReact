{
  "_args": [
    [
      {
        "raw": "prompts@^0.1.9",
        "scope": null,
        "escapedName": "prompts",
        "name": "prompts",
        "rawSpec": "^0.1.9",
        "spec": ">=0.1.9 <0.2.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/jest/node_modules/jest-cli"
    ]
  ],
  "_from": "prompts@^0.1.9",
  "_hasShrinkwrap": false,
  "_id": "prompts@0.1.14",
  "_location": "/prompts",
  "_nodeVersion": "10.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/prompts_0.1.14_1533391791984_0.7303060005967956"
  },
  "_npmUser": {
    "name": "terkelg",
    "email": "terkel@terkel.com"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "prompts@^0.1.9",
    "scope": null,
    "escapedName": "prompts",
    "name": "prompts",
    "rawSpec": "^0.1.9",
    "spec": ">=0.1.9 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest/jest-cli"
  ],
  "_resolved": "https://registry.npmjs.org/prompts/-/prompts-0.1.14.tgz",
  "_shasum": "a8e15c612c5c9ec8f8111847df3337c9cbd443b2",
  "_shrinkwrap": null,
  "_spec": "prompts@^0.1.9",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/jest/node_modules/jest-cli",
  "author": {
    "name": "Terkel Gjervig",
    "email": "terkel@terkel.com",
    "url": "https://terkel.com"
  },
  "bugs": {
    "url": "https://github.com/terkelg/prompts/issues"
  },
  "dependencies": {
    "kleur": "^2.0.1",
    "sisteransi": "^0.1.1"
  },
  "description": "Lightweight, beautiful and user-friendly prompts",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-preset-env": "^1.7.0",
    "tap-spec": "^5.0.0",
    "tape": "^4.9.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-rxkyiE9YH6zAz/rZpywySLKkpaj0NMVyNw1qhsubdbjjSgcayjTShDreZGlFMcGSu5sab3bAKPfFk78PB90+8w==",
    "shasum": "a8e15c612c5c9ec8f8111847df3337c9cbd443b2",
    "tarball": "https://registry.npmjs.org/prompts/-/prompts-0.1.14.tgz",
    "fileCount": 38,
    "unpackedSize": 92083,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbZbOwCRA9TVsSAnZWagAA3IkP/AvmRD8JYV/nkAB5p1wa\nzDGGYZLNtln30ekfL8LjYB6Rl8Sp4eebJNykATmiOt4U+aO1p7DqpqlkcQ7q\n3p0aUNPhQ4pj98t35B7tw85rGbVBqsssiEWdBs7903OU2lfCQ1lLyID1yIYZ\nY359/duQxVzZCXpGz44PzmtL/yflj8AsjOCDUsOg1l1god7XJUtvDQh+uxs5\nycwm+8l6AoJ5R34aceXHDeVYiPdm6KnEGsuVuga7C8vJB0C+2a0gxMqnWo4q\nHCvRXt66KJ8OFVqQ6KyXFp/qhpKqQK6lneTdJdjXfVP4AZiIDD3lSwRLoOaB\nUUtkF7cnxi3RnwLzjM05Sb69D+1Q0Zgt9g8ktAsWR+SQuBYyJwbBOZf3hnjt\nJbHbqj8Sx5ptDzqFdX3aDrZYq3DJ9QDW1pcUT60wy0CkRL7FmQDeuwHJCvkO\nxEvzANHNVm0gSI3FpOGEHsxUWVP5GIS7nXGBe1CMMuTuhCO4i0Zk4nKsroIZ\nbRXsgIoFTv//pirRTyVkfdZsBNesR5xZ6bZr22X2Wa8nbRIhvMySkKSfEi9S\noyFPSWrotyFjIsJ+NY/4XcbYjzG0a3NounrfestsK/7+wQ4Gf/rGF3Oc6u7I\n/iYMlTfcd6NCPf6eLPsgcXXWWze3XfU3lejTQtBUwrikrfk9WdJON4toEWAs\nwE/2\r\n=+8kb\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6"
  },
  "files": [
    "lib",
    "dist",
    "index.js"
  ],
  "gitHead": "0932a5daffe68ec67782fc6f74850a6456a37671",
  "homepage": "https://github.com/terkelg/prompts",
  "keywords": [
    "ui",
    "prompts",
    "cli",
    "prompt",
    "interface",
    "command-line",
    "input"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "terkelg",
      "email": "terkel@terkel.com"
    }
  ],
  "name": "prompts",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n  <img src=\"https://github.com/terkelg/prompts/raw/master/prompts.png\" alt=\"Prompts\" width=\"500\" height=\"120\" />\n</p>\n \n<h1 align=\"center\">❯ Prompts</h1>\n\n<p align=\"center\">\n  <a href=\"https://npmjs.org/package/prompts\">\n    <img src=\"https://img.shields.io/npm/v/prompts.svg\" alt=\"version\" />\n  </a>\n  <a href=\"https://travis-ci.org/terkelg/prompts\">\n    <img src=\"https://img.shields.io/travis/terkelg/prompts.svg\" alt=\"travis\" />\n  </a>\n  <a href=\"https://npmjs.org/package/prompts\">\n    <img src=\"https://img.shields.io/npm/dm/prompts.svg\" alt=\"downloads\" />\n  </a>\n   <a href=\"https://packagephobia.now.sh/result?p=prompts\">\n    <img src=\"https://packagephobia.now.sh/badge?p=prompts\" alt=\"install size\" />\n  </a>\n</p>\n\n<p align=\"center\">\n  <b>Lightweight, beautiful and user-friendly interactive prompts</b></br>\n  <sub>>_ Easy to use CLI prompts to enquire users for information▌<sub> \n</p>\n\n<br />\n\n* **Simple**: prompts has [no big dependencies](http://npm.anvaka.com/#/view/2d/prompts) nor is it broken into a [dozen](http://npm.anvaka.com/#/view/2d/inquirer) tiny modules that only work well together.\n* **User friendly**: prompt uses layout and colors to create beautiful cli interfaces.\n* **Promised**: uses promises and `async`/`await`. No callback hell.\n* **Flexible**: all prompts are independent and can be used on their own.\n* **Testable**: provides a way to submit answers programmatically.\n* **Unified**: consistent experience across all prompts. \n\n\n![split](https://github.com/terkelg/prompts/raw/master/media/split.png)\n\n\n## ❯ Install\n\n```\n$ npm install --save prompts\n```\n\n> This package supports Node 6 and above\n\n![split](https://github.com/terkelg/prompts/raw/master/media/split.png)\n\n## ❯ Usage\n\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/number.gif\" alt=\"example prompt\" width=\"499\" height=\"103\" />\n\n```js\nconst prompts = require('prompts');\n\nconst response = await prompts({\n    type: 'number',\n    name: 'value',\n    message: 'How old are you?'\n});\n\nconsole.log(response); // => { value: 23 }\n```\n\n> Examples are meant to be illustrative. `await` calls need to be run within an async function. See [`example.js`](https://github.com/terkelg/prompts/blob/master/example.js).\n\n\n![split](https://github.com/terkelg/prompts/raw/master/media/split.png)\n\n\n## ❯ Examples\n\n### Single Prompt\n\nPrompt with a single prompt object. Returns object with the response.\n\n```js\nconst prompts = require('prompts');\n\nlet response = await prompts({\n    type: 'text',\n    name: 'meaning',\n    message: 'What is the meaning of life?'\n});\n\nconsole.log(response.meaning);\n```\n\n### Prompt Chain\n\nPrompt with a list of prompt objects. Returns object with response.\nMake sure to give each prompt a unique `name` property to prevent overwriting values.\n\n```js\nconst prompts = require('prompts');\n\nlet questions = [\n    {\n        type: 'text',\n        name: 'username',\n        message: 'What is your GitHub username?'\n    },\n    {\n        type: 'number',\n        name: 'age',\n        message: 'How old are you?'\n    },\n    {\n        type: 'text',\n        name: 'about',\n        message: 'Tell something about yourself',\n        initial: 'Why should I?'\n    }\n];\n\nlet response = await prompts(questions);\n\n// => response => { username, age, about }\n```\n\n### Dynamic Prompts\n\nPrompt properties can be functions too.\nPrompt Objects with `type` set to `falsy` values are skipped.\n\n```js\nconst prompts = require('prompts');\n\nlet questions = [\n    {\n        type: 'text',\n        name: 'dish',\n        message: 'Do you like pizza?'\n    },\n    {\n        type: prev => prev == 'pizza' ? 'text' : null,\n        name: 'topping',\n        message: 'Name a topping'\n    }\n];\n\nlet response = await prompts(questions);\n```\n\n\n![split](https://github.com/terkelg/prompts/raw/master/media/split.png)\n\n\n## ❯ API\n\n### prompts(prompts, options)\n\nType: `Function`<br>\nReturns: `Object`\n\nPrompter function which takes your [prompt objects](#-prompt-objects) and returns an object with responses.\n\n\n#### prompts\n\nType: `Array|Object`<br>\n\nArray of [prompt objects](#-prompt-objects).\n These are the questions the user will be prompted. You can see the list of supported [prompt types here](#-types).\n\nPrompts can be submitted (<kbd>return</kbd>, <kbd>enter</kbd>) or canceled (<kbd>esc</kbd>, <kbd>abort</kbd>, <kbd>ctrl</kbd>+<kbd>c</kbd>, <kbd>ctrl</kbd>+<kbd>d</kbd>). No property is being defined on the returned response object when a prompt is canceled.\n\n#### options.onSubmit\n\nType: `Function`<br>\nDefault: `() => {}`\n\nCallback that's invoked after each prompt submission.\nIts signature is `(prompt, response)` where `prompt` is the current prompt object.\n\nReturn `true` to quit the prompt chain and return all collected responses so far, otherwise continue to iterate prompt objects.\n\n**Example:**\n```js\nlet questions = [{ ... }];\nlet onSubmit = (prompt, response) => console.log(`Thanks I got ${response} from ${prompt.name}`);\nlet response = await prompts(questions, { onSubmit });\n```\n\n#### options.onCancel\n\nType: `Function`<br>\nDefault: `() => {}`\n\nCallback that's invoked when the user cancels/exits the prompt.\nIts signature is `(prompt)` where `prompt` is the current prompt object.\n\nReturn `true` to continue and prevent the prompt loop from aborting.\nOn cancel responses collected so far are returned.\n\n**Example:**\n```js\nlet questions = [{ ... }];\nlet onCancel = prompt => {\n  console.log('Never stop prompting!');\n  return true;\n}\nlet response = await prompts(questions, { onCancel });\n```\n\n\n### inject(values)\n\nType: `Function`<br>\n\nProgrammatically inject responses. This enables you to prepare the responses ahead of time.\nIf any injected values are found the prompt is immediately resolved with the injected value.\nThis feature is intended for testing only.\n\n#### values\n\nType: `Object`\n\nObject with key/values to inject. Resolved values are deleted from the internal inject object.\n\n**Example:**\n```js\nconst prompts = require('prompts');\n\nprompts.inject({ q1: 'a1', q2: 'q2' });\nlet response = await prompts({\n  type: 'text',\n  name: 'q1',\n  message: 'Question 1'\n});\n\n// => { q1: 'a1' }\n\n```\n\n> When `q1` resolves it's wiped. `q2` doesn't resolve and is left untouched.\n\n\n![split](https://github.com/terkelg/prompts/raw/master/media/split.png)\n\n\n## ❯ Prompt Objects\n\nPrompts Objects are JavaScript objects that define the \"questions\" and the [type of prompt](#-types).\nAlmost all prompt objects have the following properties:\n\n```js\n{\n  type: String || Function,\n  name: String || Function,\n  message: String || Function,\n  initial: String || Function || Async Function\n  format: Function || Async Function,\n  onState: Function\n}\n```\n\nEach property be of type `function` and will be invoked right before prompting the user.\n\nThe function signature is `(prev, values, prompt)`, where `prev` is the value from the previous prompt, \n`values` is the response object with all values collected so far and `prompt` is the previous prompt object.\n\n**Function example:**\n```js\n{\n    type: prev => prev > 3 ? 'confirm' : null,\n    name: 'confirm',\n    message: (prev, values) => `Please confirm that you eat ${values.dish} times ${prev} a day?`\n}\n```\n\nThe above prompt will be skipped if the value of the previous prompt is less than 3.\n\n### type\n\nType: `String|Function`\n\nDefines the type of prompt to display. See the list of [prompt types](#-types) for valid values.\n\nIf `type` is a falsy value the prompter will skip that question.\n```js\n{\n  type: null,\n  name: 'forgetme',\n  message: `I'll never be shown anyway`,\n}\n```\n\n### name\n\nType: `String|Function`\n\nThe response will be saved under this key/property in the returned response object.\nIn case you have multiple prompts with the same name only the latest response will be stored.\n\n> Make sure to give prompts unique names if you don't want to overwrite previous values.\n\n### message\n\nType: `String|Function`\n\nThe message to be displayed to the user.\n\n### initial\n\nType: `String|Function`\n\nOptional default prompt value. Async functions are supported too.\n\n### format\n\nType: `Function`\n\nReceive the user input and return the formatted value to be used inside the program.\nThe value returned will be added to the response object.\n\nThe function signature is `(val, values)`, where `val` is the value from the current prompt and\n`values` is the current response object in case you need to format based on previous responses.\n\n**Example:**\n```js\n{\n    type: 'number',\n    name: 'price',\n    message: 'Enter price',\n    format: val => Intl.NumberFormat(undefined, { style: 'currency', currency: 'USD' }).format(val);\n}\n```\n\n### onState\n\nType: `Function`\n\nCallback for when the state of the current prompt changes.\nThe function signature is `(state)` where `state` is an object with a snapshot of the current state.\nThe state object have two properties `value` and `aborted`. E.g `{ value: 'This is ', aborted: false }`\n\n\n![split](https://github.com/terkelg/prompts/raw/master/media/split.png)\n\n\n## ❯ Types\n\n### text(message, [initial], [style])\n> Text prompt for free text input.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/text.gif\" alt=\"text prompt\" width=\"499\" height=\"103\" />\n\n```js\n{\n  type: 'text',\n  name: 'value',\n  message: `What's your twitter handle?`,\n  style: 'default',\n  initial: ''\n}\n```\n\n#### Options\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| message | <code>string</code> |  | Prompt message to display |\n| initial | <code>string</code> | <code>''</code> | Default string value |\n| style | <code>string</code> | <code>'default'</code> | Render style (`default`, `password`, `invisible`) |\n| format | <code>function</code> |  | Receive user input. The returned value will be added to the response object |\n| onState | <code>function</code> |  | On state change callback |\n\n\n### password(message, [initial])\n> Password prompt with masked input.\n\nThis prompt is a similar to a prompt of type `'text'` with `style` set to `'password'`.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/password.gif\" alt=\"password prompt\" width=\"499\" height=\"103\" />\n\n```js\n{\n  type: 'password',\n  name: 'value',\n  message: 'Tell me a secret',\n  initial '',\n}\n```\n\n#### Options\n| Param | Type | Description |\n| --- | --- | --- |\n| message | <code>string</code> | Prompt message to display |\n| initial | <code>string</code> | Default string value |\n| format | <code>function</code> | Receive user input. The returned value will be added to the response object |\n| onState | <code>function</code> | On state change callback | \n\n\n### invisible(message, [initial])\n> Prompts user for invisible text input.\n\nThis prompt is working like `sudo` where the input is invisible.\nThis prompt is a similar to a prompt of type `'text'` with style set to `'invisible'`.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/invisible.gif\" alt=\"invisible prompt\" width=\"499\" height=\"103\" />\n\n```js\n{\n  type: 'invisible',\n  name: 'value',\n  message: 'Enter password',\n  initial: ''\n}\n```\n\n#### Options\n| Param | Type | Description |\n| --- | --- | --- |\n| message | <code>string</code> | Prompt message to display |\n| initial | <code>string</code> | Default string value |\n| format | <code>function</code> | Receive user input. The returned value will be added to the response object |\n| onState | <code>function</code> | On state change callback |\n\n\n### number(message, initial, [max], [min], [style])\n> Prompts user for number input. \n\nYou can type in numbers and use <kbd>up</kbd>/<kbd>down</kbd> to increase/decrease the value. Only numbers are allowed as input.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/number.gif\" alt=\"number prompt\" width=\"499\" height=\"103\" />\n\n```js\n{\n  type: 'number',\n  name: 'value',\n  message: 'How old are you?',\n  initial: 0,\n  style: 'default',\n  min: 2,\n  max: 10\n}\n```\n\n#### Options\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| message | <code>string</code> |  | Prompt message to display |\n| initial | <code>number</code> | `null` | Default number value |\n| format | <code>function</code> |  | Receive user input. The returned value will be added to the response object |\n| max | <code>number</code> | `Infinity` | Max value |\n| min | <code>number</code> | `-infinity` | Min value |\n| style | <code>string</code> | <code>'default'</code> | Render style (`default`, `password`, `invisible`) |\n| onState | <code>function</code> |  | On state change callback | \n\n### confirm(message, [initial])\n> Classic yes/no prompt.\n\nHit <kbd>y</kbd> or <kbd>n</kbd> to confirm/reject.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/confirm.gif\" alt=\"confirm prompt\" width=\"499\" height=\"103\" />\n\n```js\n{\n  type: 'confirm',\n  name: 'value',\n  message: 'Can you confirm?',\n  initial: true\n}\n```\n\n\n#### Options\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| message | <code>string</code> |  | Prompt message to display |\n| initial | <code>boolean</code> | <code>false</code> | Default value |\n| format | <code>function</code> |  | Receive user input. The returned value will be added to the response object |\n| onState | <code>function</code> |  | On state change callback | \n\n### list(message, [initial])\n> List prompt that return an array.\n\nSimilar to the `text` prompt, but the output is an `Array` containing the\nstring separated by `separator`.\n\n```js\n{\n  type: 'list',\n  name: 'value',\n  message: 'Enter keywords',\n  initial: '',\n  separator: ','\n}\n```\n\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/list.gif\" alt=\"list prompt\" width=\"499\" height=\"103\" />\n\n\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| message | <code>string</code> |  | Prompt message to display |\n| initial | <code>boolean</code> | <code>false</code> | Default value |\n| format | <code>function</code> |  | Receive user input. The returned value will be added to the response object |\n| separator | <code>string</code> | <code>','</code> | String separator. Will trim all white-spaces from start and end of string |\n| onState | <code>function</code> |  | On state change callback |\n\n\n### toggle(message, [initial], [active], [inactive])\n> Interactive toggle/switch prompt.\n\nUse tab or <kbd>arrow keys</kbd>/<kbd>tab</kbd>/<kbd>space</kbd> to switch between options.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/toggle.gif\" alt=\"toggle prompt\" width=\"499\" height=\"103\" />\n\n```js\n{\n  type: 'toggle',\n  name: 'value',\n  message: 'Can you confirm?',\n  initial: true,\n  active: 'yes',\n  inactive: 'no'\n}\n```\n\n#### Options\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| message | <code>string</code> |  | Prompt message to display |\n| initial | <code>boolean</code> | <code>false</code> | Default value |\n| format | <code>function</code> |  | Receive user input. The returned value will be added to the response object |\n| active | <code>string</code> | <code>'on'</code> | Text for `active` state |\n| inactive | <code>string</code> | <code>'off'</code> | Text for `inactive` state |\n| onState | <code>function</code> |  | On state change callback |\n\n### select(message, choices, [initial])\n> Interactive select prompt.\n\nUse <kbd>up</kbd>/<kbd>down</kbd> to navigate. Use <kbd>tab</kbd> to cycle the list.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/select.gif\" alt=\"select prompt\" width=\"499\" height=\"130\" />\n\n```js\n{\n    type: 'select',\n    name: 'value',\n    message: 'Pick a color',\n    choices: [\n        { title: 'Red', value: '#ff0000' },\n        { title: 'Green', value: '#00ff00' },\n        { title: 'Blue', value: '#0000ff' }\n    ],\n    initial: 1\n}\n```\n\n#### Options\n| Param | Type | Description |\n| --- | --- | --- |\n| message | <code>string</code> | Prompt message to display |\n| initial | <code>number</code> | Index of default value |\n| format | <code>function</code> | Receive user input. The returned value will be added to the response object |\n| choices | <code>Array</code> | Array of choices objects `[{ title, value }, ...]` |\n| onState | <code>function</code> | On state change callback |\n\n\n### multiselect(message, choices, [initial], [max], [hint])\n> Interactive multi-select prompt.\n\nUse <kbd>space</kbd> to toggle select/unselect and <kbd>up</kbd>/<kbd>down</kbd> to navigate. Use <kbd>tab</kbd> to cycle the list. You can also use <kbd>right</kbd> to select and <kbd>left</kbd> to deselect.\nBy default this prompt returns an `array` containing the **values** of the selected items - not their display title.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/multiselect.gif\" alt=\"multiselect prompt\" width=\"499\" height=\"130\" />\n\n```js\n{\n    type: 'multiselect',\n    name: 'value',\n    message: 'Pick colors',\n    choices: [\n        { title: 'Red', value: '#ff0000' },\n        { title: 'Green', value: '#00ff00' },\n        { title: 'Blue', value: '#0000ff', selected: true }\n    ],\n    initial: 1,\n    max: 2,\n    hint: '- Space to select. Return to submit'\n}\n```\n\n#### Options\n| Param | Type | Description |\n| --- | --- | --- |\n| message | <code>string</code> | Prompt message to display |\n| format | <code>function</code> | Receive user input. The returned value will be added to the response object |\n| choices | <code>Array</code> | Array of choices objects `[{ title, value, [selected] }, ...]` |\n| max | <code>number</code> | Max select |\n| hint | <code>string</code> | Hint to display user |\n| onState | <code>function</code> | On state change callback | \n\nThis is one of the few prompts that don't take a initial value.\nIf you want to predefine selected values, give the choice object an `selected` property of `true`.\n\n\n### autocomplete(message, choices, [initial], [suggest], [limit], [style])\n> Interactive auto complete prompt. \n\nThe prompt will list options based on user input. Type to filter the list.\nUse <kbd>up</kbd>/<kbd>down</kbd> to navigate. Use <kbd>tab</kbd> to cycle the result. Hit <kbd>enter</kbd> to select the highlighted item below the prompt. \n\nThe default suggests function is sorting based on the `title` property of the choices.\nYou can overwrite how choices are being filtered by passing your own suggest function.\n\n#### Example\n<img src=\"https://github.com/terkelg/prompts/raw/master/media/autocomplete.gif\" alt=\"auto complete prompt\" width=\"499\" height=\"163\" />\n\n```js\n{\n    type: 'autocomplete',\n    name: 'value',\n    message: 'Pick your favorite actor',\n    choices: [\n        { title: 'Cage' },\n        { title: 'Clooney', value: 'silver-fox' },\n        { title: 'Gyllenhaal' },\n        { title: 'Gibson' },\n        { title: 'Grant' },\n    ]\n}\n```\n\n#### Options\n| Param | Type | Default | Description |\n| --- | --- | --- | --- |\n| message | <code>string</code> |  | Prompt message to display |\n| format | <code>function</code> |  | Receive user input. The returned value will be added to the response object |\n| choices | <code>Array</code> |  | Array of auto-complete choices objects `[{ title, value }, ...]` |\n| suggest | <code>function</code> | By `title` string | Filter function. Defaults to sort by `title` property. `suggest` should always return a promise |\n| limit | <code>number</code> | <code>10</code> | Max number of results to show |\n| style | <code>string</code> | `'default'` | Render style (`default`, `password`, `invisible`) |\n| onState | <code>function</code> |  | On state change callback |\n\nExample on what a `suggest` function might look like:\n```js\nconst suggestByTitle = (input, choices) =>\n  Promise.resolve(choices.filter(i => i.title.slice(0, input.length) === input))\n```\n\n\n![split](https://github.com/terkelg/prompts/raw/master/media/split.png)\n\n\n## ❯ Credit\nMany of the prompts are based on the work of [derhuerst](https://github.com/derhuerst).\n\n\n## ❯ License\n\nMIT © [Terkel Gjervig](https://terkel.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/terkelg/prompts.git"
  },
  "scripts": {
    "build": "babel lib -d dist",
    "prepublishOnly": "npm run build",
    "start": "node lib/index.js",
    "test": "tape test/*.js | tap-spec"
  },
  "version": "0.1.14"
}
