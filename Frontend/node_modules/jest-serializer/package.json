{
  "_args": [
    [
      {
        "raw": "jest-serializer@^23.0.1",
        "scope": null,
        "escapedName": "jest-serializer",
        "name": "jest-serializer",
        "rawSpec": "^23.0.1",
        "spec": ">=23.0.1 <24.0.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/jest-haste-map"
    ]
  ],
  "_from": "jest-serializer@>=23.0.1 <24.0.0",
  "_id": "jest-serializer@23.0.1",
  "_inCache": true,
  "_location": "/jest-serializer",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jest-serializer_23.0.1_1527435049912_0.14910529546950668"
  },
  "_npmUser": {
    "name": "mjesun",
    "email": "mjesun@hotmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "jest-serializer@^23.0.1",
    "scope": null,
    "escapedName": "jest-serializer",
    "name": "jest-serializer",
    "rawSpec": "^23.0.1",
    "spec": ">=23.0.1 <24.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/jest-haste-map"
  ],
  "_resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-23.0.1.tgz",
  "_shasum": "a3776aeb311e90fe83fab9e533e85102bd164165",
  "_shrinkwrap": null,
  "_spec": "jest-serializer@^23.0.1",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/jest-haste-map",
  "bugs": {
    "url": "https://github.com/facebook/jest/issues"
  },
  "dependencies": {},
  "description": "Module for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "a3776aeb311e90fe83fab9e533e85102bd164165",
    "tarball": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-23.0.1.tgz",
    "fileCount": 6,
    "unpackedSize": 6346,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbCs8qCRA9TVsSAnZWagAAMG0P/2FuRC16KRKlqQYvfxZF\nBXE23CeKnaP4s1GJNYwSteNbckWTMG3SQsWFU3ANZyas9QUCamTxqBmAsMZ7\nkL2c4JZGONkRGFHLfmsQG75hn3dmDHMf6xpxeh2jozP7rc/XuHvHIw0Wg11l\nHvaDVk2sWwZ1BD/OskPdoEjaGE0s6HcAsWE6hGqZwwVDp/K55fSqlGHcma/p\n3Fmyb2HMiaDQiQYnOeNxYMMr4xKr2SeW3aOOrJ5TUxfDbDcsnm68ArRKcqMR\nuVQ813qzxAzElAhImgK9l39MVcQo+1dw/STAAQxNs3eWAdxf1gJRZ7RqyOWa\nsiI8xXTimhSAQ3ZjKmAPCnayiU8Yt5XZEPBk2F1/M013hDPapEQ2GJAL94r7\n99UzdDh8EQLatlNsrSTvgUzziM8GKOHrbp/PhB86msHZU+v/CKkHzQMOWsho\nWtbhjAVtemAxRTg9qtbVEysCX8eeVtQFRGWzxCF3moJJ6xAoVf9F28lr+EM9\ndSiFgFKXwqFg1tNKXcABPxU/9Fw9huGhxLTeWpiIO7Z43OcHD0Xuroi+Ew+/\noFavV5oP6gh0v66oMY9i6AtuHkt35/Rf+3UoVZ3RBOcKBju9oJxlPheUQUol\n2kaP08DvRBleXtnVzf7NtNRSoALIeuKQ0Sp4FnYXmAEoJjSRfzNxaK2IAe4b\npVc3\r\n=jScH\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/facebook/jest#readme",
  "license": "MIT",
  "main": "build/index.js",
  "maintainers": [
    {
      "name": "cpojer",
      "email": "christoph.pojer@gmail.com"
    },
    {
      "name": "fb",
      "email": "opensource+npm@fb.com"
    },
    {
      "name": "mjesun",
      "email": "mjesun@hotmail.com"
    }
  ],
  "name": "jest-serializer",
  "optionalDependencies": {},
  "readme": "# jest-serializer\n\nModule for serializing and deserializing object into memory and disk. By default, the `v8` implementations are used, but if not present, it defaults to `JSON` implementation. Both serializers have the advantage of being able to serialize `Map`, `Set`, `undefined`, `NaN`, etc, although the JSON one does it through a replacer/reviver.\n\n## Install\n\n```sh\n$ yarn add jest-serializer\n```\n\n## API\n\nThree kinds of API groups are exposed:\n\n### In-memory serialization: `serialize` and `deserialize`\n\nThis set of functions take or return a `Buffer`. All the process happens in memory. This is useful when willing to transfer over HTTP, TCP or via UNIX pipes.\n\n```javascript\nimport {serialize, deserialize} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst buffer = serialize(myObject);\nconst myCopyObject = deserialize(buffer);\n```\n\n### Synchronous persistent filesystem: `readFileSync` and `writeFileSync`\n\nThis set of functions allow to send to disk a serialization result and retrieve it back, in a synchronous way. It mimics the `fs` API so it looks familiar.\n\n```javascript\nimport {readFileSync, writeFileSync} from 'jest-serializer';\n\nconst myObject = {\n  foo: 'bar',\n  baz: [0, true, '2', [], {}],\n};\n\nconst myFile = '/tmp/obj';\n\nwriteFileSync(myFile, myObject);\nconst myCopyObject = readFileSync(myFile);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/facebook/jest.git"
  },
  "version": "23.0.1"
}
