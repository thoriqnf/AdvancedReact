{
  "_args": [
    [
      {
        "raw": "consola@^1.4.3",
        "scope": null,
        "escapedName": "consola",
        "name": "consola",
        "rawSpec": "^1.4.3",
        "spec": ">=1.4.3 <2.0.0",
        "type": "range"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/webpackbar"
    ]
  ],
  "_from": "consola@^1.4.3",
  "_hasShrinkwrap": false,
  "_id": "consola@1.4.4",
  "_location": "/consola",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/consola_1.4.4_1539444449889_0.48881826747280877"
  },
  "_npmUser": {
    "name": "pi0",
    "email": "pyapar@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "consola@^1.4.3",
    "scope": null,
    "escapedName": "consola",
    "name": "consola",
    "rawSpec": "^1.4.3",
    "spec": ">=1.4.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpackbar"
  ],
  "_resolved": "https://registry.npmjs.org/consola/-/consola-1.4.4.tgz",
  "_shasum": "cf5eda375c0e99df8970cc8f5e98be023da24ce0",
  "_shrinkwrap": null,
  "_spec": "consola@^1.4.3",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/webpackbar",
  "author": {
    "name": "Pooya Parsa",
    "email": "pooya@pi0.ir"
  },
  "bugs": {
    "url": "https://github.com/nuxt/consola/issues"
  },
  "dependencies": {
    "chalk": "^2.3.2",
    "figures": "^2.0.0",
    "lodash": "^4.17.5",
    "std-env": "^1.1.0"
  },
  "description": "Elegant Console Logger",
  "devDependencies": {
    "bili": "^3.0.14",
    "eslint": "^4.17.0",
    "eslint-config-standard": "11.0.0",
    "eslint-plugin-import": "^2.11.0",
    "eslint-plugin-jest": "latest",
    "eslint-plugin-node": "6.0.1",
    "eslint-plugin-promise": "latest",
    "eslint-plugin-standard": "latest",
    "eslint-plugin-vue": "latest",
    "esm": "^3.0.14",
    "standard-version": "^4.3.0",
    "winston": "^3.0.0-rc3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6ZCi6LpbwGml3g8C8iXIuSf9yZAWoRAXodcHxBWRVvy42uKe4z7AG4JB4v46LEmgtPXv2rIqR6wVD+sxixDD/A==",
    "shasum": "cf5eda375c0e99df8970cc8f5e98be023da24ce0",
    "tarball": "https://registry.npmjs.org/consola/-/consola-1.4.4.tgz",
    "fileCount": 13,
    "unpackedSize": 24392,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbwg7iCRA9TVsSAnZWagAASEUP/Rwfvqq+RRgEP1LjdhsV\nYIJdPFjYgn/+yfRIKRBFbtTnodnQcOFFIUcpgygBkMPmvMxoIPRc+xcuG97+\n0omwDNQEIhC2ElHv+1xz2t1JpqYPLJznNt4jsZDEzbcRCphWDV+1RaHD2BY3\n+q5lqj+fRoJ2rTMcASAIVJLJskPLWj84Sx6ukqldI7DhKahStI9SpQ3UWSJ1\nZ1gzhWUT8R4kaxzFtKtkMm/yyHUy1i+wcTE3EQlwJTBgyYa034BOMX6QO6ri\nEKto1rM5lhc2pzAa9ppzb0OVryxu83K7Qgq4Ylq1xeiPTcs7ZoONYYPfis5L\nluKgh3vpCDBHyGy9TQZvKpmzMY9lkQlE9M3JtEfJ3IgQpZIfk4Tply6GCGbc\nz1TvukiRuVfp84t2TD1Uz/ENuPX0+Nr7A4bwmTcnuswCbEKdYGU6ZnWIKUma\nWaKahv4bBWG37p7/Ear7SXhDMi5AImvaia8vleDW2qHuEdlicW/2R+S6ukWn\nvebmZDpUJwdOjwGg/xrKbY+gfo7EGqCTa9ro/zC1EOTSSH/nWj7Sn8twvWg2\nA6BSd9GqRWHsADzXU2qAF+GKmD8XATLuMVtnBImlyjvnNgmHxYVvRIP1skfJ\nBnPCHVwxYZLY5twT15ZHpo6dUKzWYG2Br/VmHdQgR+N3xL4hvzDMW7z3CASI\nGHeB\r\n=3vPa\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist",
    "src",
    "index.js"
  ],
  "gitHead": "493805745d80553a813296fd1b93a06fd8b01f06",
  "homepage": "https://github.com/nuxt/consola#readme",
  "keywords": [
    "console",
    "logger",
    "reporter",
    "elegant",
    "cli",
    "universal",
    "unified",
    "winston"
  ],
  "license": "MIT",
  "main": "./dist/consola.cjs.js",
  "maintainers": [
    {
      "name": "atinux",
      "email": "atinux@gmail.com"
    },
    {
      "name": "clarkdo",
      "email": "clark.duxin@gmail.com"
    },
    {
      "name": "pi0",
      "email": "pyapar@gmail.com"
    }
  ],
  "module": "./src/index.js",
  "name": "consola",
  "optionalDependencies": {},
  "readme": "# Consola\n\nElegant Console Logger\n\n## Why Consola?\n\n- Easy to use\n- Fancy output with Fallback for Continuous Integration (CI) environments\n- Global mockable stdout/stderr wrapper\n- Pluggable reporters\n- Consistent Command Line Interface (CLI) experience\n- Scoped Loggers\n\n## Installation\n\nUsing yarn:\n\n```bash\nyarn add consola\n```\n\nUsing npm:\n\n```bash\nnpm i consola\n```\n\n## Getting started\n\n```js\nconst consola = require('consola')\n\n// See types section for all available types\nconsola.start('Starting build')\nconsola.success('Built!')\nconsola.info('Reporter: Some info')\nconsola.error(new Error('Foo'))\n```\n\n<div align=\"center\">\n<br>\n<img src=\"./assets/screen1.png\" width=\"600px\">\n<p>Fancy Reporter</p>\n<br>\n</div>\n\n<pre>\n[2:17:17 PM] Starting build\n[2:17:17 PM] [TEST] Log from test scope\n[2:17:18 PM] Built!\n[2:17:18 PM] Some info\n[2:17:18 PM] Error: Foo\n</pre>\n<div align=\"center\">\n<p>Minimal Reporter (CI)</p>\n<br>\n</div>\n\n## Scoped Loggers\n\nGroup logs using an scope:\n\n```js\nconst logger = consola.withScope('test')\n\nlogger.info('Log from test scope') // [Test] Log from test scope\n```\n\n## Reporters\n\nChoose between one of the built-in reporters or bring own reporter.\n\nBy default `FancyReporter` is registered for modern terminals or `BasicReporter` will be used if running in limited environments such as CIs.\n\nAvailable reporters:\n\n- [BasicReporter](./src/reporters/basic.js)\n- [FancyReporter](./src/reporters/fancy.js)\n- [JSONReporter](./src/reporters/json.js)\n- [WinstonReporter](./src/reporters/winston.js)\n\nPlease see [Examples](./examples) for usage info.\n\n### Creating your own reporter\n\nA reporter (Class or Object) exposes `log(logObj)` method.\nTo write a reporter, check implementations to get an idea.\n\n## Types\n\nTypes can be treated as _extended logging levels_ in Consola's world.\n\nA list of all available default types is [here](./src/types.js).\n\n## Creating a new instance\n\nConsola has a global instance and is recommended to use everywhere.\nIn case more control is needed, create a new instance.\n\n```js\nconst { Consola, BasicReporter } = require('consola')\n\n\nconst consola = new Consola({\n    level: 30,\n    reporters: [],\n    types: []\n})\n\nconsola.add(BasicReporter)\n```\n\n## API\n\n- `consola.<type>([logObj|message|error])`\n\nLog to all reporters. If a plain string or error is given, then the message will be automatically translated to a logObject.\n\n- `add(reporter)`\n\nRegister a custom reporter instance.\n\n- `remove(reporter)`\n\nRemove a registered reporter.\n\n- `clear()`\n\nRemove all current reporters (Useful for writing tests).\n\n- `withDefaults(defaults)`\n\nCreate a wrapper interface with all types available and `defaults` applied to all logs.\n\n- `withScope(scope)`\n\nShortcut to `withDefaults({ scope })`.\n\n- `level`\n\nThe level to display logs. Any logs at or above this level will be displayed.  \nList of available levels [here](./src/types.js)\n\n## logObject\n\nlogObject is a free-to-extend object which will be passed to reporters.\n\nHere are standard possible fields:\n\nCommon fields:\n\n- `message`\n- `date`\n- `scope`\n\nExtended fields:\n\n- `clear`\n- `badge`\n- `additional`\n- `additionalStyle` (By default: `grey`)\n- `icon` (Default depends on log type)\n\n## Integrations\n\n### With jest\n\n```js\nconsola.clear().add({\n  log: jest.fn()\n})\n```\n\n### With jsdom\n\n```js\n{\n  virtualConsole: new jsdom.VirtualConsole().sendTo(consola)\n}\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nuxt/consola.git"
  },
  "scripts": {
    "build": "bili",
    "prepublish": "yarn build",
    "release": "standard-version && yarn build && git push --follow-tags && npm publish",
    "test": "true"
  },
  "version": "1.4.4"
}
