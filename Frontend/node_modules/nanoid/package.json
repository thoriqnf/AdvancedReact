{
  "_args": [
    [
      {
        "raw": "nanoid@1.2.1",
        "scope": null,
        "escapedName": "nanoid",
        "name": "nanoid",
        "rawSpec": "1.2.1",
        "spec": "1.2.1",
        "type": "version"
      },
      "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/next"
    ]
  ],
  "_from": "nanoid@1.2.1",
  "_hasShrinkwrap": false,
  "_id": "nanoid@1.2.1",
  "_location": "/nanoid",
  "_nodeVersion": "10.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nanoid_1.2.1_1534402157733_0.11071688872189922"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nanoid@1.2.1",
    "scope": null,
    "escapedName": "nanoid",
    "name": "nanoid",
    "rawSpec": "1.2.1",
    "spec": "1.2.1",
    "type": "version"
  },
  "_requiredBy": [
    "/next"
  ],
  "_resolved": "https://registry.npmjs.org/nanoid/-/nanoid-1.2.1.tgz",
  "_shasum": "922bf6c10e35f7b208993768dad643577c907adf",
  "_shrinkwrap": null,
  "_spec": "nanoid@1.2.1",
  "_where": "/Users/thoriqnurfaizal/Documents/GitHub/AdvancedReact/Frontend/node_modules/next",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "browser": {
    "./random.js": "./random.browser.js",
    "./index.js": "./index.browser.js",
    "./async.js": "./async.browser.js"
  },
  "bugs": {
    "url": "https://github.com/ai/nanoid/issues"
  },
  "dependencies": {},
  "description": "A tiny (145 bytes), secure URL-friendly unique string ID generator",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-S1QSG+TQtsqr2/ujHZcNT0OxygffUaUT755qTc/SPKfQ0VJBlOO6qb1425UYoHXPvCZ3pWgMVCuy1t7+AoCxnQ==",
    "shasum": "922bf6c10e35f7b208993768dad643577c907adf",
    "tarball": "https://registry.npmjs.org/nanoid/-/nanoid-1.2.1.tgz",
    "fileCount": 14,
    "unpackedSize": 15740,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbdR5uCRA9TVsSAnZWagAAKLcQAJc7wuPKdrE4Yl9aCQzD\nLpIcNuvx+OgQcpz0iY+6Cn/ZSbn1CF3ORDJ4eY5G+7en/S7S2vlip4M/yWfn\nK3zaxh0V+25v8TWskYMoqYjkM0vgX/x6+2fQ+gyZ4RZnqYOYwrsT6vb8LuTB\n519TcxvYw8cvPnUoTwAuyzBtB1aJ70aslzFPSQcxtiXd3KlqPaI0YhBNPC13\n0nPaTtr7XbV5QHr/XyUPdoGOWpGDjoBXSQtndd2Zc++/0rN1Rt8cUFvWcdI/\nQkXqqMdL36Pu9FEWV2oibVwpnxwFhoZMFO1StuOAKi0DaZkhQnS0NbatgSfT\njGeKeAlU5HThPXzM2KuXd5Viq6LAJkGne4wLPc5APkI0tR93QJJx5XTPgiTw\nPnN4VXacEqfjoqt4VF3mpO2lAYMlU7Yz0nvpwnt+WPeW3KO1qg4Y/3GJqcke\nnSX2/kYSgVQItsBUb4otC18eSAbcgV8kgJMjja7LAPr7ThfVOrpswbjliLUT\nwAcmdeoRk+3Wd9Cg2Sx7tNs3Q7wTB8EtcGiCrlUbVNKI31/l5TBgplEqIA3Z\nLVuSl76WkPTBNavZDvodHq6039refk+OKHwOlIR2UaWBmT0242FLrr5ygKuD\nR1+M5PB3WFm3b9ZAdLkZlKVV2dBHTmkQNWPm2hDZiXmDjBJ8oS3EkzeBg68D\nTRrN\r\n=jZyJ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://github.com/ai/nanoid#readme",
  "keywords": [
    "uuid",
    "random",
    "id",
    "url"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "nanoid",
  "optionalDependencies": {},
  "readme": "# Nano ID\n\n<img src=\"https://ai.github.io/nanoid/logo.svg\" align=\"right\"\n     alt=\"Nano ID logo by Anton Lovchikov\" width=\"180\" height=\"94\">\n\nA tiny, secure, URL-friendly, unique string ID generator for JavaScript.\n\n**Safe.** It uses cryptographically strong random APIs\nand tests distribution of symbols.\n\n**Small.** 145 bytes (minified and gzipped). No dependencies.\nIt uses [Size Limit] to control size.\n\n**Compact.** It uses a larger alphabet than UUID (`A-Za-z0-9_~`).\nAs result it could reduce ID size from 36 to 21 symbols.\n\n```js\nvar nanoid = require('nanoid')\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B~myT\"\n```\n\nThe generator supports Node.js, React Native, and [all browsers].\n\n[all browsers]: http://caniuse.com/#feat=getrandomvalues\n[Size Limit]:   https://github.com/ai/size-limit\n\n<a href=\"https://evilmartians.com/?utm_source=nanoid\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n\n## Security\n\n*See a good article about random generators theory:\n[Secure random values (in Node.js)]*\n\n\n### Unpredictability\n\nInstead of using the unsafe `Math.random()`, Nano ID uses the `crypto` module\nin Node.js and the Web Crypto API in browsers. This modules use unpredictable\nhardware random generator.\n\n\n### Uniformity\n\n`random % alphabet` is a popular mistake to make when coding an ID generator.\nThe spread will not be even; there will be a lower chance for some symbols\nto appear compared to others—so it will reduce the number of tries\nwhen brute-forcing.\n\nNano ID uses a [better algorithm] and is tested for uniformity.\n\n<img src=\"img/distribution.png\" alt=\"Nano ID uniformity\"\n     width=\"340\" height=\"135\">\n\n[Secure random values (in Node.js)]: https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba\n[better algorithm]: https://github.com/ai/nanoid/blob/master/format.js\n\n\n## Comparison with UUID\n\nNano ID is quite comparable to UUID v4 (random-based).\nIt has a similar number of random bits in the ID\n(126 in Nano ID and 122 in UUID), so it has a similar collision probability:\n\n> For there to be a one in a billion chance of duplication,\n> 103 trillion version 4 IDs must be generated.\n\nThere are two main differences between Nano ID and UUID v4:\n\n1. Nano ID uses a bigger alphabet, so a similar number of random bits\n   are packed in just 21 symbols instead of 36.\n2. Nano ID code is 3 times less than `uuid/v4` package:\n   145 bytes instead of 435.\n\n\n## Benchmark\n\n```\n$ ./test/benchmark\nnanoid                354,201 ops/sec\nnanoid/generate       348,467 ops/sec\nuid.sync              325,347 ops/sec\nuuid/v4               322,328 ops/sec\nshortid                33,277 ops/sec\n\nAsync:\nuid                    71,998 ops/sec\nnanoid/async           72,836 ops/sec\n\nNon-secure:\nrndm                2,495,324 ops/sec\nnanoid/non-secure   2,746,033 ops/sec\n```\n\n\n## Usage\n\n### Normal\n\nThe main module uses URL-friendly symbols (`A-Za-z0-9_~`) and returns an ID\nwith 21 characters (to have a collision probability similar to UUID v4).\n\n```js\nconst nanoid = require('nanoid')\nmodel.id = nanoid() //=> \"Uakgb_J5m9g~0JDMbcJqLJ\"\n```\n\nSymbols `-,.()` are not encoded in the URL. If used at the end of a link\nthey could be identified as a punctuation symbol.\n\nIf you want to reduce ID length (and increase collisions probability),\nyou can pass the length as an argument.\n\n```js\nnanoid(10) //=> \"IRFa~VaY2b\"\n```\n\nDon’t forget to check safety of your ID length\nin our [ID collision probability] calculator.\n\n[ID collision probability]: https://zelark.github.io/nano-id-cc/\n\n\n### React Native and Web Workers\n\nReact Native and Web Worker don’t have access to secure random generator.\n\nSecurity is important in ID, when ID should be unpredictable. For instance,\nin “access by URL” link generation.\n\nIf you don’t need unpredictable IDs, but you need React Native\nor Web Workers support, you can use non‑secure ID generator.\n\n```js\nconst nanoid = require('nanoid/non-secure')\nmodel.id = nanoid() //=> \"Uakgb_J5m9g~0JDMbcJqLJ\"\n```\n\n\n## Async\n\nTo generate hardware random bytes, CPU will collect electromagnetic noise.\nDuring the collection, CPU doesn’t work. So if we will use asynchronous API\nfor hardware random generator, your other code could be executed during\nthe entropy collection.\n\n```js\nconst nanoid = require('nanoid/async')\nnanoid.then(id => {\n  model.id = id\n})\n```\n\nUnfortunately, you will not have any benefits in browser, since Web Crypto API\ndoesn’t have asynchronous API.\n\n\n### Custom Alphabet or Length\n\nIf you want to change the ID's alphabet or length\nyou can use the low-level `generate` module.\n\n```js\nconst generate = require('nanoid/generate')\nmodel.id = generate('1234567890abcdef', 10) //=> \"4f90d13a42\"\n```\n\nCheck safety of your custom alphabet and ID length\nin our [ID collision probability] calculator.\nYou can find popular alphabets in [`nanoid-dictionary`].\n\nAlphabet must contain 256 symbols or less.\nOtherwise, the generator will not be secure.\n\n[ID collision probability]: https://alex7kom.github.io/nano-nanoid-cc/\n[`nanoid-dictionary`]:      https://github.com/CyberAP/nanoid-dictionary\n\n\n### Custom Random Bytes Generator\n\nYou can replace the default safe random generator using the `format` module.\nFor instance, to use a seed-based generator.\n\n```js\nconst format = require('nanoid/format')\n\nfunction random (size) {\n  const result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomByte())\n  }\n  return result\n}\n\nformat(random, \"abcdef\", 10) //=> \"fbaefaadeb\"\n```\n\n`random` callback must accept the array size and return an array\nwith random numbers.\n\nIf you want to use the same URL-friendly symbols with `format`,\nyou can get the default alphabet from the `url` file.\n\n```js\nconst url = require('nanoid/url')\nformat(random, url, 10) //=> \"93ce_Ltuub\"\n```\n\n\n## Tools\n\n* [ID size calculator] to choice smaller ID size depends on your case.\n* [`nanoid-dictionary`] with popular alphabets to use with `nanoid/generate`.\n* [`nanoid-cli`] to generate ID from CLI.\n* [`nanoid-good`] to be sure that your ID doesn't contain any obscene words.\n\n[`nanoid-dictionary`]: https://github.com/CyberAP/nanoid-dictionary\n[ID size calculator]:  https://zelark.github.io/nano-id-cc/\n[`nanoid-cli`]:        https://github.com/twhitbeck/nanoid-cli\n[`nanoid-good`]:       https://github.com/y-gagar1n/nanoid-good\n\n\n## Other Programming Languages\n\n* [C#](https://github.com/codeyu/nanoid-net)\n* [Clojure and ClojureScript](https://github.com/zelark/nano-id)\n* [Crystal](https://github.com/mamantoha/nanoid.cr)\n* [Dart](https://github.com/pd4d10/nanoid)\n* [Go](https://github.com/matoous/go-nanoid)\n* [Elixir](https://github.com/railsmechanic/nanoid)\n* [Haskell](https://github.com/4e6/nanoid-hs)\n* [Java](https://github.com/aventrix/jnanoid)\n* [PHP](https://github.com/hidehalo/nanoid-php)\n* [Python](https://github.com/puyuan/py-nanoid)\n* [Ruby](https://github.com/radeno/nanoid.rb)\n* [Rust](https://github.com/nikolay-govorov/nanoid)\n* [Swift](https://github.com/antiflasher/NanoID)\n\nAlso, [CLI tool] is available to generate IDs from command line.\n\n[CLI tool]: https://github.com/twhitbeck/nanoid-cli\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ai/nanoid.git"
  },
  "version": "1.2.1"
}
